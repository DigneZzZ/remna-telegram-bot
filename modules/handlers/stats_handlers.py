import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from modules.config import MAIN_MENU, STATS_MENU
from modules.api.system import SystemAPI
from modules.api.nodes import NodeAPI
from modules.utils.formatters import format_system_stats, format_bandwidth_stats, format_bytes
from modules.handlers.start_handler import show_main_menu

logger = logging.getLogger(__name__)

async def show_stats_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show statistics menu"""
    keyboard = [
        [InlineKeyboardButton("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="system_stats")],
        [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞", callback_data="bandwidth_stats")],
        [InlineKeyboardButton("üñ•Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data="nodes_stats")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã*\n\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"

    await update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def handle_stats_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle statistics menu selection"""
    query = update.callback_query
    await query.answer()

    data = query.data

    if data == "system_stats":
        return await show_system_stats(update, context)

    elif data == "bandwidth_stats":
        return await show_bandwidth_stats(update, context)
        
    elif data == "nodes_stats":
        return await show_nodes_stats(update, context)

    elif data == "back_to_stats":
        await show_stats_menu(update, context)
        return STATS_MENU

    elif data == "back_to_main":
        await show_main_menu(update, context)
        return MAIN_MENU

    return STATS_MENU

async def show_system_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show system statistics"""
    await update.callback_query.edit_message_text("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã...")

    stats = await SystemAPI.get_stats()

    if not stats:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_stats")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã.",
            reply_markup=reply_markup
        )
        return STATS_MENU

    try:
        message = format_system_stats(stats)
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        import logging
        logging.error(f"Error formatting system stats: {e}")
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_stats")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}",
            reply_markup=reply_markup
        )
        return STATS_MENU

    # Add back button
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="system_stats")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_stats")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

    return STATS_MENU

async def show_bandwidth_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show bandwidth statistics"""
    await update.callback_query.edit_message_text("üìà –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞...")

    stats = await SystemAPI.get_bandwidth_stats()

    if not stats:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_stats")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞.",
            reply_markup=reply_markup
        )
        return STATS_MENU

    message = format_bandwidth_stats(stats)

    # Add back button
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="bandwidth_stats")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_stats")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

    return STATS_MENU

async def show_nodes_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show nodes statistics"""
    query = update.callback_query
    await query.answer()
    
    try:
        logger.info("Starting nodes stats request")
        await query.edit_message_text("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        
        # Get nodes stats from API
        logger.info("Calling NodeAPI.get_nodes_stats()")
        nodes_stats = await NodeAPI.get_nodes_stats()
        logger.info(f"NodeAPI.get_nodes_stats() returned: {nodes_stats}")
        
        if not nodes_stats:
            logger.warning("nodes_stats is None or empty")
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_stats")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤.",
                reply_markup=reply_markup
            )
            return STATS_MENU
        
        # Format nodes statistics
        message = "üñ•Ô∏è *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤*\n\n"
        
        total_nodes = len(nodes_stats)
        online_nodes = sum(1 for node in nodes_stats if node.get('status') == 'connected')
        
        message += f"üìä *–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n"
        message += f"‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {total_nodes}\n"
        message += f"‚Ä¢ –û–Ω–ª–∞–π–Ω: {online_nodes}\n"
        message += f"‚Ä¢ –û—Ñ–ª–∞–π–Ω: {total_nodes - online_nodes}\n\n"
        
        if nodes_stats:
            message += "üìã *–î–µ—Ç–∞–ª–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤:*\n"
            for node in nodes_stats:
                name = node.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                status = 'üü¢' if node.get('status') == 'connected' else 'üî¥'
                uptime = node.get('uptime', 'N/A')
                message += f"‚Ä¢ {status} {name} (Uptime: {uptime})\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_stats")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        return STATS_MENU
        
    except Exception as e:
        logger.error(f"Error in show_nodes_stats: {e}", exc_info=True)
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_stats")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤.",
            reply_markup=reply_markup
        )
        return STATS_MENU
