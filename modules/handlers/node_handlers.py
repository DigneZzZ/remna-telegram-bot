from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging

from modules.config import MAIN_MENU, NODE_MENU, EDIT_NODE, EDIT_NODE_FIELD, CREATE_NODE, NODE_NAME, NODE_ADDRESS, NODE_PORT, NODE_TLS, SELECT_INBOUNDS
from modules.api.nodes import get_all_nodes, get_node_certificate, get_nodes_usage
from modules.api.inbounds import InboundAPI
from modules.utils.formatters import format_node_details, format_bytes
from modules.utils.selection_helpers import SelectionHelper
from modules.handlers.start_handler import show_main_menu

logger = logging.getLogger(__name__)

async def show_nodes_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show nodes menu"""
    keyboard = [
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data="list_nodes")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä", callback_data="add_node")],
        [InlineKeyboardButton("üìú –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–∞–Ω–µ–ª–∏", callback_data="get_panel_certificate")],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã", callback_data="restart_all_nodes")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", callback_data="nodes_usage")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = "üñ•Ô∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏*\n\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    await update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def handle_nodes_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle nodes menu selection"""
    query = update.callback_query
    await query.answer()

    data = query.data

    if data == "list_nodes":
        await list_nodes(update, context)
        return NODE_MENU
    
    elif data == "add_node":
        await start_create_node(update, context)
        return CREATE_NODE
    
    elif data == "get_panel_certificate":
        await show_node_certificate(update, context)
        return NODE_MENU

    elif data == "restart_all_nodes":
        # Confirm restart all nodes
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="confirm_restart_all"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_nodes")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã?",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return NODE_MENU

    elif data == "confirm_restart_all":
        # Restart all nodes
        result = await NodeAPI.restart_all_nodes()
        
        if result and result.get("eventSent"):
            message = "‚úÖ –ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞."
        else:
            message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–æ–≤."
        
        # Add back button
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_nodes")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return NODE_MENU
        
    elif data == "nodes_usage":
        await show_nodes_usage(update, context)
        return NODE_MENU

    elif data == "back_to_nodes":
        await show_nodes_menu(update, context)
        return NODE_MENU

    elif data == "back_to_main":
        await show_main_menu(update, context)
        return MAIN_MENU
        
    elif data.startswith("view_node_"):
        uuid = data.split("_")[2]
        await show_node_details(update, context, uuid)
        return NODE_MENU
    
    elif data.startswith("select_node_"):
        # Handle SelectionHelper callback for node selection
        node_id = data.replace("select_node_", "")
        await show_node_details(update, context, node_id)
        return NODE_MENU
    
    elif data.startswith("page_nodes_"):
        # Handle pagination for node list
        page = int(data.split("_")[2])
        await handle_node_pagination(update, context, page)
        return NODE_MENU
    
    elif data.startswith("enable_node_"):
        uuid = data.split("_")[2]
        await enable_node(update, context, uuid)
        return NODE_MENU
    elif data.startswith("disable_node_"):
        uuid = data.split("_")[2]
        await disable_node(update, context, uuid)
        return NODE_MENU
    elif data.startswith("restart_node_"):
        uuid = data.split("_")[2]
        await restart_node(update, context, uuid)
        return NODE_MENU
    elif data.startswith("node_stats_"):
        uuid = data.split("_")[2]
        await show_node_stats(update, context, uuid)
        return NODE_MENU
    elif data.startswith("edit_node_"):
        uuid = data.split("_")[2]
        await start_edit_node(update, context, uuid)
        return EDIT_NODE

    return NODE_MENU

async def list_nodes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """List all nodes using SelectionHelper"""
    await update.callback_query.edit_message_text("üñ•Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤...")

    try:
        # Use SelectionHelper for user-friendly display
        keyboard, nodes_data = await SelectionHelper.get_nodes_selection_keyboard(
            callback_prefix="view_node",
            include_back=True
        )
        
        # Replace back button with custom callback by creating new keyboard
        if keyboard.inline_keyboard and keyboard.inline_keyboard[-1][0].text == "üîô –ù–∞–∑–∞–¥":
            # Create new keyboard with corrected back button
            new_keyboard = []
            for row in keyboard.inline_keyboard[:-1]:  # All rows except the last one
                new_keyboard.append(row)
            
            # Add corrected back button as last row
            new_keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_nodes")])
            keyboard = InlineKeyboardMarkup(new_keyboard)
        
        # Store nodes data in context for later use
        context.user_data["nodes_data"] = nodes_data
        
        if not nodes_data:
            await update.callback_query.edit_message_text(
                "‚ùå –°–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞.",
                reply_markup=keyboard
            )
            return NODE_MENU

        # Count online/offline nodes
        online_count = sum(1 for node in nodes_data.values() 
                          if not node.get("isDisabled", False) and node.get("isConnected", False))
        total_count = len(nodes_data)
        
        message = f"üñ•Ô∏è *–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤* ({online_count}/{total_count} –æ–Ω–ª–∞–π–Ω)\n\n"
        message += "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"

        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"Error listing nodes: {e}")
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_nodes")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤.",
            reply_markup=reply_markup
        )

    return NODE_MENU

async def show_node_details(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid):
    """Show node details"""
    node = await NodeAPI.get_node_by_uuid(uuid)
    
    if not node:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_nodes")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=reply_markup
        )
        return NODE_MENU
    
    message = format_node_details(node)
    
    # Create action buttons
    keyboard = []
    
    if node["isDisabled"]:
        keyboard.append([InlineKeyboardButton("üü¢ –í–∫–ª—é—á–∏—Ç—å", callback_data=f"enable_node_{uuid}")])
    else:
        keyboard.append([InlineKeyboardButton("üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å", callback_data=f"disable_node_{uuid}")])
    
    keyboard.append([InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"restart_node_{uuid}")])
    keyboard.append([InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"node_stats_{uuid}")])
    keyboard.append([InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_node_{uuid}")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="list_nodes")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return NODE_MENU

async def show_nodes_usage(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show nodes usage statistics"""
    logger.info("Requesting nodes realtime usage statistics")
    
    # Get realtime usage
    usage = await get_nodes_usage()
    
    logger.info(f"Nodes realtime usage API response: {usage}")
    
    if not usage:
        logger.warning("No usage data returned from API")
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_nodes")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            "‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=reply_markup
        )
        return NODE_MENU
    
    message = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤*\n\n"
    
    # Sort by total bandwidth
    sorted_usage = sorted(usage, key=lambda x: x.get("totalBytes", 0), reverse=True)
    
    for i, node in enumerate(sorted_usage):
        node_name = node.get('nodeName', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä')
        country_code = node.get('countryCode', 'N/A')
        download_bytes = node.get('downloadBytes', 0)
        upload_bytes = node.get('uploadBytes', 0)
        total_bytes = node.get('totalBytes', 0)
        download_speed = node.get('downloadSpeedBps', 0)
        upload_speed = node.get('uploadSpeedBps', 0)
        total_speed = node.get('totalSpeedBps', 0)
        
        message += f"{i+1}. *{node_name}* ({country_code})\n"
        message += f"   üì• –ó–∞–≥—Ä—É–∑–∫–∞: {format_bytes(download_bytes)} ({format_bytes(download_speed)}/—Å)\n"
        message += f"   üì§ –í—ã–≥—Ä—É–∑–∫–∞: {format_bytes(upload_bytes)} ({format_bytes(upload_speed)}/—Å)\n"
        message += f"   üìä –í—Å–µ–≥–æ: {format_bytes(total_bytes)} ({format_bytes(total_speed)}/—Å)\n\n"
    
    # Add action buttons
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="nodes_usage")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_nodes")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return NODE_MENU

async def enable_node(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid):
    """Enable node"""
    logger.info(f"Attempting to enable node with UUID: {uuid}")
    
    try:
        result = await NodeAPI.enable_node(uuid)
        logger.info(f"Enable node API result: {result}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if result:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ success
            if result.get("success") is True:
                message = "‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω."
            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç uuid (–ø—Ä–∏–∑–Ω–∞–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
            elif result.get("uuid") == uuid:
                message = "‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω."
            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç isDisabled = False
            elif result.get("isDisabled") is False:
                message = "‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω."
            else:
                message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞."
                logger.error(f"Unexpected API response format: {result}")
        else:
            message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞."
            logger.error(f"Empty or null API response: {result}")
            
    except Exception as e:
        message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞."
        logger.error(f"Exception while enabling node: {e}")
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –¥–µ—Ç–∞–ª—è–º", callback_data=f"view_node_{uuid}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return NODE_MENU

async def disable_node(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid):
    """Disable node"""
    logger.info(f"Attempting to disable node with UUID: {uuid}")
    
    try:
        result = await NodeAPI.disable_node(uuid)
        logger.info(f"Disable node API result: {result}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if result:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ success
            if result.get("success") is True:
                message = "‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω."
            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç uuid (–ø—Ä–∏–∑–Ω–∞–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
            elif result.get("uuid") == uuid:
                message = "‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω."
            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç isDisabled = True
            elif result.get("isDisabled") is True:
                message = "‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω."
            else:
                message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞."
                logger.error(f"Unexpected API response format: {result}")
        else:
            message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞."
            logger.error(f"Empty or null API response: {result}")
            
    except Exception as e:
        message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞."
        logger.error(f"Exception while disabling node: {e}")
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –¥–µ—Ç–∞–ª—è–º", callback_data=f"view_node_{uuid}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return NODE_MENU

async def restart_node(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid):
    """Restart node"""
    result = await NodeAPI.restart_node(uuid)
    
    if result and result.get("eventSent"):
        message = "‚úÖ –ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞."
    else:
        message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞."
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –¥–µ—Ç–∞–ª—è–º", callback_data=f"view_node_{uuid}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return NODE_MENU

async def show_node_stats(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid):
    """Show node statistics"""
    await update.callback_query.edit_message_text("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É–∑–ª–µ
        node = await NodeAPI.get_node_by_uuid(uuid)
        if not node:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –¥–µ—Ç–∞–ª—è–º", callback_data=f"view_node_{uuid}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=reply_markup
            )
            return NODE_MENU
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        from datetime import datetime, timedelta
        end_date = datetime.now().strftime("%Y-%m-%dT%H:%M:%S.000Z")
        start_date = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%dT%H:%M:%S.000Z")
        
        usage_stats = await NodeAPI.get_node_usage_by_range(uuid, start_date, end_date)
        
        message = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ {node['name']}*\n\n"
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        status = "üü¢ –í–∫–ª—é—á–µ–Ω" if not node.get("isDisabled", True) else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω"
        connection = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω" if node.get("isConnected", False) else "‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
        
        message += f"üñ•Ô∏è *–°—Ç–∞—Ç—É—Å*: {status}\n"
        message += f"üîå *–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ*: {connection}\n"
        message += f"üåç *–°—Ç—Ä–∞–Ω–∞*: {node.get('countryCode', 'N/A')}\n"
        message += f"üìç *–ê–¥—Ä–µ—Å*: {node.get('address', 'N/A')}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if usage_stats and len(usage_stats) > 0:
            message += f"üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π*:\n"
            
            total_usage = 0
            daily_stats = {}
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
            for entry in usage_stats:
                date = entry.get("date", "Unknown")
                total_bytes = entry.get("totalBytes", 0)
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
                if isinstance(total_bytes, str):
                    try:
                        total_bytes = int(total_bytes)
                    except ValueError:
                        total_bytes = 0
                
                if date not in daily_stats:
                    daily_stats[date] = 0
                daily_stats[date] += total_bytes
                total_usage += total_bytes
            
            # –û–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            message += f"  ‚Ä¢ –û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫: {format_bytes(total_usage)}\n"
            message += f"  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {format_bytes(total_usage / 7) if total_usage > 0 else '0 B'}\n\n"
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π)
            if daily_stats:
                message += f"üìÖ *–ü–æ –¥–Ω—è–º*:\n"
                sorted_days = sorted(daily_stats.items(), reverse=True)[:5]
                for date, bytes_used in sorted_days:
                    formatted_date = date.split('T')[0] if 'T' in date else date
                    message += f"  ‚Ä¢ {formatted_date}: {format_bytes(bytes_used)}\n"
        else:
            message += f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π\n"
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å realtime —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        try:
            realtime_usage = await get_nodes_usage()
            if realtime_usage:
                # –ù–∞–π–¥–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—à–µ–≥–æ —É–∑–ª–∞
                node_realtime = next((item for item in realtime_usage 
                                    if item.get("nodeUuid") == uuid), None)
                if node_realtime:
                    message += f"\n‚ö° *–¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å*:\n"
                    message += f"  ‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: {format_bytes(node_realtime.get('downloadSpeedBps', 0))}/—Å\n"
                    message += f"  ‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞: {format_bytes(node_realtime.get('uploadSpeedBps', 0))}/—Å\n"
                    message += f"  ‚Ä¢ –û–±—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {format_bytes(node_realtime.get('totalSpeedBps', 0))}/—Å\n"
        except Exception as e:
            logger.warning(f"Could not get realtime stats: {e}")
        
    except Exception as e:
        logger.error(f"Error getting node statistics: {e}")
        message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞."
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"node_stats_{uuid}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –¥–µ—Ç–∞–ª—è–º", callback_data=f"view_node_{uuid}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return NODE_MENU

async def handle_node_pagination(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int):
    """Handle pagination for node list"""
    try:
        nodes = await get_all_nodes()
        
        if not nodes:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_nodes")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                "‚ùå –°–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞.",
                reply_markup=reply_markup
            )
            return NODE_MENU

        # Format items for SelectionHelper
        items = []
        for node in nodes:
            status_emoji = "üü¢" if node["isConnected"] and not node["isDisabled"] else "üî¥"
            
            description = f"{status_emoji} {node['address']}:{node['port']}"
            
            if node.get("usersOnline") is not None:
                description += f" | üë• –û–Ω–ª–∞–π–Ω: {node['usersOnline']}"
            
            if node.get("trafficLimitBytes") is not None:
                description += f"\nüìà –¢—Ä–∞—Ñ–∏–∫: {format_bytes(node['trafficUsedBytes'])}/{format_bytes(node['trafficLimitBytes'])}"
            
            items.append({
                'id': node['uuid'],
                'name': node['name'],
                'description': description
            })

        # Use SelectionHelper for pagination
        helper = SelectionHelper(
            title="üñ•Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä",
            items=items,
            callback_prefix="select_node",
            back_callback="back_to_nodes",
            items_per_page=6
        )

        keyboard = helper.get_keyboard(page=page)
        message = helper.get_message(page=page)

        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"Error handling node pagination: {e}")
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_nodes")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤.",
            reply_markup=reply_markup
        )

    return NODE_MENU
async def start_edit_node(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid: str):
    """Start editing a node"""
    try:
        # Get node details
        node = await NodeAPI.get_node_by_uuid(uuid)
        if not node:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_nodes")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=reply_markup
            )
            return NODE_MENU
        
        # Store node data in context
        context.user_data["editing_node"] = node
        
        # Create edit menu
        keyboard = [
            [InlineKeyboardButton("üìù –ò–º—è —Å–µ—Ä–≤–µ—Ä–∞", callback_data=f"edit_node_field_name_{uuid}")],
            [InlineKeyboardButton("üåê –ê–¥—Ä–µ—Å", callback_data=f"edit_node_field_address_{uuid}")],
            [InlineKeyboardButton("üîå –ü–æ—Ä—Ç", callback_data=f"edit_node_field_port_{uuid}")],
            [InlineKeyboardButton("üåç –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã", callback_data=f"edit_node_field_country_{uuid}")],
            [InlineKeyboardButton("üìä –ú–Ω–æ–∂–∏—Ç–µ–ª—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è", callback_data=f"edit_node_field_multiplier_{uuid}")],
            [InlineKeyboardButton("üìà –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞", callback_data=f"edit_node_field_traffic_{uuid}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –¥–µ—Ç–∞–ª—è–º", callback_data=f"view_node_{uuid}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = f"üìù *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞: {node['name']}*\n\n"
        message += f"üìå –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n"
        message += f"‚Ä¢ –ò–º—è: `{node['name']}`\n"
        message += f"‚Ä¢ –ê–¥—Ä–µ—Å: `{node['address']}`\n"
        message += f"‚Ä¢ –ü–æ—Ä—Ç: `{node['port']}`\n"
        message += f"‚Ä¢ –°—Ç—Ä–∞–Ω–∞: `{node.get('countryCode', 'N/A')}`\n"
        message += f"‚Ä¢ –ú–Ω–æ–∂–∏—Ç–µ–ª—å: `{node.get('consumptionMultiplier', 1)}`x\n"
        message += f"‚Ä¢ –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: `{format_bytes(node.get('trafficLimitBytes', 0)) if node.get('trafficLimitBytes') else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`\n\n"
        message += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        
        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        return EDIT_NODE
        
    except Exception as e:
        logger.error(f"Error starting node edit: {e}")
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_nodes")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞.",
            reply_markup=reply_markup
        )
        return NODE_MENU

async def handle_node_edit_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle node edit menu selection"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data.startswith("edit_node_field_"):
        parts = data.split("_")
        field = parts[3]  # name, address, port, country, multiplier, traffic
        uuid = parts[4]
        
        await start_edit_node_field(update, context, uuid, field)
        return EDIT_NODE_FIELD
    
    elif data.startswith("view_node_"):
        uuid = data.split("_")[2]
        await show_node_details(update, context, uuid)
        return NODE_MENU
    
    return EDIT_NODE

async def start_edit_node_field(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid: str, field: str):
    """Start editing a specific node field"""
    try:
        node = context.user_data.get("editing_node")
        if not node:
            # Fallback: get node from API
            node = await NodeAPI.get_node_by_uuid(uuid)
            if not node:
                await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return EDIT_NODE
            context.user_data["editing_node"] = node
        
        # Store field being edited
        context.user_data["editing_field"] = field
        
        # Get current value and field info
        field_info = {
            "name": {
                "title": "–ò–º—è —Å–µ—Ä–≤–µ—Ä–∞",
                "current": node.get("name", ""),
                "example": "–ù–∞–ø—Ä–∏–º–µ—Ä: VPS-Server-1",
                "validation": "—Ç–µ–∫—Å—Ç"
            },
            "address": {
                "title": "–ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞",
                "current": node.get("address", ""),
                "example": "–ù–∞–ø—Ä–∏–º–µ—Ä: 192.168.1.1 –∏–ª–∏ example.com",
                "validation": "IP –∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–º–µ–Ω"
            },
            "port": {
                "title": "–ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞",
                "current": str(node.get("port", "")),
                "example": "–ù–∞–ø—Ä–∏–º–µ—Ä: 3000",
                "validation": "—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 65535"
            },
            "country": {
                "title": "–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã",
                "current": node.get("countryCode", ""),
                "example": "–ù–∞–ø—Ä–∏–º–µ—Ä: US, RU, DE (2 –±—É–∫–≤—ã)",
                "validation": "–∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –∏–∑ 2 –±—É–∫–≤"
            },
            "multiplier": {
                "title": "–ú–Ω–æ–∂–∏—Ç–µ–ª—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è",
                "current": str(node.get("consumptionMultiplier", 1)),
                "example": "–ù–∞–ø—Ä–∏–º–µ—Ä: 1.5 –∏–ª–∏ 2",
                "validation": "—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0"
            },
            "traffic": {
                "title": "–õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ (–±–∞–π—Ç—ã)",
                "current": str(node.get("trafficLimitBytes", 0)),
                "example": "–ù–∞–ø—Ä–∏–º–µ—Ä: 1073741824 (1GB) –∏–ª–∏ 0 (–±–µ–∑ –ª–∏–º–∏—Ç–∞)",
                "validation": "—á–∏—Å–ª–æ –≤ –±–∞–π—Ç–∞—Ö –∏–ª–∏ 0 –¥–ª—è —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–∞"
            }
        }
        
        if field not in field_info:
            await update.callback_query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return EDIT_NODE
        
        info = field_info[field]
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit_node_{uuid}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = f"üìù *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {info['title']}*\n\n"
        message += f"üìå –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: `{info['current']}`\n\n"
        message += f"üí° {info['example']}\n"
        message += f"‚úÖ –§–æ—Ä–º–∞—Ç: {info['validation']}\n\n"
        message += f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
        
        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        return EDIT_NODE_FIELD
        
    except Exception as e:
        logger.error(f"Error starting field edit: {e}")
        await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return EDIT_NODE

async def handle_node_field_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle input for node field editing"""
    try:
        node = context.user_data.get("editing_node")
        field = context.user_data.get("editing_field")
        
        if not node or not field:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ç–µ—Ä—è–Ω—ã.")
            return EDIT_NODE
        
        user_input = update.message.text.strip()
        uuid = node["uuid"]
        
        # Validate input based on field type
        validated_value = None
        error_message = None
        
        if field == "name":
            if len(user_input) < 1:
                error_message = "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."
            elif len(user_input) > 100:
                error_message = "–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)."
            else:
                validated_value = user_input
        
        elif field == "address":
            if len(user_input) < 1:
                error_message = "–ê–¥—Ä–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."
            else:
                validated_value = user_input
        
        elif field == "port":
            try:
                port_num = int(user_input)
                if port_num < 1 or port_num > 65535:
                    error_message = "–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 65535."
                else:
                    validated_value = port_num
            except ValueError:
                error_message = "–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º."
        
        elif field == "country":
            if len(user_input) != 2:
                error_message = "–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 2 –±—É–∫–≤—ã."
            elif not user_input.isalpha():
                error_message = "–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã."
            else:
                validated_value = user_input.upper()
        
        elif field == "multiplier":
            try:
                multiplier = float(user_input)
                if multiplier <= 0:
                    error_message = "–ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0."
                else:
                    validated_value = multiplier
            except ValueError:
                error_message = "–ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º."
        
        elif field == "traffic":
            try:
                traffic = int(user_input)
                if traffic < 0:
                    error_message = "–õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º."
                else:
                    validated_value = traffic
            except ValueError:
                error_message = "–õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º."
        
        if error_message:
            keyboard = [
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit_node_{uuid}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚ùå {error_message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=reply_markup
            )
            return EDIT_NODE_FIELD
        
        # Update node via API
        update_data = {}
        
        # Map field to API field name
        api_field_map = {
            "name": "name",
            "address": "address", 
            "port": "port",
            "country": "countryCode",
            "multiplier": "consumptionMultiplier",
            "traffic": "trafficLimitBytes"
        }
        
        api_field = api_field_map.get(field)
        if not api_field:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ.")
            return EDIT_NODE
        
        update_data[api_field] = validated_value
        
        # Send update to API
        result = await NodeAPI.update_node(uuid, update_data)
        
        if result:
            # Update stored node data
            node[api_field] = validated_value
            context.user_data["editing_node"] = node
            
            # Clear editing state
            context.user_data.pop("editing_field", None)
            
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"edit_node_{uuid}")],
                [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏", callback_data=f"view_node_{uuid}")],
                [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data="list_nodes")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚úÖ –ü–æ–ª–µ '{api_field_map.get(field, field)}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
                reply_markup=reply_markup
            )
            
            return NODE_MENU
        else:
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"edit_node_field_{field}_{uuid}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit_node_{uuid}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=reply_markup
            )
            return EDIT_NODE_FIELD
            
    except Exception as e:
        logger.error(f"Error handling node field input: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞.")
        return EDIT_NODE

async def handle_cancel_node_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle canceling node edit"""
    query = update.callback_query
    await query.answer()
    
    # Clear editing state
    context.user_data.pop("editing_node", None)
    context.user_data.pop("editing_field", None)
    
    if query.data.startswith("cancel_edit_node_"):
        uuid = query.data.split("_")[-1]
        await show_node_details(update, context, uuid)
        return NODE_MENU
    else:
        await show_nodes_menu(update, context)
        return NODE_MENU
    
# =============================================================================
# NODE CREATION FUNCTIONS
# =============================================================================

async def start_create_node(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start creating a new node"""
    query = update.callback_query
    await query.answer()
    
    # Initialize node creation data
    context.user_data["create_node"] = {
        "name": "",
        "address": "",
        "port": 3000,
        "isTrafficTrackingActive": False,
        "trafficLimitBytes": 0,
        "notifyPercent": 80,
        "trafficResetDay": 1,
        "excludedInbounds": [],
        "countryCode": "XX",
        "consumptionMultiplier": 1.0
    }
    context.user_data["node_creation_step"] = "name"
    
    message = "üÜï *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –Ω–æ–¥—ã*\n\n"
    message += "üìù –®–∞–≥ 1 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –Ω–æ–¥—ã:\n\n"
    message += "üí° –ù–∞–ø—Ä–∏–º–µ—Ä: 'VPS-Germany-1' –∏–ª–∏ 'Server-Moscow'"
    
    keyboard = [
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_create_node")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return CREATE_NODE

async def handle_node_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle node creation steps"""
    try:
        step = context.user_data.get("node_creation_step")
        node_data = context.user_data.get("create_node", {})
        
        if update.callback_query:
            query = update.callback_query
            await query.answer()
            
            if query.data == "cancel_create_node":
                # Clear creation data
                context.user_data.pop("create_node", None)
                context.user_data.pop("node_creation_step", None)
                await show_nodes_menu(update, context)
                return NODE_MENU
            
            elif query.data == "use_port_3000":
                node_data["port"] = 3000
                context.user_data["node_creation_step"] = "inbounds"
                return await show_inbound_exclusion(update, context)
            
            elif query.data.startswith("select_inbound_"):
                inbound_id = query.data.replace("select_inbound_", "")
                if inbound_id not in node_data["excludedInbounds"]:
                    node_data["excludedInbounds"].append(inbound_id)
                return await show_inbound_exclusion(update, context)
            
            elif query.data.startswith("remove_inbound_"):
                inbound_id = query.data.replace("remove_inbound_", "")
                if inbound_id in node_data["excludedInbounds"]:
                    node_data["excludedInbounds"].remove(inbound_id)
                return await show_inbound_exclusion(update, context)
            
            elif query.data == "finish_node_creation":
                return await create_node_final(update, context)
            
            elif query.data.startswith("show_certificate_"):
                return await show_node_certificate(update, context)
        
        else:
            # Handle text input
            user_input = update.message.text.strip()
            
            if step == "name":
                if len(user_input) < 5:
                    await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                    return NODE_NAME
                
                node_data["name"] = user_input
                context.user_data["node_creation_step"] = "address"
                return await ask_for_node_address(update, context)
            
            elif step == "address":
                if len(user_input) < 2:
                    await update.message.reply_text("‚ùå –ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                    return NODE_ADDRESS
                
                node_data["address"] = user_input
                context.user_data["node_creation_step"] = "port"
                return await ask_for_node_port(update, context)
            
            elif step == "port":
                try:
                    port = int(user_input)
                    if port < 1 or port > 65535:
                        await update.message.reply_text("‚ùå –ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 65535. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                        return NODE_PORT
                    
                    node_data["port"] = port
                    context.user_data["node_creation_step"] = "inbounds"
                    return await show_inbound_exclusion(update, context)
                except ValueError:
                    await update.message.reply_text("‚ùå –ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                    return NODE_PORT
        
        # If no valid step or input, stay in current state based on step
        if step == "name":
            return CREATE_NODE
        elif step == "address":
            return NODE_ADDRESS  
        elif step == "port":
            return NODE_PORT
        else:
            return CREATE_NODE
        
    except Exception as e:
        logger.error(f"Error in node creation: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–¥—É –∑–∞–Ω–æ–≤–æ.")
        await show_nodes_menu(update, context)
        return NODE_MENU

async def ask_for_node_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Ask for node address"""
    message = "üÜï *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –Ω–æ–¥—ã*\n\n"
    message += "üåê –®–∞–≥ 2 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –Ω–æ–¥—ã:\n\n"
    message += "üí° –ü—Ä–∏–º–µ—Ä—ã:\n"
    message += "‚Ä¢ `192.168.1.100`\n"
    message += "‚Ä¢ `server.example.com`\n"
    message += "‚Ä¢ `node1.vpn.com`"
    
    keyboard = [
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_create_node")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return NODE_ADDRESS

async def ask_for_node_port(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Ask for node port"""
    message = "üÜï *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –Ω–æ–¥—ã*\n\n"
    message += "üîå –®–∞–≥ 3 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç –Ω–æ–¥—ã:\n\n"
    message += "üí° –û–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è:\n"
    message += "‚Ä¢ `3000` (Remnawave Node –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n"
    message += "‚Ä¢ `443` (HTTPS)\n"
    message += "‚Ä¢ `8080` (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π HTTP)\n"
    message += "‚Ä¢ `2083` (Cloudflare compatible)"
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 3000", callback_data="use_port_3000")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_create_node")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return NODE_PORT

async def show_inbound_exclusion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show inbound exclusion selection for the node"""
    try:
        node_data = context.user_data.get("create_node", {})
        
        # Get all available inbounds
        inbounds = await InboundAPI.get_inbounds()
        
        # Initialize excludedInbounds with all inbound IDs if not already set
        if "excludedInbounds" not in node_data or node_data["excludedInbounds"] is None:
            node_data["excludedInbounds"] = [inbound["uuid"] for inbound in inbounds]
            context.user_data["create_node"] = node_data
            
        excluded_inbounds = node_data.get("excludedInbounds", [])
        
        message = "üÜï *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –Ω–æ–¥—ã*\n\n"
        message += "üì° –®–∞–≥ 4 –∏–∑ 4: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ inbound'–æ–≤ –¥–ª—è –Ω–æ–¥—ã:\n\n"
        message += "üî¥ *–ö—Ä–∞—Å–Ω—ã–π* = –û–¢–ö–õ–Æ–ß–ï–ù (–Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –Ω–æ–¥–µ)\n"
        message += "üü¢ *–ó–µ–ª–µ–Ω—ã–π* = –í–ö–õ–Æ–ß–ï–ù (–±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –Ω–æ–¥–µ)\n\n"
        
        if inbounds:
            message += "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ inbound'—ã:*\n"
            message += "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ inbound'—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n\n"
            
            keyboard = []
            
            # Add inbound selection buttons
            for inbound in inbounds[:10]:  # Limit to 10 inbounds to avoid too many buttons
                inbound_id = inbound["uuid"]
                protocol = inbound.get("type", "Unknown")
                port = inbound.get("port", "N/A")
                tag = inbound.get("tag", "Unknown")
                
                if inbound_id in excluded_inbounds:
                    # Excluded (disabled) - red circle
                    button_text = f"üî¥ {tag} ({protocol}:{port})"
                    callback_data = f"remove_inbound_{inbound_id}"
                else:
                    # Included (enabled) - green circle
                    button_text = f"üü¢ {tag} ({protocol}:{port})"
                    callback_data = f"select_inbound_{inbound_id}"
                
                keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        else:
            message += "‚ÑπÔ∏è Inbound'—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
            keyboard = []
        
        # Add finish button
        keyboard.append([InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å –Ω–æ–¥—É", callback_data="finish_node_creation")])
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_create_node")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text=message,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        else:
            await update.message.reply_text(
                text=message,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        
        return SELECT_INBOUNDS
        
    except Exception as e:
        logger.error(f"Error showing inbound exclusion: {e}")
        message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ inbound'–æ–≤."
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ inbound'–æ–≤", callback_data="finish_node_creation")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_create_node")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text=message,
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                text=message,
                reply_markup=reply_markup
            )
        
        return SELECT_INBOUNDS

async def create_node_final(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Create the node with all provided data"""
    try:
        node_data = context.user_data.get("create_node", {})
        
        # Prepare data for API according to CreateNodeRequestDto
        api_data = {
            "name": node_data["name"],
            "address": node_data["address"],
            "port": node_data.get("port", 3000),
            "isTrafficTrackingActive": node_data.get("isTrafficTrackingActive", False),
            "trafficLimitBytes": node_data.get("trafficLimitBytes", 0),
            "notifyPercent": node_data.get("notifyPercent", 80),
            "trafficResetDay": node_data.get("trafficResetDay", 1),
            "excludedInbounds": node_data.get("excludedInbounds", []),
            "countryCode": node_data.get("countryCode", "XX"),
            "consumptionMultiplier": node_data.get("consumptionMultiplier", 1.0)
        }
        
        await update.callback_query.edit_message_text("‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–¥—ã...")
        
        # Create node via API
        result = await NodeAPI.create_node(api_data)
        
        if result and result.get("uuid"):
            node_uuid = result["uuid"]
            
            # Clear creation data
            context.user_data.pop("create_node", None)
            context.user_data.pop("node_creation_step", None)
            
            # Prepare success message
            message = "‚úÖ *–ù–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*\n\n"
            message += f"üìã *–î–µ—Ç–∞–ª–∏ –Ω–æ–¥—ã:*\n"
            message += f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: `{api_data['name']}`\n"
            message += f"‚Ä¢ –ê–¥—Ä–µ—Å: `{api_data['address']}:{api_data['port']}`\n"
            message += f"‚Ä¢ UUID: `{node_uuid}`\n"
            message += f"‚Ä¢ –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã: `{api_data['countryCode']}`\n"
            message += f"‚Ä¢ –ú–Ω–æ–∂–∏—Ç–µ–ª—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è: `{api_data['consumptionMultiplier']}`\n\n"
            
            if api_data["excludedInbounds"]:
                message += f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö inbound'–æ–≤: {len(api_data['excludedInbounds'])}\n\n"
            else:
                message += "‚úÖ –í—Å–µ inbound'—ã –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ –Ω–æ–¥–µ\n\n"
            
            message += "üîß *–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:*\n"
            message += "1. –ü–æ–ª—É—á–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–æ–¥—ã\n"
            message += "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –Ω–æ–¥—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ\n"
            message += "3. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –Ω–æ–¥—É –∫ –ø–∞–Ω–µ–ª–∏"
            
            # Show certificate and other options
            keyboard = [
                [InlineKeyboardButton("üìú –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–æ–¥—ã", callback_data=f"show_certificate_{node_uuid}")],
                [InlineKeyboardButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–¥—ã", callback_data=f"view_node_{node_uuid}")],
                [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –Ω–æ–¥", callback_data="list_nodes")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                text=message,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
            
            return NODE_MENU
        else:
            # Creation failed
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="add_node")],
                [InlineKeyboardButton("üîô –ö –º–µ–Ω—é –Ω–æ–¥", callback_data="back_to_nodes")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–¥—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=reply_markup
            )
            
            return NODE_MENU
            
    except Exception as e:
        logger.error(f"Error creating node: {e}")
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="add_node")],
            [InlineKeyboardButton("üîô –ö –º–µ–Ω—é –Ω–æ–¥", callback_data="back_to_nodes")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–¥—ã: {str(e)}",
            reply_markup=reply_markup
        )
        
        return NODE_MENU

async def show_node_certificate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show node certificate for copying"""
    try:
        # Extract UUID from callback data or handle panel certificate request
        logger.info(f"show_node_certificate called with callback_data: {update.callback_query.data}")
        
        callback_data = update.callback_query.data
        node_uuid = None
        
        if callback_data == "get_panel_certificate":
            logger.info("Processing panel certificate request")
        elif callback_data.startswith("show_certificate_"):
            node_uuid = callback_data.replace("show_certificate_", "")
            logger.info(f"Extracted node_uuid: {node_uuid}")
        else:
            logger.error(f"Invalid callback_data: {callback_data}")
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞.")
            return NODE_MENU
        
        await update.callback_query.edit_message_text("üìú –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø–∞–Ω–µ–ª–∏...")
        
        # Get public key from API using /api/keygen endpoint
        logger.info("Requesting node certificate from API...")
        certificate_data = await NodeAPI.get_node_certificate()  # This calls /api/keygen
        logger.info(f"Certificate data received: {certificate_data}")
        
        if certificate_data and certificate_data.get("pubKey"):
            pub_key = certificate_data["pubKey"]
            logger.info(f"Public key extracted successfully, length: {len(pub_key)}")
            
            # Create different keyboard based on whether we have a specific node UUID
            if node_uuid:
                keyboard = [
                    [InlineKeyboardButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–¥—ã", callback_data=f"view_node_{node_uuid}")],
                    [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –Ω–æ–¥", callback_data="list_nodes")]
                ]
            else:
                keyboard = [
                    [InlineKeyboardButton("üîô –ö –º–µ–Ω—é –Ω–æ–¥", callback_data="back_to_nodes")]
                ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # Try to send with Markdown first, fallback to plain text if it fails
            try:
                # Prepare message with certificate
                message = "üìú *–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–∞–Ω–µ–ª–∏ –¥–ª—è –Ω–æ–¥—ã*\n\n"
                message += "üîê –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:\n\n"
                message += f"```\nSSL_CERT=\"{pub_key}\"\n```\n\n"
                message += "üí° *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –Ω–æ–¥—ã:*\n"
                message += "1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é SSL_CERT –≤—ã—à–µ\n"
                message += "2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Remnawave Node –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä\n"
                message += "3. –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n"
                message += "4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–∞–Ω–µ–ª–∏\n\n"
                message += "‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –≠—Ç–æ—Ç –∫–ª—é—á –Ω—É–∂–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–¥—ã –∫ –ø–∞–Ω–µ–ª–∏!"
                
                await update.callback_query.edit_message_text(
                    text=message,
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
                logger.info("Certificate sent successfully with Markdown formatting")
                
            except Exception as markdown_error:
                logger.warning(f"Markdown parsing failed, falling back to plain text: {markdown_error}")
                
                # Fallback to plain text without any formatting
                message = "üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–∞–Ω–µ–ª–∏ –¥–ª—è –Ω–æ–¥—ã\n\n"
                message += "üîê –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:\n\n"
                message += f"SSL_CERT=\"{pub_key}\"\n\n"
                message += "üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –Ω–æ–¥—ã:\n"
                message += "1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é SSL_CERT –≤—ã—à–µ\n"
                message += "2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Remnawave Node –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä\n"
                message += "3. –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n"
                message += "4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–∞–Ω–µ–ª–∏\n\n"
                message += "‚ö†Ô∏è –í–∞–∂–Ω–æ: –≠—Ç–æ—Ç –∫–ª—é—á –Ω—É–∂–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–¥—ã –∫ –ø–∞–Ω–µ–ª–∏!"
                
                await update.callback_query.edit_message_text(
                    text=message,
                    reply_markup=reply_markup,
                    parse_mode=None
                )
                logger.info("Certificate sent successfully with plain text formatting")
            
        else:
            logger.warning(f"No pubKey found in certificate data: {certificate_data}")
            
            # Create different keyboard based on whether we have a specific node UUID
            if node_uuid:
                keyboard = [
                    [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"show_certificate_{node_uuid}")],
                    [InlineKeyboardButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–¥—ã", callback_data=f"view_node_{node_uuid}")],
                    [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –Ω–æ–¥", callback_data="list_nodes")]
                ]
            else:
                keyboard = [
                    [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="get_panel_certificate")],
                    [InlineKeyboardButton("üîô –ö –º–µ–Ω—é –Ω–æ–¥", callback_data="back_to_nodes")]
                ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–∞–Ω–µ–ª–∏.",
                reply_markup=reply_markup
            )
        
        return NODE_MENU
        
    except Exception as e:
        logger.error(f"Error showing node certificate: {e}")
        
        keyboard = [
            [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –Ω–æ–¥", callback_data="list_nodes")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø–∞–Ω–µ–ª–∏.",
            reply_markup=reply_markup
        )
        
        return NODE_MENU