#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è inbound'–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
"""

import asyncio
import logging
from modules.api.users import UserAPI
from modules.api.inbounds import InboundAPI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

async def test_individual_inbound_assignment():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è inbound'–æ–≤"""
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è inbound'–æ–≤...")
    
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("\nüìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        users_response = await UserAPI.get_all_users()
        if not users_response or 'response' not in users_response:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        
        users = users_response['response']['users'][:3]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã—Ö 3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∞
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ inbound'—ã –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for user in users:
            username = user.get('username', 'Unknown')
            active_inbounds = user.get('activeUserInbounds', [])
            print(f"   üë§ {username}: {len(active_inbounds)} –∞–∫—Ç–∏–≤–Ω—ã—Ö inbound'–æ–≤")
            for inbound in active_inbounds:
                if isinstance(inbound, dict):
                    tag = inbound.get('tag', 'No tag')
                    inbound_type = inbound.get('type', 'Unknown')
                    print(f"      - {tag} ({inbound_type})")
        
        # 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ inbound'–æ–≤
        print("\nüìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ inbound'–æ–≤...")
        inbounds_response = await InboundAPI.get_all_inbounds()
        if not inbounds_response or 'response' not in inbounds_response:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ inbound'–æ–≤")
            return
        
        inbounds = inbounds_response['response']['inbounds']
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(inbounds)} inbound'–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ inbound'—ã
        for inbound in inbounds[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            tag = inbound.get('tag', 'No tag')
            inbound_type = inbound.get('type', 'Unknown')
            uuid = inbound.get('uuid', 'No UUID')
            print(f"   üîó {tag} ({inbound_type}) - {uuid}")
        
        if len(users) == 0 or len(inbounds) == 0:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ inbound'–∞ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        test_user = users[0]
        test_inbound = inbounds[0]
        
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ inbound'–∞ '{test_inbound.get('tag')}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é '{test_user.get('username')}'...")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update_data = {
            "activeUserInbounds": [test_inbound['uuid']]  # –ú–∞—Å—Å–∏–≤ UUID inbound'–æ–≤
        }
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        print(f"   –î–∞–Ω–Ω—ã–µ: {update_data}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        result = await UserAPI.update_user(test_user['uuid'], update_data)
        
        if result:
            print("‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
            print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            updated_user = await UserAPI.get_user_by_uuid(test_user['uuid'])
            
            if updated_user and 'response' in updated_user:
                user_data = updated_user['response']
                active_inbounds = user_data.get('activeUserInbounds', [])
                print(f"   üë§ {user_data.get('username')}: {len(active_inbounds)} –∞–∫—Ç–∏–≤–Ω—ã—Ö inbound'–æ–≤")
                
                for inbound in active_inbounds:
                    if isinstance(inbound, dict):
                        tag = inbound.get('tag', 'No tag')
                        inbound_type = inbound.get('type', 'Unknown')
                        uuid = inbound.get('uuid', 'No UUID')
                        print(f"      - {tag} ({inbound_type}) - {uuid}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—à inbound –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                assigned_uuids = [ib.get('uuid') for ib in active_inbounds if isinstance(ib, dict)]
                if test_inbound['uuid'] in assigned_uuids:
                    print("‚úÖ Inbound —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
                else:
                    print("‚ö†Ô∏è  Inbound –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö (–≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–º–µ–Ω–∏–ª –ø—Ä–µ–¥—ã–¥—É—â–∏–µ)")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        else:
            print("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        
        # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö inbound'–æ–≤ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if len(inbounds) > 1:
            print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö inbound'–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é '{test_user.get('username')}'...")
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–∞ inbound'–∞
            multi_inbounds = [inbounds[0]['uuid'], inbounds[1]['uuid']]
            update_data = {
                "activeUserInbounds": multi_inbounds
            }
            
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ {len(multi_inbounds)} inbound'–æ–≤...")
            result = await UserAPI.update_user(test_user['uuid'], update_data)
            
            if result:
                print("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                updated_user = await UserAPI.get_user_by_uuid(test_user['uuid'])
                if updated_user and 'response' in updated_user:
                    user_data = updated_user['response']
                    active_inbounds = user_data.get('activeUserInbounds', [])
                    assigned_uuids = [ib.get('uuid') for ib in active_inbounds if isinstance(ib, dict)]
                    
                    print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –Ω–∞–∑–Ω–∞—á–µ–Ω–æ {len(active_inbounds)} inbound'–æ–≤")
                    matches = sum(1 for uuid in multi_inbounds if uuid in assigned_uuids)
                    print(f"   ‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {matches}/{len(multi_inbounds)}")
            else:
                print("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        logger.exception("Detailed error:")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è inbound'–æ–≤")
    asyncio.run(test_individual_inbound_assignment())
