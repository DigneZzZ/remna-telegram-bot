from aiogram import Router, types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging

from modules.handlers.auth import AuthFilter
from modules.api.users import get_users_count, get_users_stats
from modules.api.nodes import get_all_nodes

logger = logging.getLogger(__name__)

router = Router()

async def show_main_menu(message_or_callback: types.Message | types.CallbackQuery, text: str = None):
    """Show main menu with system statistics"""
    # Build keyboard
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="users"))
    builder.row(types.InlineKeyboardButton(text="üñ•Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏", callback_data="nodes"))
    builder.row(types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã", callback_data="stats"))
    builder.row(types.InlineKeyboardButton(text="üåê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö–æ—Å—Ç–∞–º–∏", callback_data="hosts"))
    builder.row(types.InlineKeyboardButton(text="üîå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Inbounds", callback_data="inbounds"))
    builder.row(types.InlineKeyboardButton(text="üîÑ –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data="bulk"))
    
    # Get system stats
    stats_text = await get_system_stats()
    
    message_text = text or "üéõÔ∏è **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Remnawave Admin**\n\n"
    message_text += stats_text + "\n"
    message_text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"

    if isinstance(message_or_callback, types.CallbackQuery):
        await message_or_callback.answer()
        await message_or_callback.message.edit_text(
            text=message_text,
            reply_markup=builder.as_markup()
        )
    else:
        await message_or_callback.answer(
            text=message_text,
            reply_markup=builder.as_markup()
        )

async def get_system_stats():
    """Get system statistics for dashboard"""
    try:
        # Get user statistics
        try:
            logger.info("Getting user statistics...")
            user_stats = await get_users_stats()
            logger.info(f"User stats response: {user_stats}")
            if user_stats:
                total_users = user_stats.get('total', 0)
                active_users = user_stats.get('active', 0)
                logger.info(f"User stats parsed - total: {total_users}, active: {active_users}")
            else:
                # Fallback to count method
                logger.info("No user stats, falling back to count method...")
                total_users = await get_users_count()
                active_users = "N/A"
                logger.info(f"User count fallback: {total_users}")
        except Exception as e:
            logger.error(f"Error getting user stats: {e}")
            total_users = "Error"
            active_users = "Error"
            
        # Get node statistics
        try:
            logger.info("Getting node statistics...")
            nodes = await get_all_nodes()
            logger.info(f"Nodes response: {len(nodes) if nodes else 0} nodes")
            if nodes:
                total_nodes = len(nodes)
                online_nodes = sum(1 for node in nodes if node.get('isConnected') == True)
                logger.info(f"Node stats - total: {total_nodes}, online: {online_nodes}")
                # Debug node statuses
                for i, node in enumerate(nodes[:3]):  # Log first 3 nodes for debugging
                    logger.info(f"Node {i}: isConnected={node.get('isConnected')}, name={node.get('name', 'Unknown')}")
            else:
                total_nodes = 0
                online_nodes = 0
        except Exception as e:
            logger.error(f"Error getting node stats: {e}")
            total_nodes = "Error"
            online_nodes = "Error"

        # Format statistics
        stats = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:**\n"
        stats += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {total_users} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {active_users})\n"
        stats += f"üñ•Ô∏è –°–µ—Ä–≤–µ—Ä—ã: {online_nodes}/{total_nodes} –æ–Ω–ª–∞–π–Ω"
        
        logger.info(f"Final stats: {stats.replace('*', '').replace('üìä', '').replace('üë•', '').replace('üñ•Ô∏è', '').strip()}")
        return stats
        
    except Exception as e:
        logger.error(f"Error getting system stats: {e}")
        return "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:** –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"

@router.callback_query(F.data == "main_menu", AuthFilter())
async def handle_main_menu(callback: types.CallbackQuery):
    """Handle main menu callback"""
    await show_main_menu(callback)

@router.callback_query(F.data == "back", AuthFilter())
async def handle_back(callback: types.CallbackQuery):
    """Handle back button"""
    await show_main_menu(callback)

# –£–¥–∞–ª—è–µ–º —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –ø–æ—Å–∫–æ–ª—å–∫—É —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ callback —É–∂–µ –µ—Å—Ç—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–∞—Ö
# –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ—à–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ callback'–æ–≤ –∏–∑ –ø–æ–¥–º–µ–Ω—é

# @router.callback_query(
#     F.data.in_(["users", "nodes", "stats", "hosts", "inbounds", "bulk"]), 
#     AuthFilter()
# )
# async def handle_main_menu_callbacks(callback: types.CallbackQuery):
#     """Handle main menu callbacks"""
#     callback_data = callback.data
#     logger.info(f"Handling main menu callback: {callback_data}")
#     
#     # Import handlers here to avoid circular imports
#     if callback_data == "users":
#         from modules.handlers.user_handlers import show_users_menu
#         await show_users_menu(callback)
#     elif callback_data == "nodes":
#         from modules.handlers.node_handlers import show_nodes_menu
#         await show_nodes_menu(callback)
#     elif callback_data == "stats":
#         from modules.handlers.stats_handlers import show_stats_menu
#         await show_stats_menu(callback)
#     elif callback_data == "hosts":
#         from modules.handlers.host_handlers import show_hosts_menu
#         await show_hosts_menu(callback)
#     elif callback_data == "inbounds":
#         from modules.handlers.inbound_handlers import show_inbounds_menu
#         await show_inbounds_menu(callback)
#     elif callback_data == "bulk":
#         from modules.handlers.bulk_handlers import show_bulk_menu
#         await show_bulk_menu(callback)
#     else:
#         logger.warning(f"Unknown main menu callback data: {callback_data}")
#         await callback.answer("üîß –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

def register_menu_handlers(dp):
    """Register menu handlers"""
    dp.include_router(router)
