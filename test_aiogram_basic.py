#!/usr/bin/env python3
"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Aiogram –±–æ—Ç–∞ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import asyncio
import logging
import os
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder

# Setup logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Mock admin user IDs –¥–ª—è —Ç–µ—Å—Ç–∞
MOCK_ADMIN_IDS = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π Telegram ID

class AuthFilter:
    """Simple auth filter"""
    def __init__(self):
        pass
    
    def __call__(self) -> bool:
        return True  # –î–ª—è —Ç–µ—Å—Ç–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º

async def start_handler(message: types.Message):
    """Handle /start command"""
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="üéõÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    builder.row(types.InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info"))
    
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "ü§ñ –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è Aiogram –±–æ—Ç–∞ –¥–ª—è Remnawave.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup()
    )

async def callback_handler(callback: types.CallbackQuery):
    """Handle callback queries"""
    await callback.answer()
    
    if callback.data == "main_menu":
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Ç–µ—Å—Ç)", callback_data="users"))
        builder.row(types.InlineKeyboardButton(text="üñ•Ô∏è –°–µ—Ä–≤–µ—Ä—ã (—Ç–µ—Å—Ç)", callback_data="nodes"))
        builder.row(types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–µ—Å—Ç)", callback_data="stats"))
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back"))
        
        await callback.message.edit_text(
            "üéõÔ∏è **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:**\n"
            "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: –¢–µ—Å—Ç\n"
            "üñ•Ô∏è –°–µ—Ä–≤–µ—Ä—ã: –¢–µ—Å—Ç\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )
    
    elif callback.data == "info":
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back"))
        
        await callback.message.edit_text(
            "‚ÑπÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ**\n\n"
            "ü§ñ –í–µ—Ä—Å–∏—è: Aiogram Test\n"
            "üì¶ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞: Aiogram 3.20.0\n"
            "üîß –°—Ç–∞—Ç—É—Å: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å python-telegram-bot –Ω–∞ Aiogram!",
            reply_markup=builder.as_markup()
        )
    
    elif callback.data in ["users", "nodes", "stats"]:
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        
        section_names = {
            "users": "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
            "nodes": "üñ•Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏", 
            "stats": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
        }
        
        await callback.message.edit_text(
            f"{section_names[callback.data]}\n\n"
            "üöß –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
            "–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å Aiogram —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!",
            reply_markup=builder.as_markup()
        )
    
    elif callback.data == "back":
        await start_handler(callback.message)

async def main():
    # Load environment variables
    load_dotenv()
    
    bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
    
    if not bot_token:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example")
        return

    # Initialize bot and dispatcher
    bot = Bot(
        token=bot_token,
        default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
    )
    
    dp = Dispatcher()
    
    # Register handlers
    dp.message.register(start_handler, CommandStart())
    dp.callback_query.register(callback_handler)
    
    try:
        # Drop pending updates and start polling
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ Aiogram –±–æ—Ç–∞...")
        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        raise
    finally:
        await bot.session.close()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}", exc_info=True)
