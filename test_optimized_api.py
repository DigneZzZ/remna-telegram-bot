#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö API –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
"""
import asyncio
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from modules.api.users import UserAPI
from modules.api.nodes import NodeAPI
from modules.api.hosts import HostAPI
from modules.config import API_BASE_URL, API_TOKEN

async def test_optimized_user_methods():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    try:
        users_response = await UserAPI.get_all_users()
        if not users_response or not users_response.get("users"):
            print("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
            
        test_user = users_response["users"][0]
        user_uuid = test_user["uuid"]
        user_name = test_user["username"]
        current_status = test_user["status"]
        
        print(f"üìã –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (UUID: {user_uuid})")
        print(f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {current_status}")
        
        # –¢–µ—Å—Ç 1: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω)
        if current_status == "ACTIVE":
            print(f"\nüî¥ –¢–µ—Å—Ç 1: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}")
            result = await UserAPI.disable_user(user_uuid)
            if result:
                print("‚úÖ –ú–µ—Ç–æ–¥ disable_user() —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å PATCH-–∑–∞–ø—Ä–æ—Å–æ–º")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                updated_user = await UserAPI.get_user_by_uuid(user_uuid)
                if updated_user and updated_user["status"] == "DISABLED":
                    print("‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ DISABLED")
                else:
                    print("‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return False
        
        # –¢–µ—Å—Ç 2: –í–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"\nüü¢ –¢–µ—Å—Ç 2: –í–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}")
        result = await UserAPI.enable_user(user_uuid)
        if result:
            print("‚úÖ –ú–µ—Ç–æ–¥ enable_user() —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å PATCH-–∑–∞–ø—Ä–æ—Å–æ–º")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            updated_user = await UserAPI.get_user_by_uuid(user_uuid)
            if updated_user and updated_user["status"] == "ACTIVE":
                print("‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ACTIVE")
            else:
                print("‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è")
                
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            if current_status == "DISABLED":
                await UserAPI.disable_user(user_uuid)
                print(f"üîÑ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É: {current_status}")
                
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

async def test_node_methods():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–¥–∞–º–∏"""
    print("\nüñ•Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–¥–∞–º–∏")
    print("=" * 50)
    
    try:
        nodes = await NodeAPI.get_all_nodes()
        if nodes and len(nodes) > 0:
            test_node = nodes[0]
            print(f"üìã –¢–µ—Å—Ç–æ–≤—ã–π –Ω–æ–¥: {test_node.get('name', 'Unknown')}")
            print("‚úÖ –ù–æ–¥—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ PATCH-–∑–∞–ø—Ä–æ—Å—ã")
        else:
            print("‚ö†Ô∏è –ù–µ—Ç –Ω–æ–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–¥–æ–≤: {e}")
        return False

async def test_host_methods():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∞–º–∏"""
    print("\nüè† –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∞–º–∏")
    print("=" * 50)
    
    try:
        hosts = await HostAPI.get_all_hosts()
        if hosts and len(hosts) > 0:
            test_host = hosts[0]
            print(f"üìã –¢–µ—Å—Ç–æ–≤—ã–π —Ö–æ—Å—Ç: {test_host.get('remark', 'Unknown')}")
            print("‚úÖ –•–æ—Å—Ç—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ PATCH-–∑–∞–ø—Ä–æ—Å—ã")
        else:
            print("‚ö†Ô∏è –ù–µ—Ç —Ö–æ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ö–æ—Å—Ç–æ–≤: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö API –º–µ—Ç–æ–¥–æ–≤")
    print(f"‚è∞ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê API URL: {API_BASE_URL}")
    print(f"üîë API Token: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if API_TOKEN else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print("=" * 70)
    
    if not API_TOKEN:
        print("‚ùå API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_test_result = await test_optimized_user_methods()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã –Ω–æ–¥–æ–≤
    node_test_result = await test_node_methods()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã —Ö–æ—Å—Ç–æ–≤
    host_test_result = await test_host_methods()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 70)
    print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã): {'‚úÖ –£–°–ü–ï–®–ù–û' if user_test_result else '‚ùå –û–®–ò–ë–ö–ê'}")
    print(f"üñ•Ô∏è –ù–æ–¥—ã (—É–∂–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã): {'‚úÖ –ü–†–û–í–ï–†–ï–ù–û' if node_test_result else '‚ùå –û–®–ò–ë–ö–ê'}")
    print(f"üè† –•–æ—Å—Ç—ã (—É–∂–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã): {'‚úÖ –ü–†–û–í–ï–†–ï–ù–û' if host_test_result else '‚ùå –û–®–ò–ë–ö–ê'}")
    
    overall_success = user_test_result and node_test_result and host_test_result
    
    if overall_success:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚ú® –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è API –º–µ—Ç–æ–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    else:
        print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏")
        
    return overall_success

if __name__ == "__main__":
    import dotenv
    dotenv.load_dotenv()
    
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
