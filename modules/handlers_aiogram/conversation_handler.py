from aiogram import Router, types, F
from aiogram.filters import Command, Text, StateFilter
from aiogram.fsm.context import FSMContext
import logging

from modules.handlers_aiogram.auth import AuthFilter
from modules.handlers_aiogram.states import (
    UserStates, NodeStates, InboundStates, BulkStates, StatsStates
)

# Import all handlers
from modules.handlers_aiogram.start_handler import router as start_router
from modules.handlers_aiogram.menu_handler import router as menu_router
from modules.handlers_aiogram.user_handlers import router as user_router
from modules.handlers_aiogram.node_handlers import router as node_router
from modules.handlers_aiogram.inbound_handlers import router as inbound_router
from modules.handlers_aiogram.bulk_handlers import router as bulk_router
from modules.handlers_aiogram.stats_handlers import router as stats_router

logger = logging.getLogger(__name__)

# Main router that includes all other routers
main_router = Router()

# Include all sub-routers
main_router.include_router(start_router)
main_router.include_router(menu_router)
main_router.include_router(user_router)
main_router.include_router(node_router)
main_router.include_router(inbound_router)
main_router.include_router(bulk_router)
main_router.include_router(stats_router)

# ================ FALLBACK HANDLERS ================

@main_router.message(Command("start"))
async def fallback_start_unauthorized(message: types.Message, state: FSMContext):
    """Fallback start handler for unauthorized users"""
    await handle_unauthorized_access(message, state)

@main_router.message(F.text)
async def fallback_text_unauthorized(message: types.Message, state: FSMContext):
    """Fallback text handler for unauthorized users"""
    await handle_unauthorized_access(message, state)

@main_router.callback_query()
async def fallback_callback_unauthorized(callback: types.CallbackQuery, state: FSMContext):
    """Fallback callback handler for unauthorized users"""
    await handle_unauthorized_access(callback, state, is_callback=True)

async def handle_unauthorized_access(
    update: types.Message | types.CallbackQuery, 
    state: FSMContext, 
    is_callback: bool = False
):
    """Handle unauthorized access attempts"""
    if is_callback:
        user_id = update.from_user.id
        username = update.from_user.username or "Unknown"
        
        logger.warning(f"Unauthorized callback access attempt from user {user_id} (@{username})")
        
        await update.answer("‚õî –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.", show_alert=True)
    else:
        user_id = update.from_user.id
        username = update.from_user.username or "Unknown"
        
        logger.warning(f"Unauthorized message access attempt from user {user_id} (@{username})")
        
        await update.answer("‚õî –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
    
    # Clear any state
    await state.clear()

# ================ CANCEL HANDLER ================

@main_router.message(Command("cancel"), AuthFilter())
async def cancel_handler(message: types.Message, state: FSMContext):
    """Cancel current operation and return to main menu"""
    await state.clear()
    
    from modules.handlers_aiogram.start_handler import show_main_menu
    await show_main_menu(message)

@main_router.callback_query(Text("cancel"), AuthFilter())
async def cancel_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    """Cancel current operation via callback and return to main menu"""
    await callback.answer()
    await state.clear()
    
    from modules.handlers_aiogram.start_handler import show_main_menu
    await show_main_menu(callback.message)

# ================ HELP HANDLER ================

@main_router.message(Command("help"), AuthFilter())
async def help_handler(message: types.Message):
    """Show help information"""
    help_text = """
ü§ñ **Remnawave Admin Bot - –°–ø—Ä–∞–≤–∫–∞**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `/cancel` - –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
‚Ä¢ `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:**
‚Ä¢ üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏** - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ VPN
‚Ä¢ üñ•Ô∏è **–°–µ—Ä–≤–µ—Ä—ã** - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–¥–∞–º–∏ –∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏
‚Ä¢ üîå **Inbounds** - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏–º–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
‚Ä¢ üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ üîÑ **–ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏** - –û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –æ–±—ä–µ–∫—Ç–æ–≤

**–ù–∞–≤–∏–≥–∞—Ü–∏—è:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é
‚Ä¢ –ö–Ω–æ–ø–∫–∞ "üîô –ù–∞–∑–∞–¥" –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —ç–∫—Ä–∞–Ω—É
‚Ä¢ –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å `/cancel` –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
‚Ä¢ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
‚Ä¢ –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
"""
    
    await message.answer(help_text)

# ================ STATUS HANDLER ================

@main_router.message(Command("status"), AuthFilter())
async def status_handler(message: types.Message, state: FSMContext):
    """Show current bot status"""
    try:
        from modules.api.client import RemnaAPI
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_state = await state.get_state()
        state_data = await state.get_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
        try:
            sdk = RemnaAPI.get_sdk()
            users_response = await sdk.users.get_all_users_v2()
            api_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ"
            user_count = len(users_response.users) if users_response and users_response.users else 0
        except Exception as e:
            api_status = f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:50]}..."
            user_count = "N/A"
        
        status_text = f"""
üîß **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞**

**API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:** {api_status}
**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ:** {user_count}
**–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:** {current_state or "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"}
**–î–∞–Ω–Ω—ã—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏:** {len(state_data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤

**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:**
‚Ä¢ ID: `{message.from_user.id}`
‚Ä¢ Username: @{message.from_user.username or "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}
‚Ä¢ –ò–º—è: {message.from_user.full_name}

**–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞:** {message.date.strftime('%d.%m.%Y %H:%M:%S')}
"""
        
        await message.answer(status_text)
        
    except Exception as e:
        logger.error(f"Error in status handler: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")

# ================ DEBUGGING HANDLERS ================

@main_router.message(Command("debug"), AuthFilter())
async def debug_handler(message: types.Message, state: FSMContext):
    """Debug information for administrators"""
    try:
        current_state = await state.get_state()
        state_data = await state.get_data()
        
        debug_text = f"""
üêõ **–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**

**FSM State:** `{current_state}`
**State Data:** 
```json
{state_data}
```

**Message Info:**
‚Ä¢ Message ID: {message.message_id}
‚Ä¢ Chat ID: {message.chat.id}
‚Ä¢ User ID: {message.from_user.id}
‚Ä¢ Date: {message.date}

**Chat Type:** {message.chat.type}
"""
        
        await message.answer(debug_text)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")

# ================ ERROR HANDLERS ================

@main_router.message()
async def unknown_message_handler(message: types.Message, state: FSMContext):
    """Handle unknown messages from authorized users"""
    logger.info(f"Unknown message from authorized user {message.from_user.id}: {message.text}")
    
    await message.answer(
        "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        "‚Ä¢ `/start` - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚Ä¢ `/help` - –°–ø—Ä–∞–≤–∫–∞\n"
        "‚Ä¢ `/cancel` - –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"
    )

@main_router.callback_query()
async def unknown_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    """Handle unknown callbacks from authorized users"""
    logger.info(f"Unknown callback from authorized user {callback.from_user.id}: {callback.data}")
    
    await callback.answer(
        "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        show_alert=True
    )

# ================ UTILITY FUNCTIONS ================

def get_main_router() -> Router:
    """Get the main router with all handlers"""
    return main_router

def register_handlers(dp):
    """Register all handlers with the dispatcher"""
    dp.include_router(main_router)
    logger.info("All handlers registered successfully")

# ================ MIDDLEWARE SETUP ================

async def setup_middlewares(dp):
    """Setup middlewares for the dispatcher"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ —Ç.–¥.
    logger.info("Middlewares setup completed")

# ================ ROUTER CONFIGURATION ================

# Configure router settings
main_router.message.filter(F.chat.type == "private")  # Only private chats
main_router.callback_query.filter(F.message.chat.type == "private")  # Only private chats

logger.info("Main router configured and ready")