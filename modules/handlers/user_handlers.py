from aiogram import Router, types, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging
import re
import random
import string
import json
from typing import Optional, Dict, Any, List
from datetime import datetime, timedelta

from modules.handlers.auth import AuthFilter
from modules.handlers.states import UserStates
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ HTTP –≤—ã–∑–æ–≤—ã –≤–º–µ—Å—Ç–æ SDK
from modules.api import users as users_api
from modules.api import nodes as nodes_api

logger = logging.getLogger(__name__)

router = Router()



# ================ UTILITY FUNCTIONS ================

def format_bytes(bytes_value: int) -> str:
    """Format bytes to human readable format"""
    if bytes_value == 0:
        return "0 B"
    
    units = ['B', 'KB', 'MB', 'GB', 'TB']
    size = bytes_value
    unit_index = 0
    
    while size >= 1024 and unit_index < len(units) - 1:
        size /= 1024
        unit_index += 1
    
    if unit_index == 0:
        return f"{int(size)} {units[unit_index]}"
    else:
        return f"{size:.1f} {units[unit_index]}"

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞, –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤, –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏:

def safe_markdown_escape(text: str) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Markdown V2"""
    if not text:
        return ""
    
    # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ MarkdownV2
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    
    escaped_text = str(text)
    for char in special_chars:
        escaped_text = escaped_text.replace(char, f'\\{char}')
    
    return escaped_text

def format_safe_message(text: str, use_markdown: bool = False) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    if not use_markdown:
        return text
    
    # –ó–∞–º–µ–Ω—è–µ–º ** –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    lines = text.split('\n')
    formatted_lines = []
    
    for line in lines:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        if '**' in line:
            parts = line.split('**')
            for i, part in enumerate(parts):
                if i % 2 == 1:  # –ù–µ—á–µ—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã - —ç—Ç–æ —Ç–µ–∫—Å—Ç –º–µ–∂–¥—É **
                    parts[i] = f"*{safe_markdown_escape(part)}*"
                else:
                    parts[i] = safe_markdown_escape(part)
            line = ''.join(parts)
        else:
            line = safe_markdown_escape(line)
        
        formatted_lines.append(line)
    
    return '\n'.join(formatted_lines)

# –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é escape_markdown
def escape_markdown(text: str) -> str:
    """Escape markdown special characters - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
    return safe_markdown_escape(text)

def format_datetime(dt_string: str) -> str:
    """Format datetime string to readable format"""
    if not dt_string:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    try:
        # Remove timezone info and milliseconds
        clean_dt = dt_string.replace('Z', '').split('.')[0]
        dt = datetime.fromisoformat(clean_dt)
        return dt.strftime('%Y-%m-%d %H:%M')
    except Exception:
        return dt_string[:19].replace('T', ' ')

def truncate_text(text: str, max_length: int = 50) -> str:
    """Truncate text to maximum length"""
    if not text:
        return ""
    
    if len(text) <= max_length:
        return text
    
    return text[:max_length-3] + "..."

def format_user_details(user: dict) -> str:
    """Format user details for display - safe version without markdown"""
    try:
        username = user.get('username', 'Unknown')
        uuid = user.get('uuid', 'N/A')
        short_uuid = user.get('shortUuid', 'N/A')
        status = user.get('status', 'Unknown')
        
        # Traffic information
        used_traffic = user.get('usedTraffic', 0) or 0
        traffic_limit = user.get('trafficLimit', 0) or 0
        
        used_formatted = format_bytes(used_traffic)
        limit_formatted = format_bytes(traffic_limit) if traffic_limit > 0 else "‚àû"
        
        # Dates
        created_at = format_datetime(user.get('createdAt', ''))
        updated_at = format_datetime(user.get('updatedAt', ''))
        expire_at = format_datetime(user.get('expireAt', ''))
        
        # Status emoji
        status_emoji = "üü¢" if status == 'ACTIVE' else "üî¥"
        
        # Build details text WITHOUT markdown
        details = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n\n"
        details += f"üìä –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
        details += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {status_emoji} {status}\n"
        details += f"‚Ä¢ UUID: {uuid}\n"
        details += f"‚Ä¢ Short UUID: {short_uuid}\n\n"
        
        details += f"üíæ –¢—Ä–∞—Ñ–∏–∫:\n"
        details += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used_formatted}\n"
        details += f"‚Ä¢ –õ–∏–º–∏—Ç: {limit_formatted}\n"
        
        if traffic_limit > 0:
            percentage = (used_traffic / traffic_limit) * 100
            details += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {percentage:.1f}%\n"
        
        details += f"\nüìÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏:\n"
        details += f"‚Ä¢ –°–æ–∑–¥–∞–Ω: {created_at}\n"
        details += f"‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω: {updated_at}\n"
        details += f"‚Ä¢ –ò—Å—Ç–µ–∫–∞–µ—Ç: {expire_at}\n"
        
        # Additional information
        if user.get('telegramId'):
            details += f"\nüì± Telegram ID: {user.get('telegramId')}\n"
        
        if user.get('description'):
            desc = str(user.get('description'))
            details += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {truncate_text(desc, 100)}\n"
        
        return details
        
    except Exception as e:
        logger.error(f"Error formatting user details: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}"

# ================ MAIN USERS MENU ================

@router.callback_query(F.data == "users", AuthFilter())
async def handle_users_menu(callback: types.CallbackQuery, state: FSMContext):
    """Handle users menu selection"""
    await state.clear()
    await show_users_menu(callback)

async def show_users_menu(callback: types.CallbackQuery):
    """Show users menu - safe version"""
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users"))
    builder.row(types.InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="search_users_menu"))
    builder.row(
        types.InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="create_user"),
        types.InlineKeyboardButton(text="üìã –ü–æ —à–∞–±–ª–æ–Ω—É", callback_data="create_user_template")
    )
    builder.row(
        types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="users_stats"),
        types.InlineKeyboardButton(text="üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è", callback_data="users_extended_stats")
    )
    builder.row(types.InlineKeyboardButton(text="‚öôÔ∏è –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data="mass_operations"))
    builder.row(types.InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="export_users"))
    builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))

    message = "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n\n"
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        users_list = await users_api.get_all_users()
        if users_list:
            users_count = len(users_list)
            active_count = sum(1 for user in users_list if user.get('status') == 'ACTIVE')
            
            total_traffic_used = sum(user.get('usedTraffic', 0) or 0 for user in users_list)
            total_traffic_limit = sum(user.get('trafficLimit', 0) or 0 for user in users_list if user.get('trafficLimit'))
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é
            now = datetime.now()
            expiring_soon = 0
            for user in users_list:
                expire_at = user.get('expireAt')
                if expire_at:
                    try:
                        expire_date = datetime.fromisoformat(expire_at.replace('Z', '+00:00'))
                        if now < expire_date < now + timedelta(days=7):
                            expiring_soon += 1
                    except Exception:
                        pass
            
            message += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
            message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_count}\n"
            message += f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {users_count - active_count}\n"
            message += f"‚Ä¢ –ò—Å—Ç–µ–∫–∞—é—Ç —Å–∫–æ—Ä–æ: {expiring_soon}\n"
            message += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç—Ä–∞—Ñ–∏–∫–∞: {format_bytes(total_traffic_used)}\n"
            if total_traffic_limit > 0:
                message += f"‚Ä¢ –û–±—â–∏–π –ª–∏–º–∏—Ç: {format_bytes(total_traffic_limit)}\n"
            message += "\n"
        else:
            message += "üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n"
    except Exception as e:
        logger.error(f"Error getting user stats: {e}")
        message += "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n\n"
    
    message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    await callback.answer()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ parse_mode
    await callback.message.edit_text(
        text=message,
        reply_markup=builder.as_markup()
    )

# ================ LIST USERS ================

@router.callback_query(F.data == "list_users", AuthFilter())
async def list_users(callback: types.CallbackQuery, state: FSMContext):
    """List all users with pagination"""
    await callback.answer()
    await callback.message.edit_text("üìã –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    try:
        # Get all users using direct API
        users_list = await users_api.get_all_users()
        
        if not users_list:
            await callback.message.edit_text(
                "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="users")
                ]])
            )
            return

        # Store users in state
        await state.update_data(users=users_list, page=0)
        
        # Show first page
        await show_users_page(callback.message, users_list, 0, state)
        await state.set_state(UserStates.selecting_user)
        
    except Exception as e:
        logger.error(f"Error listing users: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="users")
            ]])
        )

async def show_users_page(message: types.Message, users: list, page: int, state: FSMContext, per_page: int = 8):
    """Show users page with pagination - completely safe version without any markdown"""
    try:
        total_users = len(users)
        start_idx = page * per_page
        end_idx = min(start_idx + per_page, total_users)
        page_users = users[start_idx:end_idx]
        
        # Build message WITHOUT any markdown formatting - only plain text
        message_text = f"üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({start_idx + 1}-{end_idx} –∏–∑ {total_users})\n\n"
        
        for i, user in enumerate(page_users):
            user_name = user.get('username', f"User {user.get('uuid', 'Unknown')[:8]}")
            status_emoji = "üü¢" if user.get('status') == 'ACTIVE' else "üî¥"
            traffic_used = format_bytes(user.get('usedTraffic', 0) or 0)
            traffic_limit = format_bytes(user.get('trafficLimit', 0) or 0) if user.get('trafficLimit') else "‚àû"
            
            # Format expiration date safely
            expire_text = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            expire_at = user.get('expireAt')
            if expire_at:
                try:
                    expire_date = datetime.fromisoformat(expire_at.replace('Z', '+00:00'))
                    days_left = (expire_date - datetime.now().astimezone()).days
                    expire_text = f"{expire_at[:10]} ({days_left} –¥–Ω.)"
                except Exception:
                    expire_text = expire_at[:10]
            
            # Use simple text formatting without any special characters
            message_text += f"{status_emoji} {user_name}\n"
            message_text += f"  üíæ –¢—Ä–∞—Ñ–∏–∫: {traffic_used} / {traffic_limit}\n"
            message_text += f"  üìÖ –ò—Å—Ç–µ–∫–∞–µ—Ç: {expire_text}\n"
            if user.get('telegramId'):
                message_text += f"  üì± TG ID: {user.get('telegramId')}\n"
            message_text += "\n"
        
        # Create pagination keyboard
        builder = InlineKeyboardBuilder()
        
        # Add user selection buttons
        for i, user in enumerate(page_users):
            user_name = user.get('username', f"User {user.get('uuid', 'Unknown')[:8]}")
            display_name = truncate_text(user_name, 25)
            builder.row(types.InlineKeyboardButton(
                text=f"üë§ {display_name}",
                callback_data=f"select_user:{user.get('uuid')}"
            ))
        
        # Add pagination controls
        nav_buttons = []
        if page > 0:
            nav_buttons.append(types.InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"users_page:{page-1}"))
        
        nav_buttons.append(types.InlineKeyboardButton(text=f"üìÑ {page+1}", callback_data="current_page"))
        
        if end_idx < total_users:
            nav_buttons.append(types.InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"users_page:{page+1}"))
        
        if nav_buttons:
            builder.row(*nav_buttons)
        
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="users"))
        
        # Send message without any parse_mode
        await message.edit_text(
            text=message_text,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error showing users page: {e}")
        await message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="users")
            ]])
        )

@router.callback_query(F.data.startswith("users_page:"), AuthFilter())
async def handle_users_pagination(callback: types.CallbackQuery, state: FSMContext):
    """Handle users pagination"""
    await callback.answer()
    
    page = int(callback.data.split(":")[1])
    data = await state.get_data()
    users = data.get('users', [])
    
    await state.update_data(page=page)
    await show_users_page(callback.message, users, page, state)

@router.callback_query(F.data.startswith("select_user:"), AuthFilter())
async def handle_user_selection(callback: types.CallbackQuery, state: FSMContext):
    """Handle user selection"""
    await callback.answer()
    
    user_uuid = callback.data.split(":", 1)[1]
    data = await state.get_data()
    users = data.get('users', [])
    
    # Find selected user
    selected_user = None
    for user in users:
        if user.get('uuid') == user_uuid:
            selected_user = user
            break
    
    if not selected_user:
        await callback.message.edit_text(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="list_users")
            ]])
        )
        return
    
    await state.update_data(selected_user=selected_user)
    await state.set_state(UserStates.viewing_user)
    await show_user_details(callback.message, selected_user, state)

async def show_user_details(message: types.Message, user: dict, state: FSMContext):
    """Show user details with action buttons"""
    try:
        user_details = format_user_details(user)
        
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_user:{user.get('uuid')}"))
        builder.row(types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data=f"refresh_user:{user.get('uuid')}"))
        
        # Status control buttons
        if user.get('status') == 'ACTIVE':
            builder.row(types.InlineKeyboardButton(text="‚è∏Ô∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"deactivate_user:{user.get('uuid')}"))
        else:
            builder.row(types.InlineKeyboardButton(text="‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"activate_user:{user.get('uuid')}"))
        
        # Traffic management
        builder.row(types.InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫", callback_data=f"reset_traffic:{user.get('uuid')}"))
        
        # Additional features
        builder.row(
            types.InlineKeyboardButton(text="üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", callback_data=f"user_devices:{user.get('uuid')}"),
            types.InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"user_history:{user.get('uuid')}")
        )
        
        # Subscription management
        builder.row(types.InlineKeyboardButton(text="üîó –ü–æ–¥–ø–∏—Å–∫–∞", callback_data=f"subscription:{user.get('uuid')}"))
        
        # Dangerous actions
        builder.row(types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_user:{user.get('uuid')}"))
        
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="list_users"))
        
        await message.edit_text(
            text=user_details,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error showing user details: {e}")
        await message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="list_users")
            ]])
        )

# ================ USER ACTIONS ================

@router.callback_query(F.data.startswith("refresh_user:"), AuthFilter())
async def refresh_user(callback: types.CallbackQuery, state: FSMContext):
    """Refresh user data"""
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    user_uuid = callback.data.split(":", 1)[1]
    
    try:
        # Get updated user data
        updated_user = await users_api.get_user_by_uuid(user_uuid)
        
        if updated_user:
            await state.update_data(selected_user=updated_user)
            await show_user_details(callback.message, updated_user, state)
        else:
            await callback.message.edit_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="list_users")
                ]])
            )
    except Exception as e:
        logger.error(f"Error refreshing user: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)

@router.callback_query(F.data.startswith("activate_user:"), AuthFilter())
async def activate_user(callback: types.CallbackQuery, state: FSMContext):
    """Activate user"""
    await callback.answer()
    
    user_uuid = callback.data.split(":", 1)[1]
    
    try:
        success = await users_api.enable_user(user_uuid)
        if success:
            await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", show_alert=True)
            # Refresh user data
            await refresh_user_and_show(callback, state, user_uuid)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏", show_alert=True)
    except Exception as e:
        logger.error(f"Error activating user: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏", show_alert=True)

@router.callback_query(F.data.startswith("deactivate_user:"), AuthFilter())
async def deactivate_user(callback: types.CallbackQuery, state: FSMContext):
    """Deactivate user"""
    await callback.answer()
    
    user_uuid = callback.data.split(":", 1)[1]
    
    try:
        success = await users_api.disable_user(user_uuid)
        if success:
            await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", show_alert=True)
            # Refresh user data
            await refresh_user_and_show(callback, state, user_uuid)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏", show_alert=True)
    except Exception as e:
        logger.error(f"Error deactivating user: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏", show_alert=True)

async def refresh_user_and_show(callback: types.CallbackQuery, state: FSMContext, user_uuid: str):
    """Helper function to refresh user data and show details"""
    try:
        updated_user = await users_api.get_user_by_uuid(user_uuid)
        
        if updated_user:
            await state.update_data(selected_user=updated_user)
            await show_user_details(callback.message, updated_user, state)
    except Exception as e:
        logger.error(f"Error refreshing user data: {e}")

@router.callback_query(F.data.startswith("reset_traffic:"), AuthFilter())
async def reset_user_traffic(callback: types.CallbackQuery, state: FSMContext):
    """Reset user traffic"""
    await callback.answer()
    
    user_uuid = callback.data.split(":", 1)[1]
    
    # Show confirmation
    data = await state.get_data()
    selected_user = data.get('selected_user')
    username = selected_user.get('username', 'Unknown') if selected_user else 'Unknown'
    
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data=f"confirm_reset_traffic:{user_uuid}"))
    builder.row(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"refresh_user:{user_uuid}"))
    
    await callback.message.edit_text(
        f"üîÑ **–°–±—Ä–æ—Å —Ç—Ä–∞—Ñ–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: **{escape_markdown(username)}**\n\n"
        f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–±—Ä–æ—Å–∏—Ç —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–æ 0.\n\n"
        f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("confirm_reset_traffic:"), AuthFilter())
async def confirm_reset_traffic(callback: types.CallbackQuery, state: FSMContext):
    """Confirm traffic reset"""
    await callback.answer()
    
    user_uuid = callback.data.split(":", 1)[1]
    
    try:
        # Reset traffic by updating usedTraffic to 0
        success = await users_api.update_user(user_uuid, {"usedTraffic": 0})
        if success:
            await callback.answer("‚úÖ –¢—Ä–∞—Ñ–∏–∫ —Å–±—Ä–æ—à–µ–Ω", show_alert=True)
            await refresh_user_and_show(callback, state, user_uuid)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ç—Ä–∞—Ñ–∏–∫–∞", show_alert=True)
    except Exception as e:
        logger.error(f"Error resetting traffic: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ç—Ä–∞—Ñ–∏–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("subscription:"), AuthFilter())
async def show_subscription(callback: types.CallbackQuery, state: FSMContext):
    """Show user subscription info with actual subscription link"""
    await callback.answer()
    
    user_uuid = callback.data.split(":", 1)[1]
    
    try:
        # Get user data first
        user = await users_api.get_user_by_uuid(user_uuid)
        if not user:
            await callback.message.edit_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="list_users")
                ]])
            )
            return
        
        username = user.get('username', 'Unknown')
        
        # Get subscription URL using the correct API endpoint
        api_client = RemnaAPI()
        subscription_data = await api_client.get(f"users/{user_uuid}/subscription")
        
        if subscription_data and subscription_data.get('url'):
            subscription_url = subscription_data.get('url')
            
            subscription_text = f"üîó **–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
            subscription_text += f"**üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {escape_markdown(username)}\n"
            subscription_text += f"**üÜî UUID:** `{user.get('uuid', 'Unknown')}`\n"
            subscription_text += f"**üìã Short UUID:** `{user.get('shortUuid', 'Unknown')}`\n\n"
            
            subscription_text += f"**üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É:**\n"
            subscription_text += f"`{subscription_url}`\n\n"
            
            subscription_text += f"**üì± –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
            subscription_text += f"‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ VPN –∫–ª–∏–µ–Ω—Ç\n"
            subscription_text += f"‚Ä¢ –°—Å—ã–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n"
            subscription_text += f"‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ inbound'—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            
            builder = InlineKeyboardBuilder()
            builder.row(types.InlineKeyboardButton(text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", url=subscription_url))
            builder.row(types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"subscription:{user_uuid}"))
            builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"refresh_user:{user_uuid}"))
            
            await callback.message.edit_text(
                subscription_text,
                reply_markup=builder.as_markup()
            )
        else:
            # Fallback if subscription endpoint is not available
            subscription_text = f"üîó **–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
            subscription_text += f"**üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {escape_markdown(username)}\n"
            subscription_text += f"**üÜî UUID:** `{user.get('uuid', 'Unknown')}`\n"
            subscription_text += f"**üìã Short UUID:** `{user.get('shortUuid', 'Unknown')}`\n\n"
            
            subscription_text += f"**‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
            subscription_text += f"‚Ä¢ –°—Å—ã–ª–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
            subscription_text += f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–∞ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –ø–∞–Ω–µ–ª–∏\n"
            subscription_text += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Short UUID –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞\n\n"
            
            subscription_text += f"**üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:**\n"
            subscription_text += f"–ù–∞–π–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Short UUID –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
            
            builder = InlineKeyboardBuilder()
            builder.row(types.InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"subscription:{user_uuid}"))
            builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"refresh_user:{user_uuid}"))
            
            await callback.message.edit_text(
                subscription_text,
                reply_markup=builder.as_markup()
            )
            
    except Exception as e:
        logger.error(f"Error getting subscription: {e}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            user = await users_api.get_user_by_uuid(user_uuid)
            if user:
                subscription_text = f"üîó **–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
                subscription_text += f"**üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {escape_markdown(user.get('username', 'Unknown'))}\n"
                subscription_text += f"**üìã Short UUID:** `{user.get('shortUuid', 'Unknown')}`\n\n"
                subscription_text += f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏**\n\n"
                subscription_text += f"**üîß –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã:**\n"
                subscription_text += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–∞–Ω–µ–ª–∏\n"
                subscription_text += f"‚Ä¢ –ù–∞–π–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Short UUID\n"
                subscription_text += f"‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏"
                
                builder = InlineKeyboardBuilder()
                builder.row(types.InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"subscription:{user_uuid}"))
                builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"refresh_user:{user_uuid}"))
                
                await callback.message.edit_text(
                    subscription_text,
                    reply_markup=builder.as_markup()
                )
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)
        except Exception:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)

# ================ ENHANCED SUBSCRIPTION FUNCTIONALITY ================

@router.callback_query(F.data.startswith("subscription_configs:"), AuthFilter())
async def show_subscription_configs(callback: types.CallbackQuery, state: FSMContext):
    """Show individual configuration links for user"""
    await callback.answer()
    
    user_uuid = callback.data.split(":", 1)[1]
    
    try:
        # Get user data
        user = await users_api.get_user_by_uuid(user_uuid)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        username = user.get('username', 'Unknown')
        
        # Try to get individual configs using the API
        api_client = RemnaAPI()
        
        # Get all inbounds for this user
        try:
            # Attempt to get user's inbound configurations
            configs_data = await api_client.get(f"users/{user_uuid}/configs")
            
            if configs_data and isinstance(configs_data, list):
                configs_text = f"üîß **–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
                configs_text += f"**üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {escape_markdown(username)}\n\n"
                
                builder = InlineKeyboardBuilder()
                
                for i, config in enumerate(configs_data[:10], 1):  # Limit to 10 configs
                    protocol = config.get('protocol', 'Unknown')
                    inbound_tag = config.get('inboundTag', f'Config {i}')
                    config_url = config.get('url', '')
                    
                    configs_text += f"**{i}. {protocol.upper()} - {inbound_tag}**\n"
                    
                    if config_url:
                        # Add button for each config
                        builder.row(types.InlineKeyboardButton(
                            text=f"üìã {protocol.upper()} - {inbound_tag[:20]}",
                            url=config_url
                        ))
                        configs_text += f"‚úÖ –°—Å—ã–ª–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞\n\n"
                    else:
                        configs_text += f"‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n\n"
                
                builder.row(types.InlineKeyboardButton(text="üîó –û–±—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data=f"subscription:{user_uuid}"))
                builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"refresh_user:{user_uuid}"))
                
                await callback.message.edit_text(
                    configs_text,
                    reply_markup=builder.as_markup()
                )
            else:
                # Fallback to subscription link
                await show_subscription(callback, state)
                
        except Exception as e:
            logger.warning(f"Individual configs not available: {e}")
            # Fallback to main subscription
            await show_subscription(callback, state)
            
    except Exception as e:
        logger.error(f"Error showing subscription configs: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π", show_alert=True)


@router.callback_query(F.data.startswith("delete_user:"), AuthFilter())
async def delete_user_confirm(callback: types.CallbackQuery, state: FSMContext):
    """Confirm user deletion"""
    await callback.answer()
    
    user_uuid = callback.data.split(":", 1)[1]
    
    # Show confirmation
    data = await state.get_data()
    selected_user = data.get('selected_user')
    username = selected_user.get('username', 'Unknown') if selected_user else 'Unknown'
    
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_user:{user_uuid}"))
    builder.row(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"refresh_user:{user_uuid}"))
    
    await callback.message.edit_text(
        f"üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: **{escape_markdown(username)}**\n\n"
        f"‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!** –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n"
        f"–í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞.\n\n"
        f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("confirm_delete_user:"), AuthFilter())
async def confirm_delete_user(callback: types.CallbackQuery, state: FSMContext):
    """Confirm user deletion"""
    await callback.answer()
    
    user_uuid = callback.data.split(":", 1)[1]
    
    try:
        success = await users_api.delete_user(user_uuid)
        if success:
            await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω", show_alert=True)
            # Return to users list
            await state.clear()
            await callback.message.edit_text(
                "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users")
                ]])
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)
    except Exception as e:
        logger.error(f"Error deleting user: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)

# ================ SEARCH FUNCTIONALITY ================

@router.callback_query(F.data == "search_users_menu", AuthFilter())
async def show_search_users_menu(callback: types.CallbackQuery, state: FSMContext):
    """Show search users menu"""
    await callback.answer()
    await state.clear()
    
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="üîç –ü–æ –∏–º–µ–Ω–∏", callback_data="search_user_by_name"))
    builder.row(types.InlineKeyboardButton(text="üì± –ü–æ Telegram ID", callback_data="search_user_by_telegram"))
    builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="users"))
    
    await callback.message.edit_text(
        "üîç **–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data == "search_user_by_name", AuthFilter())
async def search_user_by_name(callback: types.CallbackQuery, state: FSMContext):
    """Start search by username"""
    await callback.answer()
    await state.set_state(UserStates.search_username)
    
    await callback.message.edit_text(
        "üîç **–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="search_users_menu")
        ]])
    )

@router.message(StateFilter(UserStates.search_username), AuthFilter())
async def handle_search_username(message: types.Message, state: FSMContext):
    """Handle username search input"""
    search_term = message.text.strip()
    
    if not search_term:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    try:
        # Get all users and filter by username
        users_list = await users_api.get_all_users()
        filtered_users = [
            user for user in users_list
            if search_term.lower() in user.get('username', '').lower()
        ]
        
        if not filtered_users:
            await message.answer(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∏–º–µ–Ω–µ–º —Å–æ–¥–µ—Ä–∂–∞—â–∏–º '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="search_users_menu")
                ]])
            )
            return
        
        # Store results and show
        await state.update_data(users=filtered_users, page=0)
        await state.set_state(UserStates.selecting_user)
        await show_users_page(message, filtered_users, 0, state)
        
    except Exception as e:
        logger.error(f"Error searching users: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="search_users_menu")
            ]])
        )

@router.callback_query(F.data == "search_user_by_telegram", AuthFilter())
async def search_user_by_telegram(callback: types.CallbackQuery, state: FSMContext):
    """Start search by Telegram ID"""
    await callback.answer()
    await state.set_state(UserStates.search_telegram_id)
    
    await callback.message.edit_text(
        "üì± **–ü–æ–∏—Å–∫ –ø–æ Telegram ID**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="search_users_menu")
        ]])
    )

@router.message(StateFilter(UserStates.search_telegram_id), AuthFilter())
async def handle_search_telegram_id(message: types.Message, state: FSMContext):
    """Handle Telegram ID search input"""
    try:
        telegram_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID (—á–∏—Å–ª–æ)")
        return
    
    try:
        # Get all users and filter by telegram_id
        users_list = await users_api.get_all_users()
        filtered_users = [
            user for user in users_list
            if user.get('telegramId') == telegram_id
        ]
        
        if not filtered_users:
            await message.answer(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="search_users_menu")
                ]])
            )
            return
        
        # Show user details directly if found
        user = filtered_users[0]
        await state.update_data(selected_user=user)
        await state.set_state(UserStates.viewing_user)
        await show_user_details(message, user, state)
        
    except Exception as e:
        logger.error(f"Error searching users by telegram ID: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="search_users_menu")
            ]])
        )

# ================ CREATE USER FUNCTIONALITY ================

# –ù–∞–π–¥–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é start_create_user (–æ–∫–æ–ª–æ —Å—Ç—Ä–æ–∫–∏ 850-900) –∏ –∑–∞–º–µ–Ω–∏—Ç–µ –µ—ë –Ω–∞ —ç—Ç—É:

@router.callback_query(F.data == "create_user", AuthFilter())
async def start_create_user(callback: types.CallbackQuery, state: FSMContext):
    """Start user creation process"""
    await callback.answer()
    await state.clear()
    await state.set_state(UserStates.enter_username)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Å–ª–æ–∂–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    message_text = "‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
    message_text += "–®–∞–≥ 1/4: –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
    message_text += "‚ÑπÔ∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
    message_text += "‚Ä¢ –¢–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã _ -\n"
    message_text += "‚Ä¢ –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞\n"
    message_text += "‚Ä¢ –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º"
    
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="users"))
    
    try:
        await callback.message.edit_text(
            text=message_text,
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logger.error(f"Error in start_create_user: {e}")
        # Fallback - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            text=message_text,
            reply_markup=builder.as_markup()
        )

@router.message(StateFilter(UserStates.enter_username), AuthFilter())
async def handle_username_input(message: types.Message, state: FSMContext):
    """Handle username input"""
    data = await state.get_data()
    template_id = data.get('selected_template')
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω—É
    if template_id:
        return await handle_template_username_input(message, state)
    
    # –û–±—ã—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = message.text.strip()
    
    # Validate username
    if not re.match(r'^[a-zA-Z0-9_-]+$', username) or len(username) < 3:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
            "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
            "‚Ä¢ –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞\n"
            "‚Ä¢ –¢–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _ –∏ -"
        )
        return
    
    await state.update_data(username=username)
    await state.set_state(UserStates.enter_telegram_id)
    
    # –ë–ï–ó markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await message.answer(
        "‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        f"‚úÖ –ò–º—è: {username}\n\n"
        "–®–∞–≥ 2/4: –í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
        "‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ 0 –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –µ—Å–ª–∏ Telegram ID –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_telegram_id"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="users")
        ]])
    )

@router.message(StateFilter(UserStates.enter_telegram_id), AuthFilter())
async def handle_telegram_id_input(message: types.Message, state: FSMContext):
    """Handle Telegram ID input"""
    data = await state.get_data()
    template_id = data.get('selected_template')
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω—É
    if template_id:
        return await handle_template_telegram_id_input(message, state)
    
    # –û–±—ã—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        telegram_id = int(message.text.strip())
        if telegram_id < 0:
            raise ValueError("Negative ID")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ) –∏–ª–∏ 0")
        return
    
    data = await state.get_data()
    username = data.get('username')
    
    await state.update_data(telegramId=telegram_id if telegram_id > 0 else None)
    await state.set_state(UserStates.enter_traffic_limit)
    
    # –ë–ï–ó markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await message.answer(
        "‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        f"‚úÖ –ò–º—è: {username}\n"
        f"‚úÖ Telegram ID: {telegram_id if telegram_id > 0 else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        "–®–∞–≥ 3/4: –í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞:\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ 10GB - 10 –≥–∏–≥–∞–±–∞–π—Ç\n"
        "‚Ä¢ 500MB - 500 –º–µ–≥–∞–±–∞–π—Ç\n"
        "‚Ä¢ 1TB - 1 —Ç–µ—Ä–∞–±–∞–π—Ç\n"
        "‚Ä¢ 0 - –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚àû –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", callback_data="unlimited_traffic"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="users")
        ]])
    )

@router.callback_query(F.data == "skip_telegram_id", AuthFilter())
async def skip_telegram_id(callback: types.CallbackQuery, state: FSMContext):
    """Skip Telegram ID input"""
    await callback.answer()
    
    data = await state.get_data()
    username = data.get('username')
    
    await state.update_data(telegramId=None)
    await state.set_state(UserStates.enter_traffic_limit)
    
    # –ë–ï–ó markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback.message.edit_text(
        "‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        f"‚úÖ –ò–º—è: {username}\n"
        f"‚úÖ Telegram ID: –ù–µ —É–∫–∞–∑–∞–Ω\n\n"
        "–®–∞–≥ 3/4: –í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚àû –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", callback_data="unlimited_traffic"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="users")
        ]])
    )

def parse_traffic_limit(traffic_str: str) -> int:
    """Parse traffic limit string to bytes"""
    traffic_str = traffic_str.upper().strip()
    
    if traffic_str == "0":
        return 0
        
    # Extract number and unit
    match = re.match(r'^(\d+(?:\.\d+)?)\s*(GB|MB|TB|G|M|T)?$', traffic_str)
    if not match:
        raise ValueError("Invalid format")
    
    amount = float(match.group(1))
    unit = match.group(2) or "GB"
    
    # Convert to bytes
    multipliers = {
        'MB': 1024**2, 'M': 1024**2,
        'GB': 1024**3, 'G': 1024**3, 
        'TB': 1024**4, 'T': 1024**4
    }
    
    return int(amount * multipliers[unit])

@router.message(StateFilter(UserStates.enter_traffic_limit), AuthFilter())
async def handle_traffic_limit_input(message: types.Message, state: FSMContext):
    """Handle traffic limit input"""
    try:
        traffic_limit = parse_traffic_limit(message.text.strip())
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–∏–º–∏—Ç–∞ —Ç—Ä–∞—Ñ–∏–∫–∞.\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"
            "‚Ä¢ 10GB –∏–ª–∏ 10G\n"
            "‚Ä¢ 500MB –∏–ª–∏ 500M\n"
            "‚Ä¢ 1TB –∏–ª–∏ 1T\n"
            "‚Ä¢ 0 - –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
        )
        return
    
    data = await state.get_data()
    await state.update_data(trafficLimit=traffic_limit)
    await state.set_state(UserStates.enter_description)
    
    username = data.get('username')
    telegram_id = data.get('telegramId')
    traffic_text = format_bytes(traffic_limit) if traffic_limit > 0 else "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
    
    # –ë–ï–ó markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await message.answer(
        "‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        f"‚úÖ –ò–º—è: {username}\n"
        f"‚úÖ Telegram ID: {telegram_id or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"‚úÖ –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: {traffic_text}\n\n"
        "–®–∞–≥ 4/4: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_description"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="users")
        ]])
    )

@router.callback_query(F.data == "unlimited_traffic", AuthFilter())
async def set_unlimited_traffic(callback: types.CallbackQuery, state: FSMContext):
    """Set unlimited traffic"""
    await callback.answer()
    
    data = await state.get_data()
    await state.update_data(trafficLimit=0)
    await state.set_state(UserStates.enter_description)
    
    username = data.get('username')
    telegram_id = data.get('telegramId')
    
    await callback.message.edit_text(
        "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
        f"‚úÖ **–ò–º—è:** {username}\n"
        f"‚úÖ **Telegram ID:** {telegram_id or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"‚úÖ **–õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞:** –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n\n"
        "**–®–∞–≥ 4/4:** –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_description"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="users")
        ]])
    )

@router.message(StateFilter(UserStates.enter_description), AuthFilter())
async def handle_description_input(message: types.Message, state: FSMContext):
    """Handle description input"""
    data = await state.get_data()
    template_id = data.get('selected_template')
    
    if template_id:
        return await handle_template_description_input(message, state)
    
    # –û–±—ã—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    description = message.text.strip()
    await state.update_data(description=description)
    
    # Show confirmation
    await show_create_user_confirmation(message, state)

@router.callback_query(F.data == "skip_description", AuthFilter())
async def skip_description(callback: types.CallbackQuery, state: FSMContext):
    """Skip description input"""
    await callback.answer()
    await state.update_data(description=None)
    
    # Show confirmation
    await show_create_user_confirmation(callback.message, state)

async def show_create_user_confirmation(message: types.Message, state: FSMContext):
    """Show user creation confirmation"""
    data = await state.get_data()
    username = data.get('username')
    telegram_id = data.get('telegramId')
    traffic_limit = data.get('trafficLimit', 0)
    description = data.get('description')
    
    traffic_text = format_bytes(traffic_limit) if traffic_limit > 0 else "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
    
    # –ë–ï–ó markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    confirmation_text = (
        "‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ\n\n"
        f"–ò–º—è: {username}\n"
        f"Telegram ID: {telegram_id or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: {traffic_text}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
        "–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏?"
    )
    
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data="confirm_create_user"))
    builder.row(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="users"))
    
    try:
        await message.edit_text(
            confirmation_text,
            reply_markup=builder.as_markup()
        )
    except:
        # If edit fails, send new message
        await message.answer(
            confirmation_text,
            reply_markup=builder.as_markup()
        )

@router.callback_query(F.data == "confirm_create_user", AuthFilter())
async def confirm_create_user(callback: types.CallbackQuery, state: FSMContext):
    """Confirm user creation"""
    await callback.answer()
    
    data = await state.get_data()
    
    try:
        # Prepare user data for API
        user_data = {
            "username": data.get('username'),
            "trafficLimit": data.get('trafficLimit', 0),
        }
        
        if data.get('telegramId'):
            user_data["telegramId"] = data.get('telegramId')
        
        if data.get('description'):
            user_data["description"] = data.get('description')
        
        # Create user using direct API
        success = await users_api.create_user(user_data)
        
        if success:
            await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω", show_alert=True)
            await state.clear()
            
            # Simple message without markdown
            success_message = "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
            success_message += f"–ò–º—è: {user_data['username']}\n"
            success_message += f"–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω\n\n"
            success_message += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é."
            
            await callback.message.edit_text(
                success_message,
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üë• –ö —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users"),
                    types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error creating user: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)

# ================ STATISTICS ================

@router.callback_query(F.data == "users_stats", AuthFilter())
async def show_users_statistics(callback: types.CallbackQuery):
    """Show users statistics"""
    await callback.answer()
    
    try:
        users_list = await users_api.get_all_users()
        
        if users_list:
            total_users = len(users_list)
            active_users = sum(1 for user in users_list if user.get('status') == 'ACTIVE')
            inactive_users = total_users - active_users
            
            total_traffic_used = sum(user.get('usedTraffic', 0) or 0 for user in users_list)
            total_traffic_limit = sum(user.get('trafficLimit', 0) or 0 for user in users_list if user.get('trafficLimit'))
            
            stats_text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
            stats_text += f"üë• **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {total_users}\n"
            stats_text += f"üü¢ **–ê–∫—Ç–∏–≤–Ω—ã—Ö:** {active_users}\n"
            stats_text += f"üî¥ **–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö:** {inactive_users}\n"
            stats_text += f"üìà **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç—Ä–∞—Ñ–∏–∫–∞:** {format_bytes(total_traffic_used)}\n"
            if total_traffic_limit > 0:
                stats_text += f"üìä **–û–±—â–∏–π –ª–∏–º–∏—Ç:** {format_bytes(total_traffic_limit)}\n"
                remaining = total_traffic_limit - total_traffic_used
                stats_text += f"‚¨ÜÔ∏è **–û—Å—Ç–∞–ª–æ—Å—å:** {format_bytes(remaining)}\n"
                usage_percent = (total_traffic_used / total_traffic_limit) * 100
                stats_text += f"üìä **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:** {usage_percent:.1f}%\n"
        else:
            stats_text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞**\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            
        await callback.message.edit_text(
            stats_text,
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="users_stats"),
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="users")
            ]])
        )
        
    except Exception as e:
        logger.error(f"Error getting users stats: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="users")
            ]])
        )

# ================ EDIT USER FUNCTIONALITY ================

@router.callback_query(F.data.startswith("edit_user:"), AuthFilter())
async def start_edit_user(callback: types.CallbackQuery, state: FSMContext):
    """Start editing a user"""
    await callback.answer()
    
    user_uuid = callback.data.split(":", 1)[1]
    
    # Get current user data
    data = await state.get_data()
    user = data.get('selected_user')
    
    if not user:
        await callback.message.edit_text(
            "‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="list_users")
            ]])
        )
        return
    
    await state.update_data(edit_user=user)
    await state.set_state(UserStates.editing_user)
    
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="üì± Telegram ID", callback_data="edit_field:telegram_id"))
    builder.row(types.InlineKeyboardButton(text="üìà –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞", callback_data="edit_field:traffic_limit"))
    builder.row(types.InlineKeyboardButton(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_field:description"))
    builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"refresh_user:{user_uuid}"))
    
    # Format current values –ë–ï–ó markdown
    username = user.get('username', 'Unknown')
    telegram_id = user.get('telegramId', '–ù–µ —É–∫–∞–∑–∞–Ω')
    traffic_limit = format_bytes(user.get('trafficLimit', 0)) if user.get('trafficLimit') else "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
    description = user.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    
    message = f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
    message += f"üë§ –ò–º—è: {username}\n\n"
    message += f"–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n"
    message += f"üì± Telegram ID: {telegram_id}\n"
    message += f"üìà –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: {traffic_limit}\n"
    message += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {str(description)}\n\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    
    await callback.message.edit_text(
        text=message,
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("edit_field:"), AuthFilter())
async def edit_field_selection(callback: types.CallbackQuery, state: FSMContext):
    """Handle edit field selection"""
    await callback.answer()
    
    field = callback.data.split(":", 1)[1]
    await state.update_data(edit_field=field)
    
    if field == "telegram_id":
        await state.set_state(UserStates.enter_edit_telegram_id)
        await callback.message.edit_text(
            "üì± –ò–∑–º–µ–Ω–µ–Ω–∏–µ Telegram ID\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π Telegram ID (–∏–ª–∏ 0 –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")
            ]])
        )
    elif field == "traffic_limit":
        await state.set_state(UserStates.enter_edit_traffic_limit)
        await callback.message.edit_text(
            "üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Ç—Ä–∞—Ñ–∏–∫–∞\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞:\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã: 10GB, 500MB, 1TB, 0 (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="‚àû –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", callback_data="set_unlimited"),
                types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")
            ]])
        )
    elif field == "description":
        await state.set_state(UserStates.enter_edit_description)
        await callback.message.edit_text(
            "üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="clear_description"),
                types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")
            ]])
        )

@router.message(StateFilter(UserStates.enter_edit_telegram_id), AuthFilter())
async def handle_edit_telegram_id(message: types.Message, state: FSMContext):
    """Handle Telegram ID edit"""
    try:
        telegram_id = int(message.text.strip())
        if telegram_id < 0:
            raise ValueError("Negative ID")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID (—á–∏—Å–ª–æ >= 0)")
        return
    
    data = await state.get_data()
    user = data.get('edit_user')
    
    try:
        # Update user using direct API
        update_data = {"telegramId": telegram_id if telegram_id > 0 else None}
        success = await users_api.update_user(user['uuid'], update_data)
        
        if success:
            await message.answer(
                "‚úÖ Telegram ID —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"refresh_user:{user['uuid']}")
                ]])
            )
            await state.clear()
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Telegram ID")
    except Exception as e:
        logger.error(f"Error updating telegram ID: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Telegram ID")

@router.message(StateFilter(UserStates.enter_edit_traffic_limit), AuthFilter())
async def handle_edit_traffic_limit(message: types.Message, state: FSMContext):
    """Handle traffic limit edit"""
    try:
        traffic_limit = parse_traffic_limit(message.text.strip())
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–∏–º–∏—Ç–∞ —Ç—Ä–∞—Ñ–∏–∫–∞.\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã: `10GB`, `500MB`, `1TB`, `0`"
        )
        return
    
    data = await state.get_data()
    user = data.get('edit_user')
    
    try:
        # Update user using direct API
        update_data = {"trafficLimit": traffic_limit}
        success = await users_api.update_user(user['uuid'], update_data)
        
        if success:
            traffic_text = format_bytes(traffic_limit) if traffic_limit > 0 else "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
            await message.answer(
                f"‚úÖ –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: {traffic_text}",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"refresh_user:{user['uuid']}")
                ]])
            )
            await state.clear()
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ —Ç—Ä–∞—Ñ–∏–∫–∞")
    except Exception as e:
        logger.error(f"Error updating traffic limit: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ —Ç—Ä–∞—Ñ–∏–∫–∞")

@router.message(StateFilter(UserStates.enter_edit_description), AuthFilter())
async def handle_edit_description(message: types.Message, state: FSMContext):
    """Handle description edit"""
    description = message.text.strip()
    
    data = await state.get_data()
    user = data.get('edit_user')
    
    try:
        # Update user using direct API
        update_data = {"description": description}
        success = await users_api.update_user(user['uuid'], update_data)
        
        if success:
            await message.answer(
                "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"refresh_user:{user['uuid']}")
                ]])
            )
            await state.clear()
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"Error updating description: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è")

@router.callback_query(F.data == ("set_unlimited"), AuthFilter())
async def set_unlimited_traffic_edit(callback: types.CallbackQuery, state: FSMContext):
    """Set unlimited traffic during edit"""
    await callback.answer()
    
    data = await state.get_data()
    user = data.get('edit_user')
    
    try:
        # Update user using direct API
        update_data = {"trafficLimit": 0}
        success = await users_api.update_user(user['uuid'], update_data)
        
        if success:
            await callback.message.edit_text(
                "‚úÖ –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"refresh_user:{user['uuid']}")
                ]])
            )
            await state.clear()
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ —Ç—Ä–∞—Ñ–∏–∫–∞")
    except Exception as e:
        logger.error(f"Error setting unlimited traffic: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞")

@router.callback_query(F.data == ("clear_description"), AuthFilter())
async def clear_description_edit(callback: types.CallbackQuery, state: FSMContext):
    """Clear description during edit"""
    await callback.answer()
    
    data = await state.get_data()
    user = data.get('edit_user')
    
    try:
        # Update user using direct API (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å SDK –Ω–∞ –ø—Ä—è–º–æ–π API)
        update_data = {"description": ""}
        success = await users_api.update_user(user['uuid'], update_data)
        
        if success:
            await callback.message.edit_text(
                "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"refresh_user:{user['uuid']}")
                ]])
            )
            await state.clear()
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"Error clearing description: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è")

@router.callback_query(F.data == ("cancel_edit"), AuthFilter())
async def cancel_edit(callback: types.CallbackQuery, state: FSMContext):
    """Cancel edit operation"""
    await callback.answer()
    
    data = await state.get_data()
    user = data.get('edit_user')
    
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"refresh_user:{user['uuid'] if user else 'unknown'}")
        ]])
    )

# ================ USER TEMPLATES FUNCTIONALITY ================

# –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_TEMPLATES = {
    "basic": {
        "name": "–ë–∞–∑–æ–≤—ã–π",
        "description": "–ë–∞–∑–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏",
        "traffic_limit": 10 * 1024**3,  # 10GB
        "expire_days": 30,
        "icon": "üë§"
    },
    "premium": {
        "name": "–ü—Ä–µ–º–∏—É–º",
        "description": "–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏",
        "traffic_limit": 100 * 1024**3,  # 100GB
        "expire_days": 30,
        "icon": "‚≠ê"
    },
    "unlimited": {
        "name": "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π",
        "description": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ç—Ä–∞—Ñ–∏–∫–∞",
        "traffic_limit": 0,  # Unlimited
        "expire_days": 365,
        "icon": "üöÄ"
    },
    "trial": {
        "name": "–ü—Ä–æ–±–Ω—ã–π",
        "description": "–ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫",
        "traffic_limit": 1024**3,  # 1GB
        "expire_days": 7,
        "icon": "üîç"
    }
}

@router.callback_query(F.data == "create_user_template", AuthFilter())
async def show_user_templates(callback: types.CallbackQuery, state: FSMContext):
    """Show user creation templates"""
    await callback.answer()
    await state.clear()
    
    builder = InlineKeyboardBuilder()
    
    for template_id, template in USER_TEMPLATES.items():
        builder.row(types.InlineKeyboardButton(
            text=f"{template['icon']} {template['name']}",
            callback_data=f"template_select:{template_id}"
        ))
    
    builder.row(types.InlineKeyboardButton(text="‚úèÔ∏è –°–æ–∑–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="create_user"))
    builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="users"))
    
    message = "üìã **–®–∞–±–ª–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
    
    for template_id, template in USER_TEMPLATES.items():
        traffic_text = format_bytes(template['traffic_limit']) if template['traffic_limit'] > 0 else "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π"
        message += f"{template['icon']} **{template['name']}**\n"
        message += f"  ‚Ä¢ –¢—Ä–∞—Ñ–∏–∫: {traffic_text}\n"
        message += f"  ‚Ä¢ –°—Ä–æ–∫: {template['expire_days']} –¥–Ω–µ–π\n"
        message += f"  ‚Ä¢ {template['description']}\n\n"
    
    await callback.message.edit_text(
        text=message,
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("template_select:"), AuthFilter())
async def select_template(callback: types.CallbackQuery, state: FSMContext):
    """Select a user template"""
    await callback.answer()
    
    template_id = callback.data.split(":", 1)[1]
    template = USER_TEMPLATES.get(template_id)
    
    if not template:
        await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await state.update_data(selected_template=template_id)
    await state.set_state(UserStates.enter_username)
    
    traffic_text = format_bytes(template['traffic_limit']) if template['traffic_limit'] > 0 else "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π"
    
    await callback.message.edit_text(
        f"‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —à–∞–±–ª–æ–Ω—É**\n\n"
        f"{template['icon']} **–®–∞–±–ª–æ–Ω:** {template['name']}\n"
        f"üìà **–¢—Ä–∞—Ñ–∏–∫:** {traffic_text}\n"
        f"üìÖ **–°—Ä–æ–∫:** {template['expire_days']} –¥–Ω–µ–π\n"
        f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {template['description']}\n\n"
        f"**–®–∞–≥ 1/3:** –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="create_user_template")
        ]])
    )

async def handle_template_username_input(message: types.Message, state: FSMContext):
    """Handle username input for template creation"""
    username = message.text.strip()
    
    # Validate username
    if not re.match(r'^[a-zA-Z0-9_-]+$', username) or len(username) < 3:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
            "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
            "‚Ä¢ –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞\n"
            "‚Ä¢ –¢–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _ –∏ -"
        )
        return
    
    data = await state.get_data()
    template_id = data.get('selected_template')
    template = USER_TEMPLATES[template_id]
    
    await state.update_data(username=username)
    await state.set_state(UserStates.enter_telegram_id)
    
    traffic_text = format_bytes(template['traffic_limit']) if template['traffic_limit'] > 0 else "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π"
    
    await message.answer(
        f"‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —à–∞–±–ª–æ–Ω—É**\n\n"
        f"{template['icon']} **–®–∞–±–ª–æ–Ω:** {template['name']}\n"
        f"‚úÖ **–ò–º—è:** {username}\n"
        f"üìà **–¢—Ä–∞—Ñ–∏–∫:** {traffic_text}\n"
        f"üìÖ **–°—Ä–æ–∫:** {template['expire_days']} –¥–Ω–µ–π\n\n"
        f"**–®–∞–≥ 2/3:** –í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_telegram_id_template"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="create_user_template")
        ]])
    )

@router.callback_query(F.data == "skip_telegram_id_template", AuthFilter())
async def skip_telegram_id_template(callback: types.CallbackQuery, state: FSMContext):
    """Skip Telegram ID for template creation"""
    await callback.answer()
    
    data = await state.get_data()
    template_id = data.get('selected_template')
    template = USER_TEMPLATES[template_id]
    username = data.get('username')
    
    await state.update_data(telegram_id=None)
    await state.set_state(UserStates.enter_description)
    
    traffic_text = format_bytes(template['traffic_limit']) if template['traffic_limit'] > 0 else "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π"
    
    await callback.message.edit_text(
        f"‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —à–∞–±–ª–æ–Ω—É**\n\n"
        f"{template['icon']} **–®–∞–±–ª–æ–Ω:** {template['name']}\n"
        f"‚úÖ **–ò–º—è:** {username}\n"
        f"‚úÖ **Telegram ID:** –ù–µ —É–∫–∞–∑–∞–Ω\n"
        f"üìà **–¢—Ä–∞—Ñ–∏–∫:** {traffic_text}\n"
        f"üìÖ **–°—Ä–æ–∫:** {template['expire_days']} –¥–Ω–µ–π\n\n"
        f"**–®–∞–≥ 3/3:** –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_description_template"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="create_user_template")
        ]])
    )

async def handle_template_telegram_id_input(message: types.Message, state: FSMContext):
    """Handle Telegram ID input for template creation"""
    try:
        telegram_id = int(message.text.strip())
        if telegram_id < 0:
            raise ValueError("Negative ID")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ) –∏–ª–∏ 0")
        return
    
    data = await state.get_data()
    template_id = data.get('selected_template')
    template = USER_TEMPLATES[template_id]
    username = data.get('username')
    
    await state.update_data(telegram_id=telegram_id if telegram_id > 0 else None)
    await state.set_state(UserStates.enter_description)
    
    traffic_text = format_bytes(template['traffic_limit']) if template['traffic_limit'] > 0 else "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π"
    
    await message.answer(
        f"‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —à–∞–±–ª–æ–Ω—É**\n\n"
        f"{template['icon']} **–®–∞–±–ª–æ–Ω:** {template['name']}\n"
        f"‚úÖ **–ò–º—è:** {username}\n"
        f"‚úÖ **Telegram ID:** {telegram_id if telegram_id > 0 else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìà **–¢—Ä–∞—Ñ–∏–∫:** {traffic_text}\n"
        f"üìÖ **–°—Ä–æ–∫:** {template['expire_days']} –¥–Ω–µ–π\n\n"
        f"**–®–∞–≥ 3/3:** –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_description_template"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="create_user_template")
        ]])
    )

@router.callback_query(F.data == "skip_description_template", AuthFilter())
async def skip_description_template(callback: types.CallbackQuery, state: FSMContext):
    """Skip description for template creation"""
    await callback.answer()
    await state.update_data(description=None)
    await show_template_confirmation(callback.message, state)

async def handle_template_description_input(message: types.Message, state: FSMContext):
    """Handle description input for template creation"""
    description = message.text.strip()
    await state.update_data(description=description)
    await show_template_confirmation(message, state)

async def show_template_confirmation(message: types.Message, state: FSMContext):
    """Show template user creation confirmation"""
    data = await state.get_data()
    template_id = data.get('selected_template')
    template = USER_TEMPLATES[template_id]
    
    username = data.get('username')
    telegram_id = data.get('telegram_id')
    description = data.get('description')
    
    traffic_text = format_bytes(template['traffic_limit']) if template['traffic_limit'] > 0 else "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π"
    expire_date = datetime.now() + timedelta(days=template['expire_days'])
    
    confirmation_text = (
        f"‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ**\n\n"
        f"{template['icon']} **–®–∞–±–ª–æ–Ω:** {template['name']}\n"
        f"**–ò–º—è:** {username}\n"
        f"**Telegram ID:** {telegram_id or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"**–õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞:** {traffic_text}\n"
        f"**–ò—Å—Ç–µ–∫–∞–µ—Ç:** {expire_date.strftime('%Y-%m-%d %H:%M')}\n"
        f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {description or template['description']}\n\n"
        f"–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏?"
    )
    
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data="confirm_create_template_user"))
    builder.row(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="create_user_template"))
    
    try:
        await message.edit_text(
            confirmation_text,
            reply_markup=builder.as_markup()
        )
    except:
        await message.answer(
            confirmation_text,
            reply_markup=builder.as_markup()
        )

@router.callback_query(F.data == "confirm_create_template_user", AuthFilter())
async def confirm_create_template_user(callback: types.CallbackQuery, state: FSMContext):
    """Confirm template user creation"""
    await callback.answer()
    
    data = await state.get_data()
    template_id = data.get('selected_template')
    template = USER_TEMPLATES[template_id]
    
    try:
        expire_date = datetime.now() + timedelta(days=template['expire_days'])
        
        # Prepare user data for API
        user_data = {
            "username": data.get('username'),
            "trafficLimit": template['traffic_limit'],
            "expireAt": expire_date.isoformat(),
            "description": data.get('description') or template['description']
        }
        
        if data.get('telegram_id'):
            user_data["telegramId"] = data.get('telegram_id')
        
        # Create user using direct API
        success = await users_api.create_user(user_data)
        
        if success:
            await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –ø–æ —à–∞–±–ª–æ–Ω—É", show_alert=True)
            await state.clear()
            
            traffic_text = format_bytes(template['traffic_limit']) if template['traffic_limit'] > 0 else "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π"
            
            await callback.message.edit_text(
                f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!**\n\n"
                f"{template['icon']} **–®–∞–±–ª–æ–Ω:** {template['name']}\n"
                f"**–ò–º—è:** {user_data['username']}\n"
                f"**–¢—Ä–∞—Ñ–∏–∫:** {traffic_text}\n"
                f"**–ò—Å—Ç–µ–∫–∞–µ—Ç:** {expire_date.strftime('%Y-%m-%d %H:%M')}\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üë• –ö —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users"),
                    types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error creating template user: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)

# ================ EXTENDED STATISTICS ================

@router.callback_query(F.data == "users_extended_stats", AuthFilter())
async def show_extended_users_statistics(callback: types.CallbackQuery):
    """Show extended users statistics with node breakdown"""
    await callback.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API
        users_list = await users_api.get_all_users()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–¥–∞—Ö
        nodes_list = await nodes_api.get_all_nodes()
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_users = len(users_list)
        active_users = sum(1 for user in users_list if user.get('status') == 'ACTIVE')
        inactive_users = total_users - active_users
        
        total_traffic_used = sum(user.get('usedTraffic', 0) or 0 for user in users_list)
        total_traffic_limit = sum(user.get('trafficLimit', 0) or 0 for user in users_list if user.get('trafficLimit'))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–æ–¥–∞–º
        node_stats = {}
        for node in nodes_list:
            node_uuid = node.get('uuid')
            node_users = [user for user in users_list if user.get('nodeUuid') == node_uuid]
            
            node_stats[node_uuid] = {
                'name': node.get('name'),
                'total_users': len(node_users),
                'active_users': sum(1 for user in node_users if user.get('status') == 'ACTIVE'),
                'traffic_used': sum(user.get('usedTraffic', 0) or 0 for user in node_users),
                'traffic_limit': sum(user.get('trafficLimit', 0) or 0 for user in node_users if user.get('trafficLimit')),
                'status': 'online' if node.get('isConnected') else 'offline'
            }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
        now = datetime.now()
        week_ago = now - timedelta(days=7)
        month_ago = now - timedelta(days=30)
        
        new_users_week = 0
        new_users_month = 0
        for user in users_list:
            created_at = user.get('createdAt')
            if created_at:
                try:
                    created_date = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                    if created_date > week_ago:
                        new_users_week += 1
                    if created_date > month_ago:
                        new_users_month += 1
                except Exception:
                    pass
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é
        expired_users = 0
        expiring_soon = 0
        for user in users_list:
            expire_at = user.get('expireAt')
            if expire_at:
                try:
                    expire_date = datetime.fromisoformat(expire_at.replace('Z', '+00:00'))
                    if expire_date < now:
                        expired_users += 1
                    elif now < expire_date < now + timedelta(days=7):
                        expiring_soon += 1
                except Exception:
                    pass
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        stats_text = "üìä **–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_text += "**üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        if total_users > 0:
            stats_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users} ({(active_users/total_users*100):.1f}%)\n"
            stats_text += f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {inactive_users} ({(inactive_users/total_users*100):.1f}%)\n"
        else:
            stats_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}\n"
            stats_text += f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {inactive_users}\n"
        stats_text += f"‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö: {expired_users}\n"
        stats_text += f"‚Ä¢ –ò—Å—Ç–µ–∫–∞—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏: {expiring_soon}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
        stats_text += "**üíæ –¢—Ä–∞—Ñ–∏–∫:**\n"
        stats_text += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {format_bytes(total_traffic_used)}\n"
        if total_traffic_limit > 0:
            stats_text += f"‚Ä¢ –û–±—â–∏–π –ª–∏–º–∏—Ç: {format_bytes(total_traffic_limit)}\n"
            remaining = total_traffic_limit - total_traffic_used
            stats_text += f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {format_bytes(remaining)}\n"
            usage_percent = (total_traffic_used / total_traffic_limit) * 100
            stats_text += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {usage_percent:.1f}%\n"
        stats_text += "\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
        stats_text += "**üìÖ –ü–æ –ø–µ—Ä–∏–æ–¥–∞–º:**\n"
        stats_text += f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {new_users_week}\n"
        stats_text += f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {new_users_month}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–æ–¥–∞–º
        if node_stats:
            stats_text += "**üîó –ü–æ –Ω–æ–¥–∞–º:**\n"
            for node_uuid, stats in node_stats.items():
                status_emoji = "üü¢" if stats['status'] == 'online' else "üî¥"
                stats_text += f"{status_emoji} **{escape_markdown(stats['name'])}**\n"
                stats_text += f"  ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_users']})\n"
                stats_text += f"  ‚Ä¢ –¢—Ä–∞—Ñ–∏–∫: {format_bytes(stats['traffic_used'])}"
                if stats['traffic_limit'] > 0:
                    stats_text += f" / {format_bytes(stats['traffic_limit'])}"
                stats_text += "\n"
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(text="üìä –ü–æ –Ω–æ–¥–∞–º", callback_data="stats_by_nodes"),
            types.InlineKeyboardButton(text="üìà –ü–æ –ø–µ—Ä–∏–æ–¥–∞–º", callback_data="stats_by_period")
        )
        builder.row(
            types.InlineKeyboardButton(text="‚ö†Ô∏è –ò—Å—Ç–µ–∫–∞—é—â–∏–µ", callback_data="expiring_users"),
            types.InlineKeyboardButton(text="‚ùå –ò—Å—Ç–µ–∫—à–∏–µ", callback_data="expired_users")
        )
        builder.row(types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="users_extended_stats"))
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="users"))
        
        await callback.message.edit_text(
            text=stats_text,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error getting extended stats: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="users")
            ]])
        )
# ================ EXPIRED USERS ================

@router.callback_query(F.data == "expired_users", AuthFilter())
async def show_expired_users(callback: types.CallbackQuery, state: FSMContext):
    """Show expired users"""
    await callback.answer()
    
    try:
        users_list = await users_api.get_all_users()
        
        now = datetime.now()
        
        expired_users = []
        for user in users_list:
            expire_at = user.get('expireAt')
            if expire_at:
                try:
                    expire_date = datetime.fromisoformat(expire_at.replace('Z', '+00:00'))
                    if expire_date < now:
                        expired_users.append(user)
                except Exception:
                    pass
        
        if not expired_users:
            await callback.message.edit_text(
                "‚ùå **–ò—Å—Ç–µ–∫—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏**\n\n"
                "‚úÖ –ù–µ—Ç –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="users_extended_stats")
                ]])
            )
            return
        
        # Store expired users in state
        await state.update_data(users=expired_users, page=0)
        await state.set_state(UserStates.selecting_user)
        
        message_text = f"‚ùå **–ò—Å—Ç–µ–∫—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(expired_users)})**\n\n"
        
        for user in expired_users[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            expire_at = user.get('expireAt')
            expire_date = datetime.fromisoformat(expire_at.replace('Z', '+00:00'))
            days_expired = (now - expire_date).days
            
            status_emoji = "üü¢" if user.get('status') == 'ACTIVE' else "üî¥"
            
            username = user.get('username', 'Unknown')
            used_traffic = user.get('usedTraffic', 0) or 0
            
            message_text += f"{status_emoji}‚ùå **{escape_markdown(username)}**\n"
            message_text += f"  üìÖ –ò—Å—Ç–µ–∫ {days_expired} –¥–Ω. –Ω–∞–∑–∞–¥ ({expire_date.strftime('%Y-%m-%d')})\n"
            message_text += f"  üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {format_bytes(used_traffic)}\n\n"
        
        if len(expired_users) > 10:
            message_text += f"... –∏ –µ—â–µ {len(expired_users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(text="üìù –°–ø–∏—Å–æ–∫ –ø–æ–ª–Ω—ã–π", callback_data="list_users"),
            types.InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –≤—Å–µ—Ö", callback_data="extend_all_expired")
        )
        builder.row(
            types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö", callback_data="delete_all_expired_confirm"),
            types.InlineKeyboardButton(text="‚è∏Ô∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ—Ö", callback_data="deactivate_all_expired")
        )
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="users_extended_stats"))
        
        await callback.message.edit_text(
            text=message_text,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error showing expired users: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="users_extended_stats")
            ]])
        )

# ================ BULK ACTIONS ================

@router.callback_query(F.data == "extend_all_expiring", AuthFilter())
async def extend_all_expiring_users(callback: types.CallbackQuery, state: FSMContext):
    """Extend all expiring users"""
    await callback.answer()
    
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="üìÖ +7 –¥–Ω–µ–π", callback_data="bulk_extend:7"),
        types.InlineKeyboardButton(text="üìÖ +30 –¥–Ω–µ–π", callback_data="bulk_extend:30")
    )
    builder.row(
        types.InlineKeyboardButton(text="üìÖ +90 –¥–Ω–µ–π", callback_data="bulk_extend:90"),
        types.InlineKeyboardButton(text="üìÖ +365 –¥–Ω–µ–π", callback_data="bulk_extend:365")
    )
    builder.row(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="expiring_users"))
    
    await callback.message.edit_text(
        "üîÑ **–ú–∞—Å—Å–æ–≤–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
        "–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–æ–¥–ª–∏—Ç—å –≤—Å–µ—Ö –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("bulk_extend:"), AuthFilter())
async def confirm_bulk_extend(callback: types.CallbackQuery, state: FSMContext):
    """Confirm bulk extension"""
    await callback.answer()
    
    days = int(callback.data.split(":")[1])
    
    try:
        users_list = await users_api.get_all_users()
        now = datetime.now()
        week_later = now + timedelta(days=7)
        
        expiring_users = []
        for user in users_list:
            expire_at = user.get('expireAt')
            if expire_at:
                try:
                    expire_date = datetime.fromisoformat(expire_at.replace('Z', '+00:00'))
                    if now < expire_date < week_later:
                        expiring_users.append(user)
                except Exception:
                    pass
        
        if not expiring_users:
            await callback.message.edit_text(
                "‚úÖ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="users_extended_stats")
                ]])
            )
            return
        
        # Confirm bulk action
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"execute_bulk_extend:{days}"))
        builder.row(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="expiring_users"))
        
        await callback.message.edit_text(
            f"üîÑ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è**\n\n"
            f"–ë—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω–æ **{len(expiring_users)}** –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ **{days} –¥–Ω–µ–π**\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            reply_markup=builder.as_markup()
        )
        
        # Store data for execution
        await state.update_data(bulk_extend_days=days, bulk_extend_users=expiring_users)
        
    except Exception as e:
        logger.error(f"Error preparing bulk extend: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è")

@router.callback_query(F.data.startswith("execute_bulk_extend:"), AuthFilter())
async def execute_bulk_extend(callback: types.CallbackQuery, state: FSMContext):
    """Execute bulk extension"""
    await callback.answer()
    
    days = int(callback.data.split(":")[1])
    data = await state.get_data()
    users_to_extend = data.get('bulk_extend_users', [])
    
    if not users_to_extend:
        await callback.message.edit_text("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è")
        return
    
    await callback.message.edit_text("üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–∞—Å—Å–æ–≤–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ...")
    
    success_count = 0
    error_count = 0
    
    for user in users_to_extend:
        try:
            current_expire = user.get('expireAt')
            if current_expire:
                current_date = datetime.fromisoformat(current_expire.replace('Z', '+00:00'))
                new_expire_date = current_date + timedelta(days=days)
            else:
                new_expire_date = datetime.now() + timedelta(days=days)
            
            update_data = {"expireAt": new_expire_date.isoformat()}
            success = await users_api.update_user(user['uuid'], update_data)
            
            if success:
                success_count += 1
            else:
                error_count += 1
                
        except Exception as e:
            logger.error(f"Error extending user {user.get('username', 'Unknown')}: {e}")
            error_count += 1
    
    await state.clear()
    
    result_text = f"‚úÖ **–ú–∞—Å—Å–æ–≤–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ**\n\n"
    result_text += f"–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–æ: **{success_count}** –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    if error_count > 0:
        result_text += f"–û—à–∏–±–æ–∫: **{error_count}**\n"
    result_text += f"–ü—Ä–æ–¥–ª–µ–Ω–æ –Ω–∞: **{days} –¥–Ω–µ–π**"
    
    await callback.message.edit_text(
        result_text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="users_extended_stats")
        ]])
    )

# ================ USER DEVICES MANAGEMENT ================

@router.callback_query(F.data.startswith("user_devices:"), AuthFilter())
async def show_user_devices(callback: types.CallbackQuery, state: FSMContext):
    """Show user devices and connections"""
    await callback.answer()
    
    user_uuid = callback.data.split(":", 1)[1]
    
    try:
        # Get user data
        user = await users_api.get_user_by_uuid(user_uuid)
        if not user:
            await callback.message.edit_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="list_users")
                ]])
            )
            return
        
        username = user.get('username', 'Unknown')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
        devices_text = f"üì± **–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {escape_markdown(username)}**\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö
        status = user.get('status', 'Unknown')
        last_online = user.get('lastOnline')
        used_traffic = user.get('usedTraffic', 0) or 0
        
        devices_text += f"**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π:**\n"
        devices_text += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if status == 'ACTIVE' else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
        devices_text += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç—Ä–∞—Ñ–∏–∫–∞: {format_bytes(used_traffic)}\n"
        
        if last_online:
            devices_text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_online[:19].replace('T', ' ')}\n"
        
        devices_text += f"\n**üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:**\n"
        devices_text += f"‚Ä¢ –°–±—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π\n"
        devices_text += f"‚Ä¢ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n"
        devices_text += f"‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
        
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", callback_data=f"reset_connections:{user_uuid}"))
        builder.row(types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"user_devices:{user_uuid}"))
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"refresh_user:{user_uuid}"))
        
        await callback.message.edit_text(
            devices_text,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error showing user devices: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"refresh_user:{user_uuid}")
            ]])
        )

@router.callback_query(F.data.startswith("reset_connections:"), AuthFilter())
async def reset_user_connections(callback: types.CallbackQuery, state: FSMContext):
    """Reset user connections"""
    await callback.answer()
    
    user_uuid = callback.data.split(":", 1)[1]
    
    # Show confirmation
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data=f"confirm_reset_connections:{user_uuid}"))
    builder.row(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"user_devices:{user_uuid}"))
    
    await callback.message.edit_text(
        "üîÑ **–°–±—Ä–æ—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
        "‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Ä–∞–∑–æ—Ä–≤–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è.\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("confirm_reset_connections:"), AuthFilter())
async def confirm_reset_connections(callback: types.CallbackQuery, state: FSMContext):
    """Confirm connection reset"""
    await callback.answer()
    
    user_uuid = callback.data.split(":", 1)[1]
    
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ API (–º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è)
        # –í —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞, –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = await users_api.update_user(user_uuid, {"status": "ACTIVE"})
        
        if success:
            await callback.message.edit_text(
                "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–±—Ä–æ—à–µ–Ω—ã",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º", callback_data=f"user_devices:{user_uuid}")
                ]])
            )
        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"user_devices:{user_uuid}")
                ]])
            )
            
    except Exception as e:
        logger.error(f"Error resetting connections: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"user_devices:{user_uuid}")
            ]])
        )

# ================ ADDITIONAL STATISTICS ================

@router.callback_query(F.data == "stats_by_nodes", AuthFilter())
async def show_stats_by_nodes(callback: types.CallbackQuery):
    """Show detailed statistics by nodes"""
    await callback.answer()
    
    try:
        users_list = await users_api.get_all_users()
        nodes_list = await nodes_api.get_all_nodes()
        
        stats_text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–æ–¥–∞–º**\n\n"
        
        for node in nodes_list:
            node_uuid = node.get('uuid')
            node_name = node.get('name', 'Unknown')
            is_connected = node.get('isConnected', False)
            
            # Filter users for this node
            node_users = [user for user in users_list if user.get('nodeUuid') == node_uuid]
            
            status_emoji = "üü¢" if is_connected else "üî¥"
            total_users = len(node_users)
            active_users = sum(1 for user in node_users if user.get('status') == 'ACTIVE')
            
            total_traffic = sum(user.get('usedTraffic', 0) or 0 for user in node_users)
            
            stats_text += f"{status_emoji} **{escape_markdown(node_name)}**\n"
            stats_text += f"  üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {active_users})\n"
            stats_text += f"  üíæ –¢—Ä–∞—Ñ–∏–∫: {format_bytes(total_traffic)}\n"
            stats_text += f"  üåê –ê–¥—Ä–µ—Å: {node.get('address', 'N/A')}:{node.get('port', 'N/A')}\n\n"
        
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="stats_by_nodes"))
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="users_extended_stats"))
        
        await callback.message.edit_text(
            stats_text,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error showing stats by nodes: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –Ω–æ–¥–∞–º",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="users_extended_stats")
            ]])
        )

@router.callback_query(F.data == "stats_by_period", AuthFilter())
async def show_stats_by_period(callback: types.CallbackQuery):
    """Show statistics by time periods"""
    await callback.answer()
    
    try:
        users_list = await users_api.get_all_users()
        
        now = datetime.now()
        day_ago = now - timedelta(days=1)
        week_ago = now - timedelta(days=7)
        month_ago = now - timedelta(days=30)
        
        # Count new users by periods
        new_today = 0
        new_week = 0
        new_month = 0
        
        for user in users_list:
            created_at = user.get('createdAt')
            if created_at:
                try:
                    created_date = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                    if created_date > day_ago:
                        new_today += 1
                    if created_date > week_ago:
                        new_week += 1
                    if created_date > month_ago:
                        new_month += 1
                except Exception:
                    pass
        
        # Traffic analysis by periods
        stats_text = "üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º**\n\n"
        
        stats_text += "**üë• –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
        stats_text += f"‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {new_today}\n"
        stats_text += f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {new_week}\n"
        stats_text += f"‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {new_month}\n\n"
        
        # Activity analysis
        total_users = len(users_list)
        active_users = sum(1 for user in users_list if user.get('status') == 'ACTIVE')
        
        stats_text += "**üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n"
        stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        stats_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}\n"
        if total_users > 0:
            activity_rate = (active_users / total_users) * 100
            stats_text += f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activity_rate:.1f}%\n"
        
        # Traffic statistics
        total_traffic = sum(user.get('usedTraffic', 0) or 0 for user in users_list)
        avg_traffic = total_traffic / total_users if total_users > 0 else 0
        
        stats_text += f"\n**üíæ –¢—Ä–∞—Ñ–∏–∫:**\n"
        stats_text += f"‚Ä¢ –û–±—â–∏–π: {format_bytes(total_traffic)}\n"
        stats_text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {format_bytes(avg_traffic)}\n"
        
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="stats_by_period"))
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="users_extended_stats"))
        
        await callback.message.edit_text(
            stats_text,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error showing stats by period: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="users_extended_stats")
            ]])
        )

# ================ EXPORT FUNCTIONALITY ================

@router.callback_query(F.data == "export_users", AuthFilter())
async def export_users_menu(callback: types.CallbackQuery):
    """Show export options"""
    await callback.answer()
    
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="üìÑ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="export_all_users"))
    builder.row(types.InlineKeyboardButton(text="üü¢ –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ", callback_data="export_active_users"))
    builder.row(types.InlineKeyboardButton(text="‚ö†Ô∏è –ò—Å—Ç–µ–∫–∞—é—â–∏–µ", callback_data="export_expiring_users"))
    builder.row(types.InlineKeyboardButton(text="‚ùå –ò—Å—Ç–µ–∫—à–∏–µ", callback_data="export_expired_users"))
    builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="users"))
    
    await callback.message.edit_text(
        "üì§ **–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("export_"), AuthFilter())
async def handle_export(callback: types.CallbackQuery):
    """Handle export requests"""
    await callback.answer()
    
    export_type = callback.data.replace("export_", "")
    
    try:
        users_list = await users_api.get_all_users()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç–∏–ø—É —ç–∫—Å–ø–æ—Ä—Ç–∞
        if export_type == "active_users":
            filtered_users = [user for user in users_list if user.get('status') == 'ACTIVE']
            title = "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
        elif export_type == "expiring_users":
            now = datetime.now()
            week_later = now + timedelta(days=7)
            filtered_users = []
            for user in users_list:
                expire_at = user.get('expireAt')
                if expire_at:
                    try:
                        expire_date = datetime.fromisoformat(expire_at.replace('Z', '+00:00'))
                        if now < expire_date < week_later:
                            filtered_users.append(user)
                    except Exception:
                        pass
            title = "–ò—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
        elif export_type == "expired_users":
            now = datetime.now()
            filtered_users = []
            for user in users_list:
                expire_at = user.get('expireAt')
                if expire_at:
                    try:
                        expire_date = datetime.fromisoformat(expire_at.replace('Z', '+00:00'))
                        if expire_date < now:
                            filtered_users.append(user)
                    except Exception:
                        pass
            title = "–ò—Å—Ç–µ–∫—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
        else:  # all_users
            filtered_users = users_list
            title = "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç
        export_text = f"üìä **{title}** (–í—Å–µ–≥–æ: {len(filtered_users)})\n\n"
        
        for i, user in enumerate(filtered_users[:50], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 50 –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞
            username = user.get('username', 'Unknown')
            status = user.get('status', 'Unknown')
            used_traffic = format_bytes(user.get('usedTraffic', 0) or 0)
            expire_at = user.get('expireAt', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            if expire_at and expire_at != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                expire_at = expire_at[:19].replace('T', ' ')
            
            status_emoji = "üü¢" if status == 'ACTIVE' else "üî¥"
            
            export_text += f"{i}. {status_emoji} **{escape_markdown(username)}**\n"
            export_text += f"   –¢—Ä–∞—Ñ–∏–∫: {used_traffic} | –ò—Å—Ç–µ–∫–∞–µ—Ç: {expire_at}\n\n"
        
        if len(filtered_users) > 50:
            export_text += f"... –∏ –µ—â–µ {len(filtered_users) - 50} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
            export_text += f"üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
        
        await callback.message.edit_text(
            export_text,
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="export_users")
            ]])
        )
        
    except Exception as e:
        logger.error(f"Error exporting users: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="export_users")
            ]])
        )

# ================ MASS USER OPERATIONS ================

@router.callback_query(F.data == "mass_operations", AuthFilter())
async def show_mass_operations(callback: types.CallbackQuery):
    """Show mass operations menu"""
    await callback.answer()
    
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="üîÑ –ú–∞—Å—Å–æ–≤–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ", callback_data="mass_extend_menu"))
    builder.row(types.InlineKeyboardButton(text="‚è∏Ô∏è –ú–∞—Å—Å–æ–≤–∞—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è", callback_data="mass_deactivate_menu"))
    builder.row(types.InlineKeyboardButton(text="‚ñ∂Ô∏è –ú–∞—Å—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è", callback_data="mass_activate_menu"))
    builder.row(types.InlineKeyboardButton(text="üóëÔ∏è –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ", callback_data="mass_delete_menu"))
    builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="users"))
    
    await callback.message.edit_text(
        "‚öôÔ∏è **–ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏**\n\n"
        "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!** –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–ª–∏—è—é—Ç –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ\\.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data == "mass_extend_menu", AuthFilter())
async def mass_extend_menu(callback: types.CallbackQuery):
    """Show mass extend menu"""
    await callback.answer()
    
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="‚ö†Ô∏è –ò—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="extend_all_expiring"))
    builder.row(types.InlineKeyboardButton(text="‚ùå –ò—Å—Ç–µ–∫—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="extend_all_expired"))
    builder.row(types.InlineKeyboardButton(text="üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="extend_all_active"))
    builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="mass_operations"))
    
    await callback.message.edit_text(
        "üîÑ **–ú–∞—Å—Å–æ–≤–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("mass_"), AuthFilter())
async def handle_mass_operation_placeholder(callback: types.CallbackQuery):
    """Placeholder for mass operations"""
    await callback.answer()
    
    operation = callback.data.replace("mass_", "").replace("_menu", "")
    
    await callback.message.edit_text(
        f"‚öôÔ∏è **–ú–∞—Å—Å–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {operation}**\n\n"
        f"üîß –§—É–Ω–∫—Ü–∏—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n"
        f"–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è:\n"
        f"‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        f"‚Ä¢ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä\n"
        f"‚Ä¢ –ü–∞–∫–µ—Ç–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ\n"
        f"‚Ä¢ –û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="mass_operations")
        ]])
    )

# ================ USER HISTORY AND LOGS ================

@router.callback_query(F.data.startswith("user_history:"), AuthFilter())
async def show_user_history(callback: types.CallbackQuery):
    """Show user activity history"""
    await callback.answer()
    
    user_uuid = callback.data.split(":", 1)[1]
    
    try:
        user = await users_api.get_user_by_uuid(user_uuid)
        if not user:
            await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        username = user.get('username', 'Unknown')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        history_text = f"üìã **–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {escape_markdown(username)}**\n\n"
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        created_at = user.get('createdAt')
        updated_at = user.get('updatedAt')
        expire_at = user.get('expireAt')
        last_online = user.get('lastOnline')
        
        history_text += "**üìÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ª–∏–Ω–∏—è:**\n"
        if created_at:
            history_text += f"‚Ä¢ –°–æ–∑–¥–∞–Ω: {created_at[:19].replace('T', ' ')}\n"
        if updated_at:
            history_text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {updated_at[:19].replace('T', ' ')}\n"
        if last_online:
            history_text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_online[:19].replace('T', ' ')}\n"
        if expire_at:
            history_text += f"‚Ä¢ –ò—Å—Ç–µ–∫–∞–µ—Ç: {expire_at[:19].replace('T', ' ')}\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        history_text += f"\n**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**\n"
        history_text += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç—Ä–∞—Ñ–∏–∫–∞: {format_bytes(user.get('usedTraffic', 0) or 0)}\n"
        history_text += f"‚Ä¢ –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {user.get('status', 'Unknown')}\n"
        
        if user.get('trafficLimit'):
            limit = user.get('trafficLimit')
            used = user.get('usedTraffic', 0) or 0
            percentage = (used / limit * 100) if limit > 0 else 0
            history_text += f"‚Ä¢ –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: {format_bytes(limit)}\n"
            history_text += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {percentage:.1f}%\n"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if user.get('telegramId'):
            history_text += f"‚Ä¢ Telegram ID: {user.get('telegramId')}\n"
        
        if user.get('description'):
            history_text += f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {user.get('description')}\n"
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if created_at:
            try:
                created_date = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                days_active = (datetime.now() - created_date).days
                history_text += f"‚Ä¢ –î–Ω–µ–π —Å —Å–æ–∑–¥–∞–Ω–∏—è: {days_active}\n"
            except Exception:
                pass
        
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"user_history:{user_uuid}"))
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"refresh_user:{user_uuid}"))
        
        await callback.message.edit_text(
            history_text,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error showing user history: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"refresh_user:{user_uuid}")
            ]])
        )


# ================ FINAL ROUTER CONFIGURATION ================

# –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def show_user_details_extended(message: types.Message, user: dict, state: FSMContext):
    """Extended version of show_user_details with more options"""
    try:
        user_details = format_user_details(user)
        
        builder = InlineKeyboardBuilder()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        builder.row(types.InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_user:{user.get('uuid')}"))
        builder.row(types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data=f"refresh_user:{user.get('uuid')}"))
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–º
        if user.get('status') == 'ACTIVE':
            builder.row(types.InlineKeyboardButton(text="‚è∏Ô∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"deactivate_user:{user.get('uuid')}"))
        else:
            builder.row(types.InlineKeyboardButton(text="‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"activate_user:{user.get('uuid')}"))
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–æ–º
        builder.row(types.InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫", callback_data=f"reset_traffic:{user.get('uuid')}"))
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        builder.row(
            types.InlineKeyboardButton(text="üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", callback_data=f"user_devices:{user.get('uuid')}"),
            types.InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"user_history:{user.get('uuid')}")
        )
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        builder.row(types.InlineKeyboardButton(text="üîó –ü–æ–¥–ø–∏—Å–∫–∞", callback_data=f"subscription:{user.get('uuid')}"))
        
        # –û–ø–∞—Å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        builder.row(types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_user:{user.get('uuid')}"))
        
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="list_users"))
        
        await message.edit_text(
            text=user_details,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error showing extended user details: {e}")
        await message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="list_users")
            ]])
        )

@router.callback_query(F.data == "expiring_users", AuthFilter())
async def show_expiring_users(callback: types.CallbackQuery, state: FSMContext):
    """Show users expiring soon"""
    await callback.answer()
    
    try:
        users_list = await users_api.get_all_users()
        
        now = datetime.now()
        week_later = now + timedelta(days=7)
        
        expiring_users = []
        for user in users_list:
            expire_at = user.get('expireAt')
            if expire_at:
                try:
                    expire_date = datetime.fromisoformat(expire_at.replace('Z', '+00:00'))
                    if now < expire_date < week_later:
                        expiring_users.append(user)
                except Exception:
                    pass
        
        if not expiring_users:
            await callback.message.edit_text(
                "‚è∞ **–ò—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏**\n\n"
                "‚úÖ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –≤ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="users_extended_stats")
                ]])
            )
            return
        
        # Store expiring users in state
        await state.update_data(users=expiring_users, page=0)
        await state.set_state(UserStates.selecting_user)
        
        message_text = f"‚è∞ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ ({len(expiring_users)})**\n\n"
        
        for user in expiring_users[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            expire_at = user.get('expireAt')
            expire_date = datetime.fromisoformat(expire_at.replace('Z', '+00:00'))
            days_left = (expire_date - now).days
            
            status_emoji = "üü¢" if user.get('status') == 'ACTIVE' else "üî¥"
            urgency_emoji = "üî•" if days_left <= 3 else "‚ö†Ô∏è" if days_left <= 5 else "‚è∞"
            
            username = user.get('username', 'Unknown')
            used_traffic = user.get('usedTraffic', 0) or 0
            
            message_text += f"{status_emoji}{urgency_emoji} **{escape_markdown(username)}**\n"
            message_text += f"  üìÖ –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω. ({expire_date.strftime('%Y-%m-%d')})\n"
            message_text += f"  üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {format_bytes(used_traffic)}\n\n"
        
        if len(expiring_users) > 10:
            message_text += f"... –∏ –µ—â–µ {len(expiring_users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(text="üìù –°–ø–∏—Å–æ–∫ –ø–æ–ª–Ω—ã–π", callback_data="list_users"),
            types.InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –≤—Å–µ—Ö", callback_data="extend_all_expiring")
        )
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="users_extended_stats"))
        
        await callback.message.edit_text(
            text=message_text,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error showing expiring users: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="users_extended_stats")
            ]])
        )

# –í –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞ —É–±—Ä–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
# –û—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:
show_user_details = show_user_details_extended

# ================ UPDATE USER DETAILS TO INCLUDE SUBSCRIPTION OPTIONS ================

async def show_user_details_with_subscription(message: types.Message, user: dict, state: FSMContext):
    """Enhanced user details with subscription management options"""
    try:
        user_details = format_user_details(user)
        
        builder = InlineKeyboardBuilder()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        builder.row(types.InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_user:{user.get('uuid')}"))
        builder.row(types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data=f"refresh_user:{user.get('uuid')}"))
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–º
        if user.get('status') == 'ACTIVE':
            builder.row(types.InlineKeyboardButton(text="‚è∏Ô∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"deactivate_user:{user.get('uuid')}"))
        else:
            builder.row(types.InlineKeyboardButton(text="‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"activate_user:{user.get('uuid')}"))
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–æ–º
        builder.row(types.InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫", callback_data=f"reset_traffic:{user.get('uuid')}"))
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        builder.row(
            types.InlineKeyboardButton(text="üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", callback_data=f"user_devices:{user.get('uuid')}"),
            types.InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"user_history:{user.get('uuid')}")
        )
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ - –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –†–ê–ó–î–ï–õ
        builder.row(
            types.InlineKeyboardButton(text="üîó –ü–æ–¥–ø–∏—Å–∫–∞", callback_data=f"subscription:{user.get('uuid')}"),
            types.InlineKeyboardButton(text="üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", callback_data=f"subscription_configs:{user.get('uuid')}")
        )
        
        # –û–ø–∞—Å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        builder.row(types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_user:{user.get('uuid')}"))
        
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="list_users"))
        
        await message.edit_text(
            text=user_details,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error showing user details with subscription: {e}")
        await message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="list_users")
            ]])
        )

# –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –Ω–æ–≤—É—é
show_user_details = show_user_details_with_subscription

logger.info("User handlers module loaded successfully (with enhanced subscription support)")