from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from modules.config import MAIN_MENU
from modules.utils.auth import check_admin
from modules.api.users import UserAPI
from modules.api.nodes import NodeAPI
from modules.api.inbounds import InboundAPI
import logging

logger = logging.getLogger(__name__)

@check_admin
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start command handler"""
    await show_main_menu(update, context)
    return MAIN_MENU

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show main menu with system statistics"""
    keyboard = [
        [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="users")],
        [InlineKeyboardButton("üñ•Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏", callback_data="nodes")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã", callback_data="stats")],
        [InlineKeyboardButton("üåê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö–æ—Å—Ç–∞–º–∏", callback_data="hosts")],
        [InlineKeyboardButton("üîå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Inbounds", callback_data="inbounds")],
        [InlineKeyboardButton("üîÑ –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data="bulk")],
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="create_user")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
    stats_text = await get_system_stats()
    
    message = "üéõÔ∏è *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Remnawave Admin*\n\n"
    message += stats_text + "\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"

    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

async def get_system_stats():
    """Get basic system statistics"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_response = await UserAPI.get_all_users()
        users_count = 0
        active_users = 0
        if users_response:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
            users = []
            if isinstance(users_response, dict):
                if 'users' in users_response:
                    users = users_response['users']
                elif 'response' in users_response and 'users' in users_response['response']:
                    users = users_response['response']['users']
            elif isinstance(users_response, list):
                users = users_response
            
            users_count = len(users)
            active_users = sum(1 for user in users if user.get('status') == 'ACTIVE')

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–∑–ª–æ–≤
        nodes_response = await NodeAPI.get_all_nodes()
        nodes_count = 0
        online_nodes = 0
        if nodes_response:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
            nodes = []
            if isinstance(nodes_response, dict):
                if 'nodes' in nodes_response:
                    nodes = nodes_response['nodes']
                elif 'response' in nodes_response and 'nodes' in nodes_response['response']:
                    nodes = nodes_response['response']['nodes']
            elif isinstance(nodes_response, list):
                nodes = nodes_response
            
            nodes_count = len(nodes)
            online_nodes = sum(1 for node in nodes if node.get('isConnected'))

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É inbound'–æ–≤
        inbounds_response = await InboundAPI.get_all_inbounds()
        inbounds_count = 0
        if inbounds_response:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
            inbounds = []
            if isinstance(inbounds_response, dict):
                if 'inbounds' in inbounds_response:
                    inbounds = inbounds_response['inbounds']
                elif 'response' in inbounds_response and 'inbounds' in inbounds_response['response']:
                    inbounds = inbounds_response['response']['inbounds']
            elif isinstance(inbounds_response, list):
                inbounds = inbounds_response
            
            inbounds_count = len(inbounds)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = f"üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:*\n"
        stats += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {active_users}/{users_count}\n"
        stats += f"üñ•Ô∏è –£–∑–ª—ã: {online_nodes}/{nodes_count} –æ–Ω–ª–∞–π–Ω\n"
        stats += f"üîå Inbound'—ã: {inbounds_count} —à—Ç.\n"
        
        return stats
        
    except Exception as e:
        logger.error(f"Error getting system stats: {e}")
        return "üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞*\n"
