"""
–ú–æ–¥—É–ª—å —Å –ø—Ä–µ—Å–µ—Ç–∞–º–∏ (—à–∞–±–ª–æ–Ω–∞–º–∏) –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
–ö–∞–∂–¥—ã–π –ø—Ä–µ—Å–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
"""
from typing import Dict, Any, List
from datetime import datetime, timedelta

# –ü—Ä–µ—Å–µ—Ç—ã –¥–ª—è –ª–∏–º–∏—Ç–æ–≤ —Ç—Ä–∞—Ñ–∏–∫–∞ (–≤ –±–∞–π—Ç–∞—Ö)
TRAFFIC_LIMIT_PRESETS = {
    "50 –ì–ë": 50 * 1024 * 1024 * 1024,
    "100 –ì–ë": 100 * 1024 * 1024 * 1024,
    "200 –ì–ë": 200 * 1024 * 1024 * 1024,
    "400 –ì–ë": 400 * 1024 * 1024 * 1024,
    "600 –ì–ë": 600 * 1024 * 1024 * 1024,
    "800 –ì–ë": 800 * 1024 * 1024 * 1024,
    "1 –¢–ë": 1024 * 1024 * 1024 * 1024,
    "2 –¢–ë": 2 * 1024 * 1024 * 1024 * 1024,
    "5 –¢–ë": 5 * 1024 * 1024 * 1024 * 1024,
    "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π": 0
}

# –ü—Ä–µ—Å–µ—Ç—ã –¥–ª—è –ª–∏–º–∏—Ç–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
DEVICE_LIMIT_PRESETS = {
    "1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ": 1,
    "2 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞": 2,
    "3 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞": 3,
    "4 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞": 4,
    "5 —É—Å—Ç—Ä–æ–π—Å—Ç–≤": 5,
    "10 —É—Å—Ç—Ä–æ–π—Å—Ç–≤": 10,
    "–ë–µ–∑ –ª–∏–º–∏—Ç–∞": 0
}

# –ü—Ä–µ—Å–µ—Ç—ã –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
DESCRIPTION_PRESETS = [
    "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
    "VIP-–∫–ª–∏–µ–Ω—Ç",
    "–¢–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç",
    "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç",
    "–î–µ–º–æ-–∞–∫–∫–∞—É–Ω—Ç"
]

# –ü–æ–ª–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã)
USER_TEMPLATES: Dict[str, Dict[str, Any]] = {
    "ü•â –ë–∞–∑–æ–≤—ã–π": {
        "display_name": "ü•â –ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ",
        "description": "–ë–∞–∑–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å VPN",
        "trafficLimitBytes": 100 * 1024 * 1024 * 1024,  # 100 –ì–ë
        "hwidDeviceLimit": 1,
        "trafficLimitStrategy": "MONTH",
        "resetDay": 1
    },
    "ü•à –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π": {
        "display_name": "ü•à –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ",
        "description": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å VPN",
        "trafficLimitBytes": 300 * 1024 * 1024 * 1024,  # 300 –ì–ë
        "hwidDeviceLimit": 3,
        "trafficLimitStrategy": "MONTH",
        "resetDay": 1
    },
    "ü•á –ü—Ä–µ–º–∏—É–º": {
        "display_name": "ü•á –ü—Ä–µ–º–∏—É–º —Ç–∞—Ä–∏—Ñ",
        "description": "–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å VPN",
        "trafficLimitBytes": 800 * 1024 * 1024 * 1024,  # 800 –ì–ë
        "hwidDeviceLimit": 5,
        "trafficLimitStrategy": "MONTH",
        "resetDay": 1
    },
    "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º–µ–π–Ω—ã–π": {
        "display_name": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º–µ–π–Ω—ã–π —Ç–∞—Ä–∏—Ñ",
        "description": "–°–µ–º–µ–π–Ω—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω",
        "trafficLimitBytes": 1536 * 1024 * 1024 * 1024,  # 1.5 –¢–ë
        "hwidDeviceLimit": 10,
        "trafficLimitStrategy": "MONTH",
        "resetDay": 1
    },
    "üè¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π": {
        "display_name": "üè¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ç–∞—Ä–∏—Ñ",
        "description": "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω",
        "trafficLimitBytes": 0,  # –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π
        "hwidDeviceLimit": 0,  # –ë–µ–∑ –ª–∏–º–∏—Ç–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        "trafficLimitStrategy": "NO_RESET",
        "resetDay": 1
    },
    "üß™ –¢–µ—Å—Ç–æ–≤—ã–π": {
        "display_name": "üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç",
        "description": "–¢–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç",
        "trafficLimitBytes": 10 * 1024 * 1024 * 1024,  # 10 –ì–ë
        "hwidDeviceLimit": 1,
        "trafficLimitStrategy": "WEEK",
        "resetDay": 1
    },
    "üíé VIP": {
        "display_name": "üíé VIP —Ç–∞—Ä–∏—Ñ",
        "description": "VIP –∫–ª–∏–µ–Ω—Ç",
        "trafficLimitBytes": 0,  # –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π
        "hwidDeviceLimit": 15,
        "trafficLimitStrategy": "NO_RESET",
        "resetDay": 1
    }
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏
def get_template_names() -> List[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤."""
    return list(USER_TEMPLATES.keys())

def get_template_display_names() -> List[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –∏–º–µ–Ω —à–∞–±–ª–æ–Ω–æ–≤."""
    return [template["display_name"] for template in USER_TEMPLATES.values()]

def get_template_by_name(name: str) -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —à–∞–±–ª–æ–Ω –ø–æ –µ–≥–æ –∫–ª—é—á—É."""
    return USER_TEMPLATES.get(name, {}).copy()

def get_template_by_display_name(display_name: str) -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —à–∞–±–ª–æ–Ω –ø–æ –µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–º—É –∏–º–µ–Ω–∏."""
    for template in USER_TEMPLATES.values():
        if template["display_name"] == display_name:
            return template.copy()
    return {}

def apply_template_to_user_data(user_data: Dict[str, Any], template_name: str) -> Dict[str, Any]:
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω –∫ –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–ª—è—è –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
    template = get_template_by_name(template_name)
    if not template:
        return user_data
    
    # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —à–∞–±–ª–æ–Ω–∞
    result = user_data.copy()
    for key, value in template.items():
        if key != "display_name":  # –ù–µ –∫–æ–ø–∏—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω–æ–µ –ø–æ–ª–µ
            result[key] = value
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (30 –¥–Ω–µ–π), –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
    if "expireAt" not in result:
        result["expireAt"] = (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%dT00:00:00.000Z")
    
    return result

def format_template_info(template_name: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–±–ª–æ–Ω–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    template = get_template_by_name(template_name)
    if not template:
        return "–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    from modules.utils.formatters import format_bytes
    
    info = f"*{template['display_name']}*\n\n"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç—Ä–∞—Ñ–∏–∫
    traffic = template.get("trafficLimitBytes", 0)
    if traffic == 0:
        traffic_str = "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π"
    else:
        traffic_str = format_bytes(traffic)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    devices = template.get("hwidDeviceLimit", 0)
    if devices == 0:
        devices_str = "–ë–µ–∑ –ª–∏–º–∏—Ç–∞"
    elif devices == 1:
        devices_str = "1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"
    elif devices in [2, 3, 4]:
        devices_str = f"{devices} —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
    else:
        devices_str = f"{devices} —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å–±—Ä–æ—Å–∞
    strategy = template.get("trafficLimitStrategy", "NO_RESET")
    strategy_map = {
        "NO_RESET": "–ë–µ–∑ —Å–±—Ä–æ—Å–∞",
        "DAY": "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ",
        "WEEK": "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", 
        "MONTH": "–ï–∂–µ–º–µ—Å—è—á–Ω–æ"
    }
    strategy_str = strategy_map.get(strategy, strategy)
    
    info += f"üìà –¢—Ä–∞—Ñ–∏–∫: {traffic_str}\n"
    info += f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {devices_str}\n"
    info += f"üîÑ –°–±—Ä–æ—Å —Ç—Ä–∞—Ñ–∏–∫–∞: {strategy_str}\n"
    info += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {template.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
    
    return info
