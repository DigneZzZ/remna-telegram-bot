#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π Remnawave Telegram Bot

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
2. –ó–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
3. –ù–æ–≤—ã–µ API –º–µ—Ç–æ–¥—ã
4. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        from modules.config import (
            DASHBOARD_SHOW_SYSTEM_STATS, DASHBOARD_SHOW_SERVER_INFO,
            DASHBOARD_SHOW_USERS_COUNT, DASHBOARD_SHOW_NODES_COUNT,
            DASHBOARD_SHOW_TRAFFIC_STATS, DASHBOARD_SHOW_UPTIME,
            ENABLE_PARTIAL_SEARCH, SEARCH_MIN_LENGTH
        )
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –¢–µ—Å—Ç –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤ API
        from modules.api.users import UserAPI
        print("‚úÖ UserAPI –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        if hasattr(UserAPI, 'search_users_by_partial_name'):
            print("‚úÖ –ú–µ—Ç–æ–¥ search_users_by_partial_name –Ω–∞–π–¥–µ–Ω")
        else:
            print("‚ùå –ú–µ—Ç–æ–¥ search_users_by_partial_name –ù–ï –Ω–∞–π–¥–µ–Ω")
            
        if hasattr(UserAPI, 'search_users_by_description'):
            print("‚úÖ –ú–µ—Ç–æ–¥ search_users_by_description –Ω–∞–π–¥–µ–Ω")
        else:
            print("‚ùå –ú–µ—Ç–æ–¥ search_users_by_description –ù–ï –Ω–∞–π–¥–µ–Ω")
        
        # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–æ–≤
        from modules.utils.formatters import escape_markdown
        print("‚úÖ –§–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –¢–µ—Å—Ç escape_markdown —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
        test_text = "–¢–µ—Å—Ç_—Å–∏–º–≤–æ–ª—ã*—Ä–∞–∑–º–µ—Ç–∫–∏[—Å—Å—ã–ª–∫–∞](url)`–∫–æ–¥`"
        escaped = escape_markdown(test_text)
        print(f"‚úÖ –¢–µ—Å—Ç escape_markdown: '{test_text}' -> '{escaped}'")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def test_config():
    """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        from modules.config import (
            DASHBOARD_SHOW_SYSTEM_STATS, ENABLE_PARTIAL_SEARCH, SEARCH_MIN_LENGTH
        )
        
        print(f"üìä DASHBOARD_SHOW_SYSTEM_STATS: {DASHBOARD_SHOW_SYSTEM_STATS}")
        print(f"üîç ENABLE_PARTIAL_SEARCH: {ENABLE_PARTIAL_SEARCH}")
        print(f"üìè SEARCH_MIN_LENGTH: {SEARCH_MIN_LENGTH}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–∏–ø—ã
        assert isinstance(DASHBOARD_SHOW_SYSTEM_STATS, bool), "DASHBOARD_SHOW_SYSTEM_STATS –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å bool"
        assert isinstance(ENABLE_PARTIAL_SEARCH, bool), "ENABLE_PARTIAL_SEARCH –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å bool"
        assert isinstance(SEARCH_MIN_LENGTH, int), "SEARCH_MIN_LENGTH –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å int"
        
        print("‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_markdown_formatting():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown...")
    
    try:
        from modules.utils.formatters import escape_markdown
        
        test_cases = [
            ("Normal text", "Normal text"),
            ("Text with * asterisk", "Text with \\* asterisk"),
            ("Text with _ underscore", "Text with \\_ underscore"),
            ("Text with [link](url)", "Text with \\[link\\]\\(url\\)"),
            ("Text with `code`", "Text with \\`code\\`"),
            ("Mixed *test* _case_ [link](url)", "Mixed \\*test\\* \\_case\\_ \\[link\\]\\(url\\)"),
        ]
        
        for original, expected in test_cases:
            result = escape_markdown(original)
            if result == expected:
                print(f"‚úÖ '{original}' -> '{result}'")
            else:
                print(f"‚ùå '{original}' -> '{result}' (–æ–∂–∏–¥–∞–ª–æ—Å—å: '{expected}')")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π Remnawave Telegram Bot\n")
    
    tests = [
        test_imports,
        test_config, 
        test_markdown_formatting
    ]
    
    results = []
    for test in tests:
        try:
            result = test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
            results.append(False)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {sum(results)}/{len(results)}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(results) - sum(results)}/{len(results)}")
    
    if all(results):
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        return 0
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        return 1

if __name__ == "__main__":
    exit(main())
