from aiogram import Router, types, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, timedelta
import logging
import re

from modules.handlers.auth import AuthFilter
from modules.handlers.states import NodeStates
from modules.api.client import RemnaAPI
from modules.api.nodes import get_all_nodes, get_node_by_uuid
from modules.api.users import get_all_users
from modules.api.system import SystemAPI
from modules.utils.formatters_aiogram import (
    format_bytes, format_datetime, escape_markdown
)

logger = logging.getLogger(__name__)

router = Router()

# ================ UTILITY FUNCTIONS ================

def format_node_details(node: dict) -> str:
    """Format node details for display"""
    try:
        name = escape_markdown(node.get('name', 'Unknown'))
        uuid = node.get('uuid', 'N/A')
        address = escape_markdown(node.get('address', 'Unknown'))
        port = node.get('port', 'N/A')
        
        # Status information
        is_connected = node.get('isConnected', False)
        is_disabled = node.get('isDisabled', False)
        
        status_emoji = "üü¢" if is_connected else "üî¥"
        connection_status = "–ü–æ–¥–∫–ª—é—á–µ–Ω" if is_connected else "–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
        
        disabled_status = ""
        if is_disabled:
            disabled_status = " (‚è∏Ô∏è –û—Ç–∫–ª—é—á–µ–Ω)"
        
        # Build details text
        details = f"üñ•Ô∏è **–°–µ—Ä–≤–µ—Ä: {name}**{disabled_status}\n\n"
        details += f"**üìä –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
        details += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {status_emoji} {connection_status}\n"
        details += f"‚Ä¢ UUID: `{uuid}`\n"
        details += f"‚Ä¢ –ê–¥—Ä–µ—Å: `{address}:{port}`\n"
        
        # Country information
        if node.get('countryCode'):
            details += f"‚Ä¢ –°—Ç—Ä–∞–Ω–∞: {node.get('countryCode')}\n"
        
        # Traffic information
        if node.get('isTrafficTrackingActive'):
            details += f"\n**üìà –¢—Ä–∞—Ñ–∏–∫:**\n"
            details += f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: ‚úÖ –í–∫–ª—é—á–µ–Ω–æ\n"
            
            if node.get('trafficLimitBytes'):
                limit = node.get('trafficLimitBytes')
                used = node.get('trafficUsedBytes', 0)
                details += f"‚Ä¢ –õ–∏–º–∏—Ç: {format_bytes(limit)}\n"
                details += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {format_bytes(used)}\n"
                
                if limit > 0:
                    percentage = (used / limit) * 100
                    details += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {percentage:.1f}%\n"
            else:
                details += f"‚Ä¢ –õ–∏–º–∏—Ç: –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π\n"
        else:
            details += f"\n**üìà –¢—Ä–∞—Ñ–∏–∫:** –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ\n"
        
        # Version and timing information
        details += f"\n**üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
        
        if node.get('version'):
            details += f"‚Ä¢ –í–µ—Ä—Å–∏—è: {escape_markdown(node.get('version'))}\n"
        
        if node.get('createdAt'):
            details += f"‚Ä¢ –°–æ–∑–¥–∞–Ω: {format_datetime(node.get('createdAt'))}\n"
        
        if node.get('lastSeen'):
            details += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤—è–∑—å: {format_datetime(node.get('lastSeen'))}\n"
        
        if node.get('uptime'):
            uptime_str = format_uptime(node.get('uptime'))
            details += f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_str}\n"
        
        return details
        
    except Exception as e:
        logger.error(f"Error formatting node details: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞: {e}"

def format_uptime(uptime_seconds: int) -> str:
    """Format uptime in human readable format"""
    try:
        if isinstance(uptime_seconds, str):
            uptime_seconds = int(uptime_seconds)
            
        days = uptime_seconds // 86400
        hours = (uptime_seconds % 86400) // 3600
        minutes = (uptime_seconds % 3600) // 60
        
        if days > 0:
            return f"{days}–¥ {hours}—á {minutes}–º"
        elif hours > 0:
            return f"{hours}—á {minutes}–º"
        else:
            return f"{minutes}–º"
    except Exception:
        return str(uptime_seconds)

# ================ MAIN NODES MENU ================

@router.callback_query(F.data == "nodes", AuthFilter())
async def handle_nodes_menu(callback: types.CallbackQuery, state: FSMContext):
    """Handle nodes menu selection"""
    await state.clear()
    await show_nodes_menu(callback)

async def show_nodes_menu(callback: types.CallbackQuery):
    """Show nodes menu"""
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data="list_nodes"))
    builder.row(types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä", callback_data="add_node"))
    builder.row(types.InlineKeyboardButton(text="üìú –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–∞–Ω–µ–ª–∏", callback_data="get_panel_certificate"))
    builder.row(
        types.InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="restart_all_nodes"),
        types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="nodes_usage")
    )
    builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))

    message = "üñ•Ô∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏**\n\n"
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±—ã—Å—Ç—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø—Ä–µ–≤—å—é —á–µ—Ä–µ–∑ HTTP API
        nodes_list = await get_all_nodes()
        
        if nodes_list:
            total_nodes = len(nodes_list)
            online_nodes = sum(1 for node in nodes_list if node.get('isConnected', False))
            offline_nodes = total_nodes - online_nodes
            
            message += f"**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤:**\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ: {total_nodes}\n"
            message += f"‚Ä¢ –û–Ω–ª–∞–π–Ω: {online_nodes}\n"
            message += f"‚Ä¢ –û—Ñ–ª–∞–π–Ω: {offline_nodes}\n\n"
        else:
            message += "**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:** –°–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n"
    except Exception as e:
        logger.error(f"Error getting nodes stats: {e}")
        message += "**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:** –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n\n"
    
    message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    await callback.answer()
    await callback.message.edit_text(
        text=message,
        reply_markup=builder.as_markup()
    )

# ================ LIST NODES ================

@router.callback_query(F.data == "list_nodes", AuthFilter())
async def list_nodes(callback: types.CallbackQuery, state: FSMContext):
    """List all nodes"""
    await callback.answer()
    await callback.message.edit_text("üñ•Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ–¥—ã —á–µ—Ä–µ–∑ HTTP API
        nodes_list = await get_all_nodes()
        
        if not nodes_list:
            await callback.message.edit_text(
                "‚ùå –°–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞.",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="nodes")
                ]])
            )
            return
        
        # Store nodes data in state
        await state.update_data(nodes=nodes_list, page=0)
        await state.set_state(NodeStates.selecting_node)
        
        # Count online/offline nodes
        online_count = sum(1 for node in nodes_list if node.get('isConnected', False))
        total_count = len(nodes_list)
        
        message = f"üñ•Ô∏è **–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤** ({online_count}/{total_count} –æ–Ω–ª–∞–π–Ω)\n\n"
        
        # Show first 8 nodes
        builder = InlineKeyboardBuilder()
        for i, node in enumerate(nodes_list[:8]):
            status_emoji = "üü¢" if node.get('isConnected', False) else "üî¥"
            disabled_emoji = "‚è∏Ô∏è" if node.get('isDisabled', False) else ""
            
            node_name = node.get('name', f"Node {node.get('uuid', 'Unknown')[:8]}")
            button_text = f"{status_emoji}{disabled_emoji} {node_name}"
            builder.row(types.InlineKeyboardButton(
                text=button_text,
                callback_data=f"view_node:{node.get('uuid')}"
            ))
        
        # Pagination if needed
        if len(nodes_list) > 8:
            builder.row(
                types.InlineKeyboardButton(text="‚óÄÔ∏è", callback_data="nodes_page:0"),
                types.InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data="nodes_page:1")
            )
        
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="nodes"))
        
        message += "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error listing nodes: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤.",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="nodes")
            ]])
        )

# ================ NODE PAGINATION ================

@router.callback_query(F.data.startswith("nodes_page:"), AuthFilter())
async def handle_node_pagination(callback: types.CallbackQuery, state: FSMContext):
    """Handle node list pagination"""
    await callback.answer()
    
    page = int(callback.data.split(":", 1)[1])
    data = await state.get_data()
    nodes_list = data.get('nodes', [])
    
    if not nodes_list:
        await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    items_per_page = 8
    total_pages = (len(nodes_list) + items_per_page - 1) // items_per_page
    
    if page < 0 or page >= total_pages:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", show_alert=True)
        return
    
    start_idx = page * items_per_page
    end_idx = start_idx + items_per_page
    page_nodes = nodes_list[start_idx:end_idx]
    
    online_count = sum(1 for node in nodes_list if node.get('isConnected', False))
    total_count = len(nodes_list)
    
    message = f"üñ•Ô∏è **–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤** ({online_count}/{total_count} –æ–Ω–ª–∞–π–Ω)\n"
    message += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}\n\n"
    
    builder = InlineKeyboardBuilder()
    for node in page_nodes:
        status_emoji = "üü¢" if node.get('isConnected', False) else "üî¥"
        disabled_emoji = "‚è∏Ô∏è" if node.get('isDisabled', False) else ""
        
        node_name = node.get('name', f"Node {node.get('uuid', 'Unknown')[:8]}")
        button_text = f"{status_emoji}{disabled_emoji} {node_name}"
        builder.row(types.InlineKeyboardButton(
            text=button_text,
            callback_data=f"view_node:{node.get('uuid')}"
        ))
    
    # Pagination controls
    nav_buttons = []
    if page > 0:
        nav_buttons.append(types.InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"nodes_page:{page-1}"))
    if page < total_pages - 1:
        nav_buttons.append(types.InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"nodes_page:{page+1}"))
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="nodes"))
    
    message += "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
    
    await callback.message.edit_text(
        text=message,
        reply_markup=builder.as_markup()
    )

# ================ VIEW NODE DETAILS ================

@router.callback_query(F.data.startswith("view_node:"), AuthFilter())
async def show_node_details(callback: types.CallbackQuery, state: FSMContext):
    """Show node details"""
    await callback.answer()
    
    node_uuid = callback.data.split(":", 1)[1]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–¥—É —á–µ—Ä–µ–∑ HTTP API
        node = await get_node_by_uuid(node_uuid)
        
        if not node:
            await callback.message.edit_text(
                "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="list_nodes")
                ]])
            )
            return
        
        # Store current node in state
        await state.update_data(current_node=node)
        await state.set_state(NodeStates.viewing_node)
        
        # Format node details
        message = format_node_details(node)
        
        # Create action buttons
        builder = InlineKeyboardBuilder()
        
        # Status control
        if node.get('isDisabled', False):
            builder.row(types.InlineKeyboardButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å", callback_data=f"enable_node:{node_uuid}"))
        else:
            builder.row(types.InlineKeyboardButton(text="üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å", callback_data=f"disable_node:{node_uuid}"))
        
        # Actions
        builder.row(
            types.InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"restart_node:{node_uuid}"),
            types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"node_stats:{node_uuid}")
        )
        builder.row(
            types.InlineKeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_node:{node_uuid}"),
            types.InlineKeyboardButton(text="üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", callback_data=f"show_certificate:{node_uuid}")
        )
        builder.row(
            types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_node:{node_uuid}"),
            types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_node:{node_uuid}")
        )
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="list_nodes"))
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error showing node details: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="list_nodes")
            ]])
        )

# ================ NODE ACTIONS ================

@router.callback_query(F.data.startswith("enable_node:"), AuthFilter())
async def enable_node(callback: types.CallbackQuery, state: FSMContext):
    """Enable node"""
    await callback.answer()
    
    node_uuid = callback.data.split(":", 1)[1]
    
    try:
        # –í–∫–ª—é—á–∞–µ–º –Ω–æ–¥—É —á–µ—Ä–µ–∑ HTTP API
        response = await RemnaAPI.patch(f"nodes/{node_uuid}", data={"isDisabled": False})
        
        if response:
            await callback.answer("‚úÖ –°–µ—Ä–≤–µ—Ä –≤–∫–ª—é—á–µ–Ω", show_alert=True)
            # Refresh node details
            await show_node_details(callback, state)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error enabling node: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞", show_alert=True)

@router.callback_query(F.data.startswith("disable_node:"), AuthFilter())
async def disable_node(callback: types.CallbackQuery, state: FSMContext):
    """Disable node"""
    await callback.answer()
    
    node_uuid = callback.data.split(":", 1)[1]
    
    try:
        # –û—Ç–∫–ª—é—á–∞–µ–º –Ω–æ–¥—É —á–µ—Ä–µ–∑ HTTP API
        response = await RemnaAPI.patch(f"nodes/{node_uuid}", data={"isDisabled": True})
        
        if response:
            await callback.answer("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω", show_alert=True)
            # Refresh node details
            await show_node_details(callback, state)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error disabling node: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞", show_alert=True)

@router.callback_query(F.data.startswith("restart_node:"), AuthFilter())
async def restart_node(callback: types.CallbackQuery, state: FSMContext):
    """Restart node"""
    await callback.answer()
    
    node_uuid = callback.data.split(":", 1)[1]
    
    try:
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–¥—É —á–µ—Ä–µ–∑ HTTP API
        response = await RemnaAPI.post(f"nodes/{node_uuid}/restart")
        
        if response:
            await callback.answer("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", show_alert=True)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error restarting node: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞", show_alert=True)

@router.callback_query(F.data.startswith("refresh_node:"), AuthFilter())
async def refresh_node(callback: types.CallbackQuery, state: FSMContext):
    """Refresh node details"""
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
    await show_node_details(callback, state)

@router.callback_query(F.data.startswith("delete_node:"), AuthFilter())
async def delete_node_confirm(callback: types.CallbackQuery, state: FSMContext):
    """Confirm node deletion"""
    await callback.answer()
    
    node_uuid = callback.data.split(":", 1)[1]
    
    data = await state.get_data()
    current_node = data.get('current_node', {})
    node_name = current_node.get('name', 'Unknown')
    
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text="üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å",
        callback_data=f"confirm_delete_node:{node_uuid}"
    ))
    builder.row(types.InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data=f"view_node:{node_uuid}"
    ))
    
    await callback.message.edit_text(
        f"üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞**\n\n"
        f"**–°–µ—Ä–≤–µ—Ä:** {escape_markdown(node_name)}\n"
        f"**UUID:** `{node_uuid}`\n\n"
        f"‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!** –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n"
        f"–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.\n\n"
        f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("confirm_delete_node:"), AuthFilter())
async def confirm_delete_node(callback: types.CallbackQuery, state: FSMContext):
    """Confirm node deletion"""
    await callback.answer()
    
    node_uuid = callback.data.split(":", 1)[1]
    
    try:
        # –£–¥–∞–ª—è–µ–º –Ω–æ–¥—É —á–µ—Ä–µ–∑ HTTP API
        response = await RemnaAPI.delete(f"nodes/{node_uuid}")
        
        if response:
            await callback.answer("‚úÖ –°–µ—Ä–≤–µ—Ä —É–¥–∞–ª–µ–Ω", show_alert=True)
            await state.clear()
            await callback.message.edit_text(
                "‚úÖ **–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω**",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data="list_nodes"),
                    types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error deleting node: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞", show_alert=True)

# ================ NODE STATISTICS ================

@router.callback_query(F.data.startswith("node_stats:"), AuthFilter())
async def show_node_stats(callback: types.CallbackQuery, state: FSMContext):
    """Show node statistics"""
    await callback.answer()
    await callback.message.edit_text("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
    
    node_uuid = callback.data.split(":", 1)[1]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–¥–µ —á–µ—Ä–µ–∑ HTTP API
        node = await get_node_by_uuid(node_uuid)
        if not node:
            await callback.message.edit_text(
                "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"view_node:{node_uuid}")
                ]])
            )
            return
        
        node_name = escape_markdown(node.get('name', 'Unknown'))
        message = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ {node_name}**\n\n"
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        is_disabled = node.get('isDisabled', False)
        is_connected = node.get('isConnected', False)
        
        status = "üü¢ –í–∫–ª—é—á–µ–Ω" if not is_disabled else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω"
        connection = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω" if is_connected else "‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
        
        message += f"üñ•Ô∏è **–°—Ç–∞—Ç—É—Å:** {status}\n"
        message += f"üîå **–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ:** {connection}\n"
        message += f"üåç **–°—Ç—Ä–∞–Ω–∞:** {node.get('countryCode', 'N/A')}\n"
        message += f"üìç **–ê–¥—Ä–µ—Å:** {node.get('address')}:{node.get('port')}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –Ω–æ–¥–µ
        try:
            users_list = await get_all_users()
            if users_list:
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –Ω–æ–¥–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–≤—è–∑–∫–∞)
                node_users = [user for user in users_list if user.get('nodeUuid') == node_uuid]
                
                if not node_users:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä—è–º–æ–π –ø—Ä–∏–≤—è–∑–∫–∏, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏
                    nodes_list = await get_all_nodes()
                    if nodes_list and len(nodes_list) > 0:
                        users_per_node = len(users_list) // len(nodes_list)
                        node_index = next((i for i, n in enumerate(nodes_list) if n.get('uuid') == node_uuid), 0)
                        start_idx = node_index * users_per_node
                        end_idx = start_idx + users_per_node
                        node_users = users_list[start_idx:end_idx] if start_idx < len(users_list) else []
                
                active_users = sum(1 for user in node_users if user.get('status') == 'ACTIVE')
                total_traffic = sum(user.get('usedTraffic', 0) or 0 for user in node_users)
                
                message += f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞ –Ω–æ–¥–µ:**\n"
                message += f"  ‚Ä¢ –í—Å–µ–≥–æ: {len(node_users)}\n"
                message += f"  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}\n"
                message += f"  ‚Ä¢ –û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫: {format_bytes(total_traffic)}\n\n"
        except Exception as e:
            logger.warning(f"Could not get users stats for node: {e}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ –Ω–æ–¥—ã
        if node.get('isTrafficTrackingActive'):
            used = node.get('trafficUsedBytes', 0)
            limit = node.get('trafficLimitBytes', 0)
            
            message += f"üìà **–¢—Ä–∞—Ñ–∏–∫ –Ω–æ–¥—ã:**\n"
            message += f"  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {format_bytes(used)}\n"
            if limit > 0:
                message += f"  ‚Ä¢ –õ–∏–º–∏—Ç: {format_bytes(limit)}\n"
                usage_percent = (used / limit) * 100 if limit > 0 else 0
                message += f"  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {usage_percent:.1f}%\n"
            else:
                message += f"  ‚Ä¢ –õ–∏–º–∏—Ç: –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π\n"
            message += "\n"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if node.get('lastSeen'):
            message += f"üïê **–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {format_datetime(node.get('lastSeen'))}\n"
        
        if node.get('version'):
            message += f"üîß **–í–µ—Ä—Å–∏—è:** {escape_markdown(node.get('version'))}\n"
        
        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"node_stats:{node_uuid}"),
            types.InlineKeyboardButton(text="üìà –î–µ—Ç–∞–ª—å–Ω–∞—è", callback_data=f"node_stats_detailed:{node_uuid}")
        )
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–≤–µ—Ä—É", callback_data=f"view_node:{node_uuid}"))
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error getting node statistics: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞.",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"view_node:{node_uuid}")
            ]])
        )

# ================ NODES USAGE STATISTICS ================

@router.callback_query(F.data == "nodes_usage", AuthFilter())
async def show_nodes_usage(callback: types.CallbackQuery, state: FSMContext):
    """Show nodes usage statistics"""
    await callback.answer()
    await callback.message.edit_text("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ–¥—ã —á–µ—Ä–µ–∑ HTTP API
        nodes_list = await get_all_nodes()
        if not nodes_list:
            await callback.message.edit_text(
                "‚ùå –°–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="nodes")
                ]])
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
        users_list = await get_all_users()
        users_by_node = {}
        
        if users_list:
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –Ω–æ–¥–∞–º
            for i, user in enumerate(users_list):
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä—è–º–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –∫ –Ω–æ–¥–µ
                node_uuid = user.get('nodeUuid')
                if node_uuid and any(n.get('uuid') == node_uuid for n in nodes_list):
                    if node_uuid not in users_by_node:
                        users_by_node[node_uuid] = []
                    users_by_node[node_uuid].append(user)
                else:
                    # –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏
                    node_index = i % len(nodes_list)
                    node_uuid = nodes_list[node_index].get('uuid')
                    if node_uuid not in users_by_node:
                        users_by_node[node_uuid] = []
                    users_by_node[node_uuid].append(user)
        
        message = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤**\n\n"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–¥—ã –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É
        node_stats = []
        for node in nodes_list:
            node_uuid = node.get('uuid')
            node_users = users_by_node.get(node_uuid, [])
            total_traffic = sum(user.get('usedTraffic', 0) or 0 for user in node_users)
            active_users = sum(1 for user in node_users if user.get('status') == 'ACTIVE')
            
            node_stats.append({
                'node': node,
                'users': node_users,
                'active_users': active_users,
                'total_traffic': total_traffic
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É
        node_stats.sort(key=lambda x: x['total_traffic'], reverse=True)
        
        for i, stats in enumerate(node_stats[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø 10
            node = stats['node']
            status_emoji = "üü¢" if node.get('isConnected', False) else "üî¥"
            disabled_emoji = "‚è∏Ô∏è" if node.get('isDisabled', False) else ""
            
            node_name = escape_markdown(node.get('name', 'Unknown'))
            message += f"{i+1}. {status_emoji}{disabled_emoji} **{node_name}**\n"
            message += f"   üìç {node.get('address')}:{node.get('port')}\n"
            message += f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(stats['users'])} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_users']})\n"
            message += f"   üìä –¢—Ä–∞—Ñ–∏–∫: {format_bytes(stats['total_traffic'])}\n"
            
            if node.get('countryCode'):
                message += f"   üåç –°—Ç—Ä–∞–Ω–∞: {node.get('countryCode')}\n"
            
            message += "\n"
        
        if len(node_stats) > 10:
            message += f"... –∏ –µ—â–µ {len(node_stats) - 10} —Å–µ—Ä–≤–µ—Ä–æ–≤\n"
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_users = sum(len(stats['users']) for stats in node_stats)
        total_active = sum(stats['active_users'] for stats in node_stats)
        total_traffic = sum(stats['total_traffic'] for stats in node_stats)
        online_nodes = sum(1 for stats in node_stats if stats['node'].get('isConnected', False))
        
        message += f"\n**üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        message += f"‚Ä¢ –û–Ω–ª–∞–π–Ω –Ω–æ–¥: {online_nodes}/{len(node_stats)}\n"
        message += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_active}\n"
        message += f"‚Ä¢ –û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫: {format_bytes(total_traffic)}\n"
        
        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="nodes_usage"),
            types.InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω–æ", callback_data="nodes_usage_detailed")
        )
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="nodes"))
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error getting nodes usage: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="nodes")
            ]])
        )

# ================ NODE CERTIFICATE ================

@router.callback_query(F.data == "get_panel_certificate", AuthFilter())
async def get_panel_certificate(callback: types.CallbackQuery):
    """Get panel certificate"""
    await callback.answer()
    await show_node_certificate(callback)

@router.callback_query(F.data.startswith("show_certificate:"), AuthFilter())
async def show_node_certificate_specific(callback: types.CallbackQuery):
    """Show certificate for specific node"""
    await callback.answer()
    await show_node_certificate(callback)

async def show_node_certificate(callback: types.CallbackQuery):
    """Show node certificate for copying"""
    await callback.message.edit_text("üìú –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø–∞–Ω–µ–ª–∏...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–∞–Ω–µ–ª–∏ —á–µ—Ä–µ–∑ HTTP API
        certificate_data = await SystemAPI.get_panel_certificate()
        
        if certificate_data and certificate_data.get('publicKey'):
            pub_key = certificate_data.get('publicKey')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
            callback_data = callback.data
            node_uuid = None
            
            if callback_data.startswith("show_certificate:"):
                node_uuid = callback_data.split(":", 1)[1]
            
            message = "üìú **–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–∞–Ω–µ–ª–∏ –¥–ª—è –Ω–æ–¥—ã**\n\n"
            message += "üîê –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:\n\n"
            message += f"`SSL_CERT=\"{pub_key}\"`\n\n"
            message += "üí° **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –Ω–æ–¥—ã:**\n"
            message += "1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é SSL_CERT –≤—ã—à–µ\n"
            message += "2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Remnawave Node –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä\n"
            message += "3. –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n"
            message += "4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–∞–Ω–µ–ª–∏\n\n"
            message += "‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –≠—Ç–æ—Ç –∫–ª—é—á –Ω—É–∂–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–¥—ã –∫ –ø–∞–Ω–µ–ª–∏!"
            
            builder = InlineKeyboardBuilder()
            if node_uuid:
                builder.row(types.InlineKeyboardButton(text="üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–¥—ã", callback_data=f"view_node:{node_uuid}"))
                builder.row(types.InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –Ω–æ–¥", callback_data="list_nodes"))
            else:
                builder.row(types.InlineKeyboardButton(text="üîô –ö –º–µ–Ω—é –Ω–æ–¥", callback_data="nodes"))
            
            await callback.message.edit_text(
                text=message,
                reply_markup=builder.as_markup()
            )
            
        else:
            builder = InlineKeyboardBuilder()
            builder.row(types.InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="get_panel_certificate"))
            builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="nodes"))
            
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–∞–Ω–µ–ª–∏.",
                reply_markup=builder.as_markup()
            )
        
    except Exception as e:
        logger.error(f"Error showing node certificate: {e}")
        
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(text="üîô –ö –º–µ–Ω—é –Ω–æ–¥", callback_data="nodes"))
        
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø–∞–Ω–µ–ª–∏.",
            reply_markup=builder.as_markup()
        )

# ================ RESTART ALL NODES ================

@router.callback_query(F.data == "restart_all_nodes", AuthFilter())
async def restart_all_nodes_confirm(callback: types.CallbackQuery):
    """Confirm restart all nodes"""
    await callback.answer()
    
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text="‚úÖ –î–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ",
        callback_data="confirm_restart_all_nodes"
    ))
    builder.row(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="nodes"))
    
    await callback.message.edit_text(
        "‚ö†Ô∏è **–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤**\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã?\n\n"
        "‚ö†Ô∏è –≠—Ç–æ –º–æ–∂–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data == "confirm_restart_all_nodes", AuthFilter())
async def confirm_restart_all_nodes(callback: types.CallbackQuery):
    """Confirm restart all nodes"""
    await callback.answer()
    
    try:
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –Ω–æ–¥—ã —á–µ—Ä–µ–∑ HTTP API
        response = await RemnaAPI.post("nodes/restart-all")
        
        if response:
            message = "‚úÖ –ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞."
        else:
            message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–æ–≤."
        
        await callback.message.edit_text(
            message,
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="nodes")
            ]])
        )
        
    except Exception as e:
        logger.error(f"Error restarting all nodes: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–æ–≤.",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="nodes")
            ]])
        )

# ================ ADD NEW NODE ================

@router.callback_query(F.data == "add_node", AuthFilter())
async def start_create_node(callback: types.CallbackQuery, state: FSMContext):
    """Start creating a new node"""
    await callback.answer()
    await state.clear()
    
    # Initialize node creation data
    await state.update_data(
        create_node={
            "name": "",
            "address": "",
            "port": 3000,
            "isTrafficTrackingActive": False,
            "trafficLimitBytes": 0,
            "notifyPercent": 80,
            "trafficResetDay": 1,
            "excludedInbounds": [],
            "countryCode": "XX",
            "consumptionMultiplier": 1.0
        },
        creation_step="name"
    )
    await state.set_state(NodeStates.creating_node)
    
    message = "üÜï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –Ω–æ–¥—ã**\n\n"
    message += "üìù **–®–∞–≥ 1 –∏–∑ 4:** –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –Ω–æ–¥—ã:\n\n"
    message += "üí° –ù–∞–ø—Ä–∏–º–µ—Ä: 'VPS-Germany-1' –∏–ª–∏ 'Server-Moscow'"
    
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_create_node"))
    
    await callback.message.edit_text(
        text=message,
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data == "cancel_create_node", AuthFilter())
async def cancel_create_node(callback: types.CallbackQuery, state: FSMContext):
    """Cancel node creation"""
    await callback.answer()
    await state.clear()
    await show_nodes_menu(callback)

@router.message(StateFilter(NodeStates.creating_node), AuthFilter())
async def handle_node_creation_input(message: types.Message, state: FSMContext):
    """Handle node creation input"""
    try:
        data = await state.get_data()
        step = data.get('creation_step', 'name')
        node_data = data.get('create_node', {})
        
        user_input = message.text.strip()
        
        if step == "name":
            if len(user_input) < 3:
                await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            node_data["name"] = user_input
            await state.update_data(create_node=node_data, creation_step="address")
            
            await message.answer(
                "üÜï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –Ω–æ–¥—ã**\n\n"
                "üåê **–®–∞–≥ 2 –∏–∑ 4:** –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –Ω–æ–¥—ã:\n\n"
                "üí° –ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ `192.168.1.100`\n"
                "‚Ä¢ `server.example.com`\n"
                "‚Ä¢ `node1.vpn.com`",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_create_node")
                ]])
            )
            
        elif step == "address":
            if len(user_input) < 3:
                await message.answer("‚ùå –ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            node_data["address"] = user_input
            await state.update_data(create_node=node_data, creation_step="port")
            
            await message.answer(
                "üÜï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –Ω–æ–¥—ã**\n\n"
                "üîå **–®–∞–≥ 3 –∏–∑ 4:** –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3000):\n\n"
                "üí° –û–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Ä—Ç 3000",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="‚è≠Ô∏è –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é (3000)", callback_data="default_port"),
                    types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_create_node")
                ]])
            )
            
        elif step == "port":
            try:
                port = int(user_input)
                if port < 1 or port > 65535:
                    await message.answer("‚ùå –ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 65535. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                    return
            except ValueError:
                await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞ (—á–∏—Å–ª–æ):")
                return
            
            node_data["port"] = port
            await state.update_data(create_node=node_data, creation_step="country")
            
            await message.answer(
                "üÜï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –Ω–æ–¥—ã**\n\n"
                "üåç **–®–∞–≥ 4 –∏–∑ 4:** –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã (2 —Å–∏–º–≤–æ–ª–∞):\n\n"
                "üí° –ü—Ä–∏–º–µ—Ä—ã: RU, US, DE, FR, GB",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å (XX)", callback_data="skip_country"),
                    types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_create_node")
                ]])
            )
            
        elif step == "country":
            if len(user_input) != 2 or not user_input.isalpha():
                await message.answer("‚ùå –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 2 –±—É–∫–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            node_data["countryCode"] = user_input.upper()
            await state.update_data(create_node=node_data)
            await show_node_creation_confirmation(message, state)
        
    except Exception as e:
        logger.error(f"Error handling node creation input: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_create_node")
            ]])
        )

@router.callback_query(F.data == "default_port", AuthFilter())
async def use_default_port(callback: types.CallbackQuery, state: FSMContext):
    """Use default port 3000"""
    await callback.answer()
    
    data = await state.get_data()
    node_data = data.get('create_node', {})
    node_data["port"] = 3000
    await state.update_data(create_node=node_data, creation_step="country")
    
    await callback.message.edit_text(
        "üÜï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –Ω–æ–¥—ã**\n\n"
        "üåç **–®–∞–≥ 4 –∏–∑ 4:** –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã (2 —Å–∏–º–≤–æ–ª–∞):\n\n"
        "üí° –ü—Ä–∏–º–µ—Ä—ã: RU, US, DE, FR, GB",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å (XX)", callback_data="skip_country"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_create_node")
        ]])
    )

@router.callback_query(F.data == "skip_country", AuthFilter())
async def skip_country(callback: types.CallbackQuery, state: FSMContext):
    """Skip country input"""
    await callback.answer()
    
    data = await state.get_data()
    node_data = data.get('create_node', {})
    node_data["countryCode"] = "XX"
    await state.update_data(create_node=node_data)
    await show_node_creation_confirmation(callback.message, state)

async def show_node_creation_confirmation(message: types.Message, state: FSMContext):
    """Show node creation confirmation"""
    data = await state.get_data()
    node_data = data.get('create_node', {})
    
    confirmation_text = (
        "üÜï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –Ω–æ–¥—ã - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ**\n\n"
        f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {node_data.get('name')}\n"
        f"**–ê–¥—Ä–µ—Å:** {node_data.get('address')}\n"
        f"**–ü–æ—Ä—Ç:** {node_data.get('port')}\n"
        f"**–°—Ç—Ä–∞–Ω–∞:** {node_data.get('countryCode')}\n\n"
        "–°–æ–∑–¥–∞—Ç—å –Ω–æ–¥—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏?"
    )
    
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data="confirm_create_node"))
    builder.row(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_create_node"))
    
    try:
        await message.edit_text(
            confirmation_text,
            reply_markup=builder.as_markup()
        )
    except:
        await message.answer(
            confirmation_text,
            reply_markup=builder.as_markup()
        )

@router.callback_query(F.data == "confirm_create_node", AuthFilter())
async def confirm_create_node(callback: types.CallbackQuery, state: FSMContext):
    """Confirm node creation"""
    await callback.answer()
    
    data = await state.get_data()
    node_data = data.get('create_node', {})
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–¥—É —á–µ—Ä–µ–∑ HTTP API
        response = await RemnaAPI.post("nodes", data=node_data)
        
        if response:
            await callback.answer("‚úÖ –ù–æ–¥–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ", show_alert=True)
            await state.clear()
            
            await callback.message.edit_text(
                f"‚úÖ **–ù–æ–¥–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n"
                f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {node_data.get('name')}\n"
                f"**–ê–¥—Ä–µ—Å:** {node_data.get('address')}:{node_data.get('port')}\n"
                f"**–°—Ç—Ä–∞–Ω–∞:** {node_data.get('countryCode')}\n\n"
                "–ù–æ–¥–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data="list_nodes"),
                    types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–¥—ã", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error creating node: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–¥—ã", show_alert=True)

