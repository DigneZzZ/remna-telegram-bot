from aiogram import Router, types, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging
from datetime import datetime, timedelta

from modules.handlers.auth import AuthFilter
from modules.handlers.states import SystemStates
from modules.api.client import RemnaAPI
from modules.api.system import SystemAPI
from modules.api.users import get_all_users, get_users_count
from modules.api.nodes import get_all_nodes

logger = logging.getLogger(__name__)

router = Router()

# ================ UTILITY FUNCTIONS ================

def format_bytes(bytes_value: int) -> str:
    """Format bytes to human readable format"""
    if bytes_value == 0:
        return "0 B"
    
    units = ['B', 'KB', 'MB', 'GB', 'TB']
    size = bytes_value
    unit_index = 0
    
    while size >= 1024 and unit_index < len(units) - 1:
        size /= 1024
        unit_index += 1
    
    if unit_index == 0:
        return f"{int(size)} {units[unit_index]}"
    else:
        return f"{size:.1f} {units[unit_index]}"

def escape_markdown(text: str) -> str:
    """Escape markdown special characters"""
    if not text:
        return ""
    
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    escaped_text = str(text)
    for char in special_chars:
        escaped_text = escaped_text.replace(char, f'\\{char}')
    
    return escaped_text

def format_datetime(dt_string: str) -> str:
    """Format datetime string to readable format"""
    if not dt_string:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    try:
        clean_dt = dt_string.replace('Z', '').split('.')[0]
        dt = datetime.fromisoformat(clean_dt)
        return dt.strftime('%Y-%m-%d %H:%M')
    except Exception:
        return dt_string[:19].replace('T', ' ')

def format_uptime(uptime_seconds: int) -> str:
    """Format uptime in human readable format"""
    try:
        if isinstance(uptime_seconds, str):
            uptime_seconds = int(uptime_seconds)
            
        days = uptime_seconds // 86400
        hours = (uptime_seconds % 86400) // 3600
        minutes = (uptime_seconds % 3600) // 60
        
        if days > 0:
            return f"{days}–¥ {hours}—á {minutes}–º"
        elif hours > 0:
            return f"{hours}—á {minutes}–º"
        else:
            return f"{minutes}–º"
    except Exception:
        return str(uptime_seconds)

# ================ MAIN STATS MENU ================

@router.callback_query(F.data == "stats", AuthFilter())
async def handle_stats_menu(callback: types.CallbackQuery, state: FSMContext):
    """Handle statistics menu selection"""
    await state.clear()
    await show_stats_menu(callback)

async def show_stats_menu(callback: types.CallbackQuery):
    """Show statistics menu"""
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="system_stats"))
    builder.row(types.InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞", callback_data="bandwidth_stats"))
    builder.row(types.InlineKeyboardButton(text="üñ•Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data="nodes_stats"))
    builder.row(types.InlineKeyboardButton(text="üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="users_extended_stats"))
    builder.row(types.InlineKeyboardButton(text="‚ö° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏", callback_data="realtime_stats"))
    builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))

    message = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**\n\n"
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±—ã—Å—Ç—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø—Ä–µ–≤—å—é –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä—è–º—ã–µ HTTP –≤—ã–∑–æ–≤—ã
        users_list = await get_all_users()
        nodes_list = await get_all_nodes()
        
        if users_list:
            total_users = len(users_list)
            active_users = sum(1 for user in users_list if user.get('status') == 'ACTIVE')
            total_traffic = sum(user.get('usedTraffic', 0) or 0 for user in users_list)
            
            message += f"**üìà –ë—ã—Å—Ç—Ä—ã–π –æ–±–∑–æ—Ä:**\n"
            message += f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}/{total_users}\n"
            
            if nodes_list:
                online_nodes = sum(1 for node in nodes_list if node.get('isConnected', False))
                message += f"‚Ä¢ –°–µ—Ä–≤–µ—Ä–æ–≤: {online_nodes}/{len(nodes_list)}\n"
            
            message += f"‚Ä¢ –û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫: {format_bytes(total_traffic)}\n\n"
        else:
            message += "**üìà –ë—ã—Å—Ç—Ä—ã–π –æ–±–∑–æ—Ä:** –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n"
        
    except Exception as e:
        logger.error(f"Error getting quick stats: {e}")
        message += "**üìà –ë—ã—Å—Ç—Ä—ã–π –æ–±–∑–æ—Ä:** –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n"
    
    message += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"

    await callback.answer()
    await callback.message.edit_text(
        text=message,
        reply_markup=builder.as_markup()
    )

# ================ SYSTEM STATISTICS ================

@router.callback_query(F.data == "system_stats", AuthFilter())
async def show_system_stats(callback: types.CallbackQuery, state: FSMContext):
    """Show system statistics"""
    await callback.answer()
    await callback.message.edit_text("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ HTTP API
        system_stats = await SystemAPI.get_stats()
        users_list = await get_all_users()
        nodes_list = await get_all_nodes()
        
        message = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**\n\n"
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        if system_stats:
            if system_stats.get('version'):
                message += f"**üîß –í–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã:** {escape_markdown(system_stats.get('version'))}\n"
            if system_stats.get('uptime'):
                message += f"**‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {format_uptime(system_stats.get('uptime'))}\n"
            if system_stats.get('lastRestart'):
                message += f"**üîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫:** {format_datetime(system_stats.get('lastRestart'))}\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if users_list:
            total_users = len(users_list)
            active_users = sum(1 for user in users_list if user.get('status') == 'ACTIVE')
            
            message += "\n**üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ: {total_users}\n"
            message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}\n"
            message += f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {total_users - active_users}\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
            total_traffic_used = sum(user.get('usedTraffic', 0) or 0 for user in users_list)
            total_traffic_limit = sum(user.get('trafficLimit', 0) or 0 for user in users_list if user.get('trafficLimit'))
            
            message += "\n**üìà –¢—Ä–∞—Ñ–∏–∫:**\n"
            message += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {format_bytes(total_traffic_used)}\n"
            if total_traffic_limit > 0:
                message += f"‚Ä¢ –û–±—â–∏–π –ª–∏–º–∏—Ç: {format_bytes(total_traffic_limit)}\n"
                usage_percent = (total_traffic_used / total_traffic_limit) * 100
                message += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {usage_percent:.1f}%\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–¥
        if nodes_list:
            total_nodes = len(nodes_list)
            online_nodes = sum(1 for node in nodes_list if node.get('isConnected', False))
            
            message += "\n**üñ•Ô∏è –°–µ—Ä–≤–µ—Ä—ã:**\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ: {total_nodes}\n"
            message += f"‚Ä¢ –û–Ω–ª–∞–π–Ω: {online_nodes}\n"
            message += f"‚Ä¢ –û—Ñ–ª–∞–π–Ω: {total_nodes - online_nodes}\n"
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        if system_stats:
            if system_stats.get('cpuUsage') is not None:
                message += f"\n**üíª –†–µ—Å—É—Ä—Å—ã:**\n"
                message += f"‚Ä¢ CPU: {system_stats.get('cpuUsage')}%\n"
            if system_stats.get('memoryUsage') is not None:
                message += f"‚Ä¢ RAM: {system_stats.get('memoryUsage')}%\n"
            if system_stats.get('diskUsage') is not None:
                message += f"‚Ä¢ –î–∏—Å–∫: {system_stats.get('diskUsage')}%\n"
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="system_stats"),
            types.InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª–∏", callback_data="system_stats_detailed")
        )
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stats"))
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error getting system stats: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stats")
            ]])
        )

# ================ BANDWIDTH STATISTICS ================

@router.callback_query(F.data == "bandwidth_stats", AuthFilter())
async def show_bandwidth_stats(callback: types.CallbackQuery, state: FSMContext):
    """Show bandwidth statistics"""
    await callback.answer()
    await callback.message.edit_text("üìà –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞ —á–µ—Ä–µ–∑ HTTP API
        bandwidth_stats = await SystemAPI.get_bandwidth_stats()
        users_list = await get_all_users()
        nodes_list = await get_all_nodes()
        
        message = "üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞**\n\n"
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
        if users_list:
            total_used = sum(user.get('usedTraffic', 0) or 0 for user in users_list)
            total_limit = sum(user.get('trafficLimit', 0) or 0 for user in users_list if user.get('trafficLimit'))
            
            message += "**üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            message += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤—Å–µ–≥–æ: {format_bytes(total_used)}\n"
            if total_limit > 0:
                message += f"‚Ä¢ –û–±—â–∏–π –ª–∏–º–∏—Ç: {format_bytes(total_limit)}\n"
                remaining = total_limit - total_used
                message += f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {format_bytes(remaining)}\n"
                usage_percent = (total_used / total_limit) * 100
                message += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {usage_percent:.1f}%\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–æ–¥–∞–º
        if nodes_list and users_list:
            message += "\n**üñ•Ô∏è –ü–æ —Å–µ—Ä–≤–µ—Ä–∞–º:**\n"
            for node in nodes_list:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞ —ç—Ç–æ–π –Ω–æ–¥–µ (–ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
                node_users = [user for user in users_list if user.get('nodeUuid') == node.get('uuid')]
                if not node_users:  # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –Ω–æ–¥–µ, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ
                    users_per_node = len(users_list) // len(nodes_list) if nodes_list else 0
                    start_idx = nodes_list.index(node) * users_per_node
                    end_idx = start_idx + users_per_node
                    node_users = users_list[start_idx:end_idx] if start_idx < len(users_list) else []
                
                node_traffic = sum(user.get('usedTraffic', 0) or 0 for user in node_users)
                
                status_emoji = "üü¢" if node.get('isConnected', False) else "üî¥"
                node_name = escape_markdown(node.get('name', 'Unknown'))
                message += f"{status_emoji} **{node_name}**\n"
                message += f"  ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(node_users)}\n"
                message += f"  ‚Ä¢ –¢—Ä–∞—Ñ–∏–∫: {format_bytes(node_traffic)}\n"
        
        # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É
        if users_list:
            top_users = sorted(
                [user for user in users_list if user.get('usedTraffic', 0) > 0],
                key=lambda u: u.get('usedTraffic', 0),
                reverse=True
            )[:5]
            
            if top_users:
                message += "\n**üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É:**\n"
                for i, user in enumerate(top_users, 1):
                    username = escape_markdown(user.get('username', 'Unknown'))
                    traffic = format_bytes(user.get('usedTraffic', 0))
                    message += f"{i}\\. **{username}**: {traffic}\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ API)
        if bandwidth_stats:
            if bandwidth_stats.get('daily'):
                message += "\n**üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è:**\n"
                daily = bandwidth_stats.get('daily', {})
                if daily.get('upload'):
                    message += f"‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {format_bytes(daily.get('upload'))}\n"
                if daily.get('download'):
                    message += f"‚Ä¢ –°–∫–∞—á–∞–Ω–æ: {format_bytes(daily.get('download'))}\n"
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="bandwidth_stats"),
            types.InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª–∏", callback_data="bandwidth_stats_detailed")
        )
        builder.row(
            types.InlineKeyboardButton(text="üìà –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="bandwidth_weekly"),
            types.InlineKeyboardButton(text="üìâ –ó–∞ –º–µ—Å—è—Ü", callback_data="bandwidth_monthly")
        )
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stats"))
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error getting bandwidth stats: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stats")
            ]])
        )

# ================ NODES STATISTICS ================

@router.callback_query(F.data == "nodes_stats", AuthFilter())
async def show_nodes_stats(callback: types.CallbackQuery, state: FSMContext):
    """Show nodes statistics"""
    await callback.answer()
    await callback.message.edit_text("üñ•Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–¥–∞—Ö —á–µ—Ä–µ–∑ HTTP API
        nodes_list = await get_all_nodes()
        users_list = await get_all_users()
        
        if not nodes_list:
            await callback.message.edit_text(
                "‚ùå –°–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stats")
                ]])
            )
            return
        
        message = "üñ•Ô∏è **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤**\n\n"
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        total_nodes = len(nodes_list)
        online_nodes = sum(1 for node in nodes_list if node.get('isConnected', False))
        
        message += f"**üìä –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
        message += f"‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {total_nodes}\n"
        message += f"‚Ä¢ –û–Ω–ª–∞–π–Ω: {online_nodes}\n"
        message += f"‚Ä¢ –û—Ñ–ª–∞–π–Ω: {total_nodes - online_nodes}\n\n"
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–π –Ω–æ–¥–µ
        message += "**üìã –î–µ—Ç–∞–ª–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤:**\n"
        for node in nodes_list:
            status_emoji = "üü¢" if node.get('isConnected', False) else "üî¥"
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞ —ç—Ç–æ–π –Ω–æ–¥–µ
            node_users = [user for user in users_list if user.get('nodeUuid') == node.get('uuid')] if users_list else []
            active_users = sum(1 for user in node_users if user.get('status') == 'ACTIVE')
            node_traffic = sum(user.get('usedTraffic', 0) or 0 for user in node_users)
            
            node_name = escape_markdown(node.get('name', 'Unknown'))
            node_address = escape_markdown(node.get('address', 'Unknown'))
            
            message += f"{status_emoji} **{node_name}**\n"
            message += f"  ‚Ä¢ –ê–¥—Ä–µ—Å: `{node_address}`\n"
            message += f"  ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(node_users)} \\(–∞–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}\\)\n"
            message += f"  ‚Ä¢ –¢—Ä–∞—Ñ–∏–∫: {format_bytes(node_traffic)}\n"
            
            if node.get('isConnected'):
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ–Ω–ª–∞–π–Ω –Ω–æ–¥
                if node.get('lastSeen'):
                    message += f"  ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤—è–∑—å: {format_datetime(node.get('lastSeen'))}\n"
                if node.get('version'):
                    message += f"  ‚Ä¢ –í–µ—Ä—Å–∏—è: {escape_markdown(node.get('version'))}\n"
                if node.get('uptime'):
                    message += f"  ‚Ä¢ Uptime: {format_uptime(node.get('uptime'))}\n"
            else:
                if node.get('lastSeen'):
                    message += f"  ‚Ä¢ –û—Ñ–ª–∞–π–Ω —Å: {format_datetime(node.get('lastSeen'))}\n"
            
            message += "\n"
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="nodes_stats"),
            types.InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª–∏", callback_data="nodes_detailed")
        )
        builder.row(
            types.InlineKeyboardButton(text="üñ•Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="nodes"),
            types.InlineKeyboardButton(text="üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="nodes_monitoring")
        )
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stats"))
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error getting nodes stats: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stats")
            ]])
        )

# ================ REAL-TIME MONITORING ================

@router.callback_query(F.data == "realtime_stats", AuthFilter())
async def show_realtime_stats(callback: types.CallbackQuery, state: FSMContext):
    """Show real-time monitoring"""
    await callback.answer()
    await state.set_state(SystemStates.viewing_stats)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ HTTP API
        users_list = await get_all_users()
        nodes_list = await get_all_nodes()
        
        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        current_time = datetime.now().strftime("%H:%M:%S")
        
        message = f"‚ö° **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏**\n"
        message += f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}\n\n"
        
        # –û–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if users_list:
            active_users = sum(1 for user in users_list if user.get('status') == 'ACTIVE')
            message += "**üî• –°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–Ω–æ:**\n"
            message += f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}\n"
        
        if nodes_list:
            online_nodes = sum(1 for node in nodes_list if node.get('isConnected', False))
            message += f"‚Ä¢ –°–µ—Ä–≤–µ—Ä–æ–≤: {online_nodes}\n"
        
        # –¢—Ä–∞—Ñ–∏–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
        if users_list:
            recent_users = [
                user for user in users_list 
                if user.get('usedTraffic', 0) > 0 and user.get('status') == 'ACTIVE'
            ]
            
            if recent_users:
                total_active_traffic = sum(user.get('usedTraffic', 0) for user in recent_users)
                message += f"‚Ä¢ –û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {format_bytes(total_active_traffic)}\n"
        
        message += "\n**üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤:**\n"
        if nodes_list:
            for node in nodes_list:
                status_emoji = "üü¢" if node.get('isConnected', False) else "üî¥"
                node_name = escape_markdown(node.get('name', 'Unknown'))
                message += f"{status_emoji} {node_name}\n"
        else:
            message += "–°–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        message += "\n**üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:**\n"
        message += "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\\.\\.\\.\n"
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="realtime_stats"),
            types.InlineKeyboardButton(text="‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data="pause_monitoring")
        )
        builder.row(
            types.InlineKeyboardButton(text="üìä –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="stats_charts"),
            types.InlineKeyboardButton(text="‚ö†Ô∏è –ê–ª–µ—Ä—Ç—ã", callback_data="stats_alerts")
        )
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stats"))
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error getting realtime stats: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stats")
            ]])
        )

# ================ DETAILED STATISTICS ================

@router.callback_query(F.data == "system_stats_detailed", AuthFilter())
async def show_system_stats_detailed(callback: types.CallbackQuery):
    """Show detailed system statistics"""
    await callback.answer()
    await callback.message.edit_text("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ HTTP API
        system_stats = await SystemAPI.get_stats()
        users_list = await get_all_users()
        nodes_list = await get_all_nodes()
        
        message = "üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**\n\n"
        
        if users_list:
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
            now = datetime.now()
            week_ago = now - timedelta(days=7)
            month_ago = now - timedelta(days=30)
            
            new_users_week = 0
            new_users_month = 0
            expired_users = 0
            
            for user in users_list:
                # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                created_at = user.get('createdAt')
                if created_at:
                    try:
                        created_date = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                        if created_date > week_ago:
                            new_users_week += 1
                        if created_date > month_ago:
                            new_users_month += 1
                    except Exception:
                        pass
                
                # –ò—Å—Ç–µ–∫—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                expire_at = user.get('expireAt')
                if expire_at:
                    try:
                        expire_date = datetime.fromisoformat(expire_at.replace('Z', '+00:00'))
                        if expire_date < now:
                            expired_users += 1
                    except Exception:
                        pass
            
            message += "**üë• –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n"
            message += f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {new_users_week}\n"
            message += f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {new_users_month}\n"
            message += f"‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö: {expired_users}\n"
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ª–∏–º–∏—Ç–∞–º —Ç—Ä–∞—Ñ–∏–∫–∞
            unlimited_users = sum(1 for user in users_list if not user.get('trafficLimit'))
            limited_users = len(users_list) - unlimited_users
            
            message += f"‚Ä¢ –° –ª–∏–º–∏—Ç–æ–º —Ç—Ä–∞—Ñ–∏–∫–∞: {limited_users}\n"
            message += f"‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã—Ö: {unlimited_users}\n"
            
            # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            if users_list:
                avg_traffic = sum(user.get('usedTraffic', 0) or 0 for user in users_list) / len(users_list)
                message += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ç—Ä–∞—Ñ–∏–∫: {format_bytes(int(avg_traffic))}\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–æ–¥–∞–º
        if nodes_list and users_list:
            message += "\n**üñ•Ô∏è –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤:**\n"
            for node in nodes_list:
                node_users = [user for user in users_list if user.get('nodeUuid') == node.get('uuid')]
                active_users = sum(1 for user in node_users if user.get('status') == 'ACTIVE')
                node_traffic = sum(user.get('usedTraffic', 0) or 0 for user in node_users)
                
                max_users = node.get('maxUsers', 100)
                load_percent = (len(node_users) / max(max_users, 1)) * 100
                
                node_name = escape_markdown(node.get('name', 'Unknown'))
                message += f"**{node_name}:**\n"
                message += f"  ‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞: {load_percent:.1f}%\n"
                message += f"  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}/{len(node_users)}\n"
                message += f"  ‚Ä¢ –¢—Ä–∞—Ñ–∏–∫: {format_bytes(node_traffic)}\n"
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        if system_stats:
            message += "\n**üíª –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:**\n"
            if system_stats.get('cpuUsage') is not None:
                message += f"‚Ä¢ CPU: {system_stats.get('cpuUsage')}%\n"
            if system_stats.get('memoryUsage') is not None:
                message += f"‚Ä¢ RAM: {system_stats.get('memoryUsage')}%\n"
            if system_stats.get('diskUsage') is not None:
                message += f"‚Ä¢ –î–∏—Å–∫: {system_stats.get('diskUsage')}%\n"
            if system_stats.get('networkConnections') is not None:
                message += f"‚Ä¢ –°–µ—Ç–µ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {system_stats.get('networkConnections')}\n"
        
        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="system_stats_detailed"),
            types.InlineKeyboardButton(text="üìä –û–±—ã—á–Ω–∞—è", callback_data="system_stats")
        )
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stats"))
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error getting detailed system stats: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="system_stats")
            ]])
        )

# ================ BANDWIDTH PERIOD STATISTICS ================

@router.callback_query(F.data == "bandwidth_weekly", AuthFilter())
async def show_bandwidth_weekly(callback: types.CallbackQuery):
    """Show weekly bandwidth statistics"""
    await callback.answer()
    
    try:
        users_list = await get_all_users()
        
        message = "üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é**\n\n"
        
        if users_list:
            # –†–∞—Å—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            total_traffic = sum(user.get('usedTraffic', 0) or 0 for user in users_list)
            
            message += f"**üìä –û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫:**\n"
            message += f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {format_bytes(total_traffic)}\n"
            message += f"‚Ä¢ –í —Å—Ä–µ–¥–Ω–µ–º –≤ –¥–µ–Ω—å: {format_bytes(total_traffic // 7)}\n"
            
            # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é
            top_users = sorted(
                [user for user in users_list if user.get('usedTraffic', 0) > 0],
                key=lambda u: u.get('usedTraffic', 0),
                reverse=True
            )[:10]
            
            if top_users:
                message += "\n**üèÜ –¢–æ–ø 10 –∑–∞ –Ω–µ–¥–µ–ª—é:**\n"
                for i, user in enumerate(top_users, 1):
                    username = escape_markdown(user.get('username', 'Unknown'))
                    traffic = format_bytes(user.get('usedTraffic', 0))
                    message += f"{i}\\. {username}: {traffic}\n"
        else:
            message += "–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"
        
        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(text="üìâ –ó–∞ –º–µ—Å—è—Ü", callback_data="bandwidth_monthly"),
            types.InlineKeyboardButton(text="üìä –û–±—â–∞—è", callback_data="bandwidth_stats")
        )
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="bandwidth_stats"))
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error getting weekly bandwidth: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

@router.callback_query(F.data == "bandwidth_monthly", AuthFilter())
async def show_bandwidth_monthly(callback: types.CallbackQuery):
    """Show monthly bandwidth statistics"""
    await callback.answer()
    
    try:
        users_list = await get_all_users()
        
        message = "üìâ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü**\n\n"
        
        if users_list:
            # –†–∞—Å—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            total_traffic = sum(user.get('usedTraffic', 0) or 0 for user in users_list)
            
            message += f"**üìä –û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫:**\n"
            message += f"‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {format_bytes(total_traffic)}\n"
            message += f"‚Ä¢ –í —Å—Ä–µ–¥–Ω–µ–º –≤ –¥–µ–Ω—å: {format_bytes(total_traffic // 30)}\n"
            message += f"‚Ä¢ –í —Å—Ä–µ–¥–Ω–µ–º –≤ –Ω–µ–¥–µ–ª—é: {format_bytes(total_traffic // 4)}\n"
            
            # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
            projected = total_traffic * 2  # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≥–Ω–æ–∑
            message += f"‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥\\. –º–µ—Å—è—Ü: {format_bytes(projected)}\n"
        else:
            message += "–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"
        
        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(text="üìà –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="bandwidth_weekly"),
            types.InlineKeyboardButton(text="üìä –û–±—â–∞—è", callback_data="bandwidth_stats")
        )
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="bandwidth_stats"))
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error getting monthly bandwidth: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

# ================ PLACEHOLDER HANDLERS ================

@router.callback_query(F.data.startswith(("bandwidth_stats_detailed", "nodes_detailed", "nodes_monitoring", "pause_monitoring", "stats_charts", "stats_alerts")), AuthFilter())
async def handle_stats_placeholder(callback: types.CallbackQuery):
    """Placeholder for advanced statistics features"""
    await callback.answer()
    
    feature_names = {
        "bandwidth_stats_detailed": "–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞",
        "nodes_detailed": "–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤", 
        "nodes_monitoring": "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–æ–≤",
        "pause_monitoring": "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
        "stats_charts": "–ì—Ä–∞—Ñ–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
        "stats_alerts": "–ê–ª–µ—Ä—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
    }
    
    feature_name = feature_names.get(callback.data, "–§—É–Ω–∫—Ü–∏—è")
    
    await callback.message.edit_text(
        f"üìä **{feature_name}**\n\n"
        f"üîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n"
        f"–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è:\n"
        f"‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
        f"‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏\n"
        f"‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        f"‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stats")
        ]])
    )

# ================ BACK NAVIGATION ================

@router.callback_query(F.data == "back_to_stats", AuthFilter())
async def back_to_stats(callback: types.CallbackQuery, state: FSMContext):
    """Return to stats menu"""
    await show_stats_menu(callback)

logger.info("Stats handlers module loaded successfully (SDK-free version)")