#!/usr/bin/env python3
"""
Complete fix script for Remnawave Admin Bot
"""
import subprocess
import sys
import os

def run_command(command, description):
    """Run a command and print results"""
    print(f"\nüîß {description}")
    print("-" * 50)
    
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        print(f"Exit code: {result.returncode}")
        
        if result.stdout:
            print("Output:")
            print(result.stdout)
        
        if result.stderr:
            print("Errors:")
            print(result.stderr)
            
        return result.returncode == 0
    except Exception as e:
        print(f"‚ùå Error running command: {e}")
        return False

def main():
    """Main fix function"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Remnawave Admin Bot")
    print("=" * 60)
    
    # 1. Test current admin config
    print("\n1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    if os.path.exists("test_admin_config.py"):
        run_command("python test_admin_config.py", "–ü—Ä–æ–≤–µ—Ä–∫–∞ ADMIN_USER_IDS")
    
    # 2. Test API connectivity
    print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    if os.path.exists("test_api.py"):
        run_command("python test_api.py", "–ü—Ä–æ–≤–µ—Ä–∫–∞ API")
    
    # 3. Stop current containers
    print("\n3. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
    run_command("docker-compose -f docker-compose-prod.yml down", "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
    
    # 4. Rebuild containers
    print("\n4. –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
    run_command("docker-compose -f docker-compose-prod.yml build --no-cache", "–ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π –∫—ç—à–∞")
    
    # 5. Start containers
    print("\n5. –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
    run_command("docker-compose -f docker-compose-prod.yml up -d", "–ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–µ")
    
    # 6. Wait and show logs
    print("\n6. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∏ –ø–æ–∫–∞–∑ –ª–æ–≥–æ–≤")
    import time
    time.sleep(10)
    run_command("docker-compose -f docker-compose-prod.yml logs --tail=20", "–ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤")
    
    # 7. Show container status
    print("\n7. –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
    run_command("docker-compose -f docker-compose-prod.yml ps", "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
    
    print("\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫")
    print("2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 127192647 –º–æ–∂–µ—Ç –≤–æ–π—Ç–∏")
    print("4. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –æ—Å—Ç–∞—é—Ç—Å—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ")

if __name__ == "__main__":
    main()
