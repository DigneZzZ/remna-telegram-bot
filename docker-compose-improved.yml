services:
  remna-bot:
    image: ghcr.io/dignezzz/remna-telegram-bot:latest
    container_name: remna-telegram-bot-prod
    restart: unless-stopped
    
    environment:
      # Required environment variables
      - API_BASE_URL=${API_BASE_URL}
      - REMNAWAVE_API_TOKEN=${REMNAWAVE_API_TOKEN}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - ADMIN_USER_IDS=${ADMIN_USER_IDS}
      
      # Production environment variables
      - LOG_LEVEL=INFO
      - PYTHONUNBUFFERED=1
      - ENVIRONMENT=production
      
      # Network and timeout settings
      - AIOHTTP_CONN_TIMEOUT=30
      - AIOHTTP_READ_TIMEOUT=60
    
    volumes:
      # Mount logs directory for persistence
      - remna-bot-logs:/app/logs
    
    # Health check with API connectivity test
    healthcheck:
      test: ["CMD", "python", "-c", "import aiohttp, asyncio, os; asyncio.run(aiohttp.ClientSession().get(os.getenv('API_BASE_URL', 'http://remnawave:3000/api')).close()) if os.getenv('API_BASE_URL') else exit(1)"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s
    
    # Resource limits for production
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.25'
    
    # Network configuration - подключаем к сети remnawave
    networks:
      - remnawave-network
    
    # Production logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    
    # Security options
    security_opt:
      - no-new-privileges:true
    
    # User specification (matches Dockerfile)
    user: "1000:1000"
    
    # DNS settings for better container resolution
    dns:
      - 8.8.8.8
      - 8.8.4.4
    
    # Additional settings for better Docker networking
    extra_hosts:
      - "remnawave:host-gateway"  # Fallback если remnawave не в той же сети

volumes:
  remna-bot-logs:
    driver: local

networks:
  remnawave-network:
    name: remnawave-network
    driver: bridge
    external: false  # Автоматически создаст сеть, если не существует
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.name: "remnawave-network"
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    labels:
      - "com.remnawave.network=true"
      - "com.remnawave.description=Remnawave services network"
