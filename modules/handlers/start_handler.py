import logging
import asyncio
import os
import pytz
from datetime import datetime, timezone
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from modules.handlers.auth import AuthFilter
from modules.api.users import get_all_users
from modules.api.nodes import get_all_nodes
from modules.api.system import SystemAPI
from modules.utils.formatters_aiogram import format_bytes
from modules.config import (
    DASHBOARD_SHOW_SYSTEM_STATS, DASHBOARD_SHOW_SERVER_INFO,
    DASHBOARD_SHOW_USERS_COUNT, DASHBOARD_SHOW_NODES_COUNT, 
    DASHBOARD_SHOW_TRAFFIC_STATS, DASHBOARD_SHOW_UPTIME
)

logger = logging.getLogger(__name__)
router = Router()

# ================ DATETIME PARSING FIX ================

def parse_expiry_date_safe(expire_at_str):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤"""
    if not expire_at_str:
        return None
    
    try:
        # –£–¥–∞–ª—è–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        if '.' in expire_at_str and expire_at_str.endswith('Z'):
            expire_at_str = expire_at_str.split('.')[0] + 'Z'
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Å timezone
        if expire_at_str.endswith('Z'):
            # UTC timezone
            expire_date = datetime.fromisoformat(expire_at_str.replace('Z', '+00:00'))
        elif '+' in expire_at_str or expire_at_str.count('-') > 2:
            # –£–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç timezone
            expire_date = datetime.fromisoformat(expire_at_str)
        else:
            # –ù–µ—Ç timezone, —Å—á–∏—Ç–∞–µ–º UTC
            expire_date = datetime.fromisoformat(expire_at_str).replace(tzinfo=timezone.utc)
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ UTC –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if expire_date.tzinfo is None:
            expire_date = expire_date.replace(tzinfo=timezone.utc)
        elif expire_date.tzinfo != timezone.utc:
            expire_date = expire_date.astimezone(timezone.utc)
        
        return expire_date
        
    except Exception as e:
        logger.debug(f"Error parsing expiry date {expire_at_str}: {e}")
        return None

def get_current_utc_time():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC"""
    return datetime.now(timezone.utc)

# ================ MARKDOWN ESCAPING FIX ================

def safe_escape_markdown(text):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Markdown"""
    if not text:
        return ""
    
    text = str(text)
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
    replacements = {
        '_': '\\_',
        '*': '\\*',
        '[': '\\[',
        ']': '\\]',
        '(': '\\(',
        ')': '\\)',
        '~': '\\~',
        '`': '\\`',
        '>': '\\>',
        '#': '\\#',
        '+': '\\+',
        '-': '\\-',
        '=': '\\=',
        '|': '\\|',
        '{': '\\{',
        '}': '\\}',
        '.': '\\.',
        '!': '\\!'
    }
    
    for old, new in replacements.items():
        text = text.replace(old, new)
    
    return text

def escape_markdown(text):
    """–ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    return safe_escape_markdown(text)

# ================ UTILITY FUNCTIONS ================

def format_uptime(uptime_seconds: int) -> str:
    """Format uptime in human readable format"""
    try:
        if isinstance(uptime_seconds, str):
            uptime_seconds = int(uptime_seconds)
            
        days = uptime_seconds // 86400
        hours = (uptime_seconds % 86400) // 3600
        minutes = (uptime_seconds % 3600) // 60
        
        if days > 0:
            return f"{days}–¥ {hours}—á {minutes}–º"
        elif hours > 0:
            return f"{hours}—á {minutes}–º"
        else:
            return f"{minutes}–º"
    except Exception:
        return str(uptime_seconds)

# ================ DOCKER STATS ================

async def get_docker_stats():
    """Get Docker container statistics from cgroup"""
    # CPU cores
    cpu_cores = 0
    cpu_quota_file = '/sys/fs/cgroup/cpu/cpu.cfs_quota_us'
    cpu_period_file = '/sys/fs/cgroup/cpu/cpu.cfs_period_us'
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è cgroup v2
    if not os.path.exists(cpu_quota_file):
        cpu_quota_file = '/sys/fs/cgroup/cpu.max'
        cpu_period_file = None
    
    if os.path.exists(cpu_quota_file):
        with open(cpu_quota_file, 'r') as f:
            content = f.read().strip()
        
        if cpu_period_file and os.path.exists(cpu_period_file):
            quota = int(content)
            with open(cpu_period_file, 'r') as f:
                period = int(f.read().strip())
            
            if quota > 0 and period > 0:
                cpu_cores = max(1, quota // period)
            else:
                import psutil
                cpu_cores = psutil.cpu_count()
        else:
            if 'max' in content:
                import psutil
                cpu_cores = psutil.cpu_count()
            else:
                parts = content.split()
                if len(parts) >= 2:
                    quota = int(parts[0])
                    period = int(parts[1])
                    if quota > 0 and period > 0:
                        cpu_cores = max(1, quota // period)
                    else:
                        import psutil
                        cpu_cores = psutil.cpu_count()
                else:
                    import psutil
                    cpu_cores = psutil.cpu_count()
    else:
        import psutil
        cpu_cores = psutil.cpu_count()
    
    # CPU usage
    import psutil
    cpu_percent = psutil.cpu_percent(interval=0.1)
    
    # Memory
    memory_limit_file = '/sys/fs/cgroup/memory/memory.limit_in_bytes'
    memory_usage_file = '/sys/fs/cgroup/memory/memory.usage_in_bytes'
    
    if not os.path.exists(memory_limit_file):
        memory_limit_file = '/sys/fs/cgroup/memory.max'
        memory_usage_file = '/sys/fs/cgroup/memory.current'
    
    if os.path.exists(memory_limit_file) and os.path.exists(memory_usage_file):
        with open(memory_limit_file, 'r') as f:
            limit_content = f.read().strip()
        
        with open(memory_usage_file, 'r') as f:
            memory_usage = int(f.read().strip())
        
        if limit_content == 'max':
            import psutil
            memory_limit = psutil.virtual_memory().total
        else:
            memory_limit = int(limit_content)
    else:
        import psutil
        vm = psutil.virtual_memory()
        memory_limit = vm.total
        memory_usage = vm.used
    
    class DockerMemory:
        def __init__(self, total, used):
            self.total = total
            self.used = used
            self.free = total - used
            self.percent = (used / total * 100) if total > 0 else 0
    
    memory = DockerMemory(memory_limit, memory_usage)
    
    return cpu_cores, cpu_percent, memory

# ================ STATISTICS FUNCTIONS ================

async def get_local_system_stats():
    """Get local system statistics"""
    try:
        import psutil
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∑–∞–ø—É—â–µ–Ω—ã –ª–∏ –º—ã –≤ Docker
        in_docker = os.path.exists('/.dockerenv')
        
        if in_docker:
            # –í Docker - —á–∏—Ç–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ cgroup
            try:
                cpu_cores, cpu_percent, memory = await get_docker_stats()
            except Exception as e:
                logger.warning(f"Error reading Docker cgroup stats, falling back to psutil: {e}")
                cpu_cores = psutil.cpu_count()
                cpu_percent = psutil.cpu_percent(interval=0.1)
                memory = psutil.virtual_memory()
        else:
            cpu_cores = psutil.cpu_count()
            cpu_percent = psutil.cpu_percent(interval=0.1)
            memory = psutil.virtual_memory()
        
        system_stats = f"üñ•Ô∏è **–°–∏—Å—Ç–µ–º–∞**:\n"
        system_stats += f"  ‚Ä¢ CPU: {cpu_cores} —è–¥–µ—Ä, {cpu_percent:.1f}%\n"
        system_stats += f"  ‚Ä¢ RAM: {format_bytes(memory.used)} / {format_bytes(memory.total)} ({memory.percent:.1f}%)\n"
        
        if DASHBOARD_SHOW_UPTIME:
            uptime_seconds = psutil.boot_time()
            current_time = datetime.now().timestamp()
            uptime = int(current_time - uptime_seconds)
            uptime_str = format_uptime(uptime)
            system_stats += f"  ‚Ä¢ Uptime: {uptime_str}\n"
        
        return system_stats
        
    except ImportError:
        logger.warning("psutil not available, skipping system stats")
        return None
    except Exception as e:
        logger.error(f"Error getting local system stats: {e}")
        return None

async def get_user_stats():
    """Get user statistics with fixed date parsing"""
    try:
        users_data = await get_all_users()
        
        if not users_data:
            return None
        
        users_count = len(users_data)
        user_stats = {'active': 0, 'inactive': 0, 'expired': 0, 'disabled': 0}
        total_traffic = 0
        
        now_utc = get_current_utc_time()
        
        for user in users_data:
            status = user.get('status', '').upper()
            is_disabled = user.get('isDisabled', False)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∞—á–∞–ª–∞ disabled —Å—Ç–∞—Ç—É—Å
            if is_disabled:
                user_stats['disabled'] += 1
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º –¥–∞—Ç
            expire_at = user.get('expireAt')
            is_expired = False
            if expire_at:
                expire_date = parse_expiry_date_safe(expire_at)
                if expire_date and expire_date < now_utc:
                    is_expired = True
                    user_stats['expired'] += 1
                    continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞
            traffic_limit = user.get('trafficLimit', 0)
            used_traffic = user.get('usedTraffic', 0)
            traffic_exceeded = False
            
            if traffic_limit and traffic_limit > 0:
                if used_traffic >= traffic_limit:
                    traffic_exceeded = True
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            if status == 'ACTIVE' and not is_expired and not traffic_exceeded:
                user_stats['active'] += 1
            else:
                user_stats['inactive'] += 1
            
            if DASHBOARD_SHOW_TRAFFIC_STATS:
                if used_traffic:
                    total_traffic += used_traffic
        
        user_section = f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏** ({users_count} –≤—Å–µ–≥–æ):\n"
        user_section += f"  ‚Ä¢ ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {user_stats['active']}\n"
        user_section += f"  ‚Ä¢ ‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {user_stats['inactive']}\n"
        
        if user_stats['expired'] > 0:
            user_section += f"  ‚Ä¢ ‚è∞ –ò—Å—Ç–µ–∫—à–∏—Ö: {user_stats['expired']}\n"
        
        if user_stats['disabled'] > 0:
            user_section += f"  ‚Ä¢ üö´ –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö: {user_stats['disabled']}\n"
        
        if DASHBOARD_SHOW_TRAFFIC_STATS and total_traffic > 0:
            user_section += f"  ‚Ä¢ üìä –û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫: {format_bytes(total_traffic)}\n"
        
        return user_section
        
    except Exception as e:
        logger.error(f"Error getting user stats: {e}")
        return None

async def get_node_stats():
    """Get node statistics using direct HTTP API"""
    try:
        nodes_data = await get_all_nodes()
        
        if not nodes_data:
            return None
        
        nodes_count = len(nodes_data)
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–æ–¥ —Å–æ–≥–ª–∞—Å–Ω–æ API v1.6.5
        online_nodes = 0
        disabled_nodes = 0
        
        for node in nodes_data:
            is_disabled = node.get('isDisabled', False)
            is_connected = node.get('isConnected', False)
            
            if is_disabled:
                disabled_nodes += 1
            elif is_connected:
                online_nodes += 1
        
        offline_nodes = nodes_count - online_nodes - disabled_nodes
        
        node_section = f"üñ•Ô∏è **–°–µ—Ä–≤–µ—Ä—ã**: {online_nodes}/{nodes_count} –æ–Ω–ª–∞–π–Ω"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–¥–∞—Ö
        if offline_nodes > 0:
            node_section += f" (‚ùå {offline_nodes} –æ—Ñ–ª–∞–π–Ω)"
        
        if disabled_nodes > 0:
            node_section += f" (üö´ {disabled_nodes} –æ—Ç–∫–ª—é—á–µ–Ω–æ)"
        
        node_section += "\n"
        
        return node_section
        
    except Exception as e:
        logger.error(f"Error getting node stats: {e}")
        return None

async def get_traffic_stats():
    """Get traffic statistics using direct HTTP API"""
    try:
        users_data = await get_all_users()
        
        if not users_data:
            return None
        
        # –°—É–º–º–∏—Ä—É–µ–º —Ç—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        active_users = [user for user in users_data if user.get('status') == 'ACTIVE']
        
        if not active_users:
            return None
        
        total_traffic_used = sum(user.get('usedTraffic', 0) or 0 for user in active_users)
        total_traffic_limit = sum(user.get('trafficLimit', 0) or 0 for user in active_users if user.get('trafficLimit'))
        
        if total_traffic_used == 0:
            return None
        
        traffic_section = f"üìä **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å**:\n"
        traffic_section += f"  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {format_bytes(total_traffic_used)}\n"
        
        if total_traffic_limit > 0:
            remaining = total_traffic_limit - total_traffic_used
            usage_percent = (total_traffic_used / total_traffic_limit) * 100
            traffic_section += f"  ‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {format_bytes(remaining)}\n"
            traffic_section += f"  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {usage_percent:.1f}%\n"
        
        return traffic_section
        
    except Exception as e:
        logger.warning(f"Could not get traffic stats: {e}")
        return None

async def get_server_info():
    """Get server info using direct HTTP API"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ —á–µ—Ä–µ–∑ SystemAPI
        system_stats = await SystemAPI.get_stats()
        
        if system_stats:
            server_section = f"üîß **–°–∏—Å—Ç–µ–º–∞**:\n"
            
            if system_stats.get('version'):
                server_section += f"  ‚Ä¢ –í–µ—Ä—Å–∏—è: {safe_escape_markdown(system_stats.get('version'))}\n"
            
            if system_stats.get('uptime'):
                uptime_str = format_uptime(system_stats.get('uptime'))
                server_section += f"  ‚Ä¢ Uptime: {uptime_str}\n"
            
            if system_stats.get('connectionsCount'):
                server_section += f"  ‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {system_stats.get('connectionsCount')}\n"
            
            return server_section
        
        # Fallback - –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ inbound'—ã
        try:
            from modules.api.inbounds import get_all_inbounds
            inbounds_data = await get_all_inbounds()
            
            if inbounds_data:
                active_inbounds = sum(1 for inbound in inbounds_data if inbound.get('isEnabled', True))
                server_section = f"üîå **Inbounds**: {active_inbounds}/{len(inbounds_data)} –∞–∫—Ç–∏–≤–Ω—ã—Ö\n"
                return server_section
        except Exception as e:
            logger.warning(f"Could not get inbounds info: {e}")
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π fallback - —Å—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–æ–¥—ã
        nodes_data = await get_all_nodes()
        if nodes_data:
            active_nodes = sum(1 for node in nodes_data 
                if node.get('isConnected', False) and not node.get('isDisabled', False))
            server_section = f"üîå **–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–æ–¥—ã**: {active_nodes}\n"
            return server_section
        
        return None
        
    except Exception as e:
        logger.error(f"Error getting server info: {e}")
        return None

async def get_system_stats():
    """Get system statistics based on configuration settings"""
    stats_sections = []
    
    try:
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
        if DASHBOARD_SHOW_SYSTEM_STATS:
            try:
                system_stats = await get_local_system_stats()
                if system_stats:
                    stats_sections.append(system_stats)
            except Exception as e:
                logger.error(f"Error getting system stats: {e}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
        if DASHBOARD_SHOW_USERS_COUNT:
            try:
                user_stats = await get_user_stats()
                if user_stats:
                    stats_sections.append(user_stats)
            except Exception as e:
                logger.error(f"Error getting user stats: {e}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–∑–ª–æ–≤ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
        if DASHBOARD_SHOW_NODES_COUNT:
            try:
                node_stats = await get_node_stats()
                if node_stats:
                    stats_sections.append(node_stats)
            except Exception as e:
                logger.error(f"Error getting node stats: {e}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
        if DASHBOARD_SHOW_TRAFFIC_STATS:
            try:
                traffic_stats = await get_traffic_stats()
                if traffic_stats:
                    stats_sections.append(traffic_stats)
            except Exception as e:
                logger.warning(f"Could not get realtime traffic stats: {e}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
        if DASHBOARD_SHOW_SERVER_INFO:
            try:
                server_stats = await get_server_info()
                if server_stats:
                    stats_sections.append(server_stats)
            except Exception as e:
                logger.error(f"Error getting server stats: {e}")
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        if stats_sections:
            result = "üìà **–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n" + "\n".join(stats_sections)
        else:
            result = "üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
        
        return result
        
    except Exception as e:
        logger.error(f"Error getting system stats: {e}")
        return "üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞**"

# ================ MAIN MENU ================

async def show_main_menu(message: types.Message, is_callback: bool = False):
    """Show main menu with fixed statistics"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
        stats_text = await get_system_stats()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = "üéõÔ∏è **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Remnawave Admin**\n\n"
        message_text += stats_text + "\n\n"
        message_text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        
        # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="users"))
        builder.row(types.InlineKeyboardButton(text="üñ•Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏", callback_data="nodes"))
        builder.row(types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã", callback_data="stats"))
        builder.row(types.InlineKeyboardButton(text="üåê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö–æ—Å—Ç–∞–º–∏", callback_data="hosts"))
        builder.row(types.InlineKeyboardButton(text="üîå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Inbounds", callback_data="inbounds"))
        builder.row(
            types.InlineKeyboardButton(text="üîÑ –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data="bulk"),
            types.InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="create_user")
        )
        builder.row(types.InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"))
        builder.row(types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_main_menu"))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            if is_callback:
                await message.edit_text(
                    text=message_text,
                    reply_markup=builder.as_markup(),
                    parse_mode="MarkdownV2"
                )
            else:
                await message.answer(
                    text=message_text,
                    reply_markup=builder.as_markup(),
                    parse_mode="MarkdownV2"
                )
        except Exception as parse_error:
            logger.warning(f"Markdown parsing failed, using fallback: {parse_error}")
            # Fallback –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            fallback_text = "üéõÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Remnawave Admin\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
            
            if is_callback:
                await message.edit_text(
                    text=fallback_text,
                    reply_markup=builder.as_markup()
                )
            else:
                await message.answer(
                    text=fallback_text,
                    reply_markup=builder.as_markup()
                )
            
    except Exception as e:
        logger.error(f"Error showing main menu: {e}")
        
        # Emergency fallback
        fallback_text = "üéõÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Remnawave Admin\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="users"))
        builder.row(types.InlineKeyboardButton(text="üñ•Ô∏è –ù–æ–¥—ã", callback_data="nodes"))
        builder.row(types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_main_menu"))
        
        if is_callback:
            await message.edit_text(
                text=fallback_text,
                reply_markup=builder.as_markup()
            )
        else:
            await message.answer(
                text=fallback_text,
                reply_markup=builder.as_markup()
            )

# ================ COMMANDS ================

@router.message(Command("start"), AuthFilter())
async def start_command(message: types.Message, state: FSMContext):
    """Handle /start command"""
    await state.clear()
    await show_main_menu(message)

@router.message(Command("menu"), AuthFilter())
async def menu_command(message: types.Message, state: FSMContext):
    """Handle /menu command"""
    await state.clear()
    await show_main_menu(message)

@router.message(Command("status"), AuthFilter())
async def status_command(message: types.Message):
    """Show detailed system status with fixed date parsing"""
    try:
        status_text = "üîß **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã**\n\n"
        
        # API —Å—Ç–∞—Ç—É—Å
        try:
            users_data = await get_all_users()
            status_text += "‚úÖ **API**: –î–æ—Å—Ç—É–ø–Ω–æ\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º –¥–∞—Ç
            users_count = len(users_data) if users_data else 0
            if users_data:
                active_users = 0
                now_utc = get_current_utc_time()
                
                for user in users_data:
                    status = user.get('status', '').upper()
                    is_disabled = user.get('isDisabled', False)
                    
                    if is_disabled:
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º
                    expire_at = user.get('expireAt')
                    is_expired = False
                    if expire_at:
                        expire_date = parse_expiry_date_safe(expire_at)
                        if expire_date and expire_date < now_utc:
                            is_expired = True
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞
                    traffic_limit = user.get('trafficLimit', 0)
                    used_traffic = user.get('usedTraffic', 0)
                    traffic_exceeded = False
                    
                    if traffic_limit and traffic_limit > 0:
                        if used_traffic >= traffic_limit:
                            traffic_exceeded = True
                    
                    if status == 'ACTIVE' and not is_expired and not traffic_exceeded:
                        active_users += 1
                
                status_text += f"üìä **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**: {active_users}/{users_count}\n"
            else:
                status_text += f"üìä **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**: 0\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–¥
            nodes_data = await get_all_nodes()
            if nodes_data:
                nodes_count = len(nodes_data)
                online_nodes = sum(1 for node in nodes_data 
                                 if node.get('isConnected', False) and not node.get('isDisabled', False))
                status_text += f"üñ•Ô∏è **–ù–æ–¥—ã**: {online_nodes}/{nodes_count}\n"
            else:
                status_text += f"üñ•Ô∏è **–ù–æ–¥—ã**: 0/0\n"
            
        except Exception as e:
            status_text += f"‚ùå **API**: –û—à–∏–±–∫–∞ \\- {safe_escape_markdown(str(e)[:50])}\n"
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        try:
            system_stats = await SystemAPI.get_stats()
            if system_stats:
                status_text += "\nüîß **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**:\n"
                if system_stats.get('version'):
                    status_text += f"‚Ä¢ –í–µ—Ä—Å–∏—è: {safe_escape_markdown(system_stats.get('version'))}\n"
                if system_stats.get('uptime'):
                    uptime_str = format_uptime(system_stats.get('uptime'))
                    status_text += f"‚Ä¢ Uptime: {safe_escape_markdown(uptime_str)}\n"
                if system_stats.get('memoryUsage'):
                    status_text += f"‚Ä¢ –ü–∞–º—è—Ç—å: {system_stats.get('memoryUsage')}%\n"
                if system_stats.get('cpuUsage'):
                    status_text += f"‚Ä¢ CPU: {system_stats.get('cpuUsage')}%\n"
        except Exception as e:
            status_text += f"\n‚ùå **–°–∏—Å—Ç–µ–º–∞**: {safe_escape_markdown(str(e)[:50])}\n"
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã (–ª–æ–∫–∞–ª—å–Ω—ã–µ)
        try:
            local_stats = await get_local_system_stats()
            if local_stats:
                status_text += f"\n{local_stats}"
        except Exception as e:
            status_text += f"\n‚ùå **–õ–æ–∫–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞**: {safe_escape_markdown(str(e)[:50])}\n"
        
        # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        status_text += f"\nüïê **–í—Ä–µ–º—è**: {safe_escape_markdown(current_time)}\n"
        
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_status"))
        builder.row(types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        
        try:
            await message.answer(
                text=status_text,
                reply_markup=builder.as_markup(),
                parse_mode="MarkdownV2"
            )
        except Exception as parse_error:
            # Fallback –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã",
                reply_markup=builder.as_markup()
            )
        
    except Exception as e:
        logger.error(f"Error in status command: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )

@router.message(Command("help"), AuthFilter())
async def help_command(message: types.Message):
    """Show help information"""
    help_text = """
ü§ñ **Remnawave Admin Bot - –°–ø—Ä–∞–≤–∫–∞**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ `/status` - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

**–†–∞–∑–¥–µ–ª—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**
‚Ä¢ üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏** - –°–æ–∑–¥–∞–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ üñ•Ô∏è **–°–µ—Ä–≤–µ—Ä—ã** - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–¥–∞–º–∏ –∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏
‚Ä¢ üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –∏ —Ç—Ä–∞—Ñ–∏–∫–∞
‚Ä¢ üåê **–•–æ—Å—Ç—ã** - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞–º–∏ –∏ —Ö–æ—Å—Ç–∞–º–∏
‚Ä¢ üîå **Inbounds** - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
‚Ä¢ üîÑ **–ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏** - –ì—Ä—É–ø–ø–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è

**–§—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω–∞–º (–ë–∞–∑–æ–≤—ã–π, –ü—Ä–µ–º–∏—É–º, –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π, –ü—Ä–æ–±–Ω—ã–π)
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—Ç—Ä–∞—Ñ–∏–∫, —Å—Ä–æ–∫–∏, –æ–ø–∏—Å–∞–Ω–∏–µ)
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ (HWID)
‚Ä¢ –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è

**–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:**
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –¢—Ä–∞—Ñ–∏–∫ –ø–æ –Ω–æ–¥–∞–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º\\.
    """
    
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    
    await message.answer(
        text=help_text,
        reply_markup=builder.as_markup()
    )

# ================ CALLBACK HANDLERS ================

@router.callback_query(F.data == "main_menu", AuthFilter())
async def main_menu_callback(callback: types.CallbackQuery, state: FSMContext):
    """Handle main menu callback"""
    await callback.answer()
    await state.clear()
    await show_main_menu(callback.message, is_callback=True)

@router.callback_query(F.data == "refresh_main_menu", AuthFilter())
async def refresh_main_menu(callback: types.CallbackQuery):
    """Refresh main menu with proper error handling"""
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
    
    try:
        await show_main_menu(callback.message, is_callback=True)
        
    except Exception as e:
        logger.error(f"Error refreshing main menu: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)

@router.callback_query(F.data == "refresh_status", AuthFilter())
async def refresh_status(callback: types.CallbackQuery):
    """Refresh system status with proper error handling"""
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Å–µ–≤–¥–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ status_command
        await status_command(callback.message)
        
    except Exception as e:
        logger.error(f"Error refreshing status: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )

@router.callback_query(F.data == "refresh_stats", AuthFilter())
async def refresh_stats(callback: types.CallbackQuery):
    """Refresh main menu statistics"""
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    await show_main_menu(callback.message, is_callback=True)

@router.callback_query(F.data == "error_occurred", AuthFilter())
async def handle_error_callback(callback: types.CallbackQuery):
    """Handle error callback"""
    await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    await show_main_menu(callback.message, is_callback=True)

logger.info("Start handlers module loaded successfully with datetime and markdown fixes")