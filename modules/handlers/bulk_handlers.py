from aiogram import Router, types, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, timedelta
import logging
import asyncio

from modules.handlers.auth import AuthFilter
from modules.handlers.states import BulkStates
from modules.api.client import RemnaAPI
from modules.utils.formatters_aiogram import (
    format_bytes, format_datetime, escape_markdown
)

logger = logging.getLogger(__name__)

router = Router()

# ================ BULK OPERATIONS MENU ================

@router.callback_query(F.data == "bulk", AuthFilter())
async def handle_bulk_menu(callback: types.CallbackQuery, state: FSMContext):
    """Handle bulk operations menu selection"""
    await callback.answer()
    await state.clear()
    await show_bulk_menu(callback)

async def show_bulk_menu(callback: types.CallbackQuery):
    """Show bulk operations menu"""
    builder = InlineKeyboardBuilder()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    builder.row(types.InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫ –≤—Å–µ–º", callback_data="bulk_reset_all_traffic"))
    builder.row(types.InlineKeyboardButton(text="‚ö° –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–µ–≤—ã—Å–∏–≤—à–∏–º –ª–∏–º–∏—Ç", callback_data="bulk_reset_overlimit"))
    builder.row(types.InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö", callback_data="bulk_delete_inactive"))
    builder.row(types.InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏—Ö", callback_data="bulk_delete_expired"))
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    builder.row(types.InlineKeyboardButton(text="üìÖ –ü—Ä–æ–¥–ª–∏—Ç—å –≤—Å–µ–º –Ω–∞ –º–µ—Å—è—Ü", callback_data="bulk_extend_month"))
    builder.row(types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="bulk_update_all"))
    
    # –û–ø–µ—Ä–∞—Ü–∏–∏ —Å inbound'–∞–º–∏
    builder.row(types.InlineKeyboardButton(text="üîå –û–ø–µ—Ä–∞—Ü–∏–∏ —Å Inbounds", callback_data="bulk_inbounds"))
    
    # –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –Ω–æ–¥–∞–º–∏
    builder.row(types.InlineKeyboardButton(text="üñ•Ô∏è –û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏", callback_data="bulk_nodes"))
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —ç–∫—Å–ø–æ—Ä—Ç
    builder.row(
        types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π", callback_data="bulk_stats"),
        types.InlineKeyboardButton(text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="bulk_export")
    )
    
    builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))

    message = "üîÑ **–ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏**\n\n"
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        sdk = RemnaAPI.get_sdk()
        users_response = await sdk.users.get_all_users_v2(start=0, size=1000)
        
        if users_response and users_response.users:
            total_users = len(users_response.users)
            active_users = sum(1 for user in users_response.users if user.is_active)
            inactive_users = total_users - active_users
            
            # –ü–æ–¥—Å—á–µ—Ç –∏—Å—Ç–µ–∫—à–∏—Ö –∏ –ø—Ä–µ–≤—ã—Å–∏–≤—à–∏—Ö –ª–∏–º–∏—Ç
            now = datetime.now()
            expired_users = 0
            overlimit_users = 0
            
            for user in users_response.users:
                # –ò—Å—Ç–µ–∫—à–∏–µ
                if user.expire_at:
                    try:
                        expire_date = datetime.fromisoformat(user.expire_at.replace('Z', '+00:00'))
                        if expire_date < now:
                            expired_users += 1
                    except:
                        pass
                
                # –ü—Ä–µ–≤—ã—Å–∏–≤—à–∏–µ –ª–∏–º–∏—Ç
                if user.traffic_limit and user.used_traffic:
                    if user.used_traffic >= user.traffic_limit:
                        overlimit_users += 1
            
            message += f"**üìà –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}\n"
            message += f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {inactive_users}\n"
            message += f"‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö: {expired_users}\n"
            message += f"‚Ä¢ –ü—Ä–µ–≤—ã—Å–∏–≤—à–∏—Ö –ª–∏–º–∏—Ç: {overlimit_users}\n\n"
        
    except Exception as e:
        logger.error(f"Error getting bulk stats: {e}")
        message += "**üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:** –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n\n"
    
    message += "‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!** –≠—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—é—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.\n\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    await callback.message.edit_text(
        text=message,
        reply_markup=builder.as_markup()
    )

# ================ TRAFFIC OPERATIONS ================

@router.callback_query(F.data == "bulk_reset_all_traffic", AuthFilter())
async def bulk_reset_all_traffic_confirm(callback: types.CallbackQuery, state: FSMContext):
    """Confirm reset traffic for all users"""
    await callback.answer()
    
    try:
        sdk = RemnaAPI.get_sdk()
        users_response = await sdk.users.get_all_users_v2(start=0, size=1000)
        
        total_users = len(users_response.users) if users_response and users_response.users else 0
        users_with_traffic = sum(1 for user in users_response.users if user.used_traffic and user.used_traffic > 0) if users_response and users_response.users else 0
        
        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(text="‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ–º", callback_data="confirm_reset_all_traffic"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="bulk")
        )
        
        message = f"üîÑ **–°–±—Ä–æ—Å —Ç—Ä–∞—Ñ–∏–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º**\n\n"
        message += f"**–ó–∞—Ç—Ä–æ–Ω—É—Ç–æ –±—É–¥–µ—Ç:**\n"
        message += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        message += f"‚Ä¢ –° –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º —Ç—Ä–∞—Ñ–∏–∫–æ–º: {users_with_traffic}\n\n"
        message += f"‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!** –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n"
        message += f"–£ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—É–¥–µ—Ç –æ–±–Ω—É–ª–µ–Ω —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞.\n\n"
        message += f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error getting users for traffic reset: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)

@router.callback_query(F.data == "confirm_reset_all_traffic", AuthFilter())
async def confirm_reset_all_traffic(callback: types.CallbackQuery, state: FSMContext):
    """Reset traffic for all users"""
    await callback.answer()
    await callback.message.edit_text("üîÑ –°–±—Ä–∞—Å—ã–≤–∞—é —Ç—Ä–∞—Ñ–∏–∫ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
    
    try:
        sdk = RemnaAPI.get_sdk()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_response = await sdk.users.get_all_users_v2(start=0, size=1000)
        
        if not users_response or not users_response.users:
            await callback.message.edit_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="bulk")
                ]])
            )
            return
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç—Ä–∞—Ñ–∏–∫ –ø–æ —á–∞—Å—Ç—è–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–æ–≤
        success_count = 0
        error_count = 0
        total_users = len(users_response.users)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ 10
        for i in range(0, total_users, 10):
            batch = users_response.users[i:i+10]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if i > 0:
                progress = (i / total_users) * 100
                await callback.message.edit_text(
                    f"üîÑ –°–±—Ä–∞—Å—ã–≤–∞—é —Ç—Ä–∞—Ñ–∏–∫... {progress:.1f}% ({i}/{total_users})"
                )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É
            for user in batch:
                try:
                    if user.used_traffic and user.used_traffic > 0:
                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç—Ä–∞—Ñ–∏–∫ —á–µ—Ä–µ–∑ SDK
                        success = await sdk.users.reset_user_traffic(user.uuid)
                        if success:
                            success_count += 1
                        else:
                            error_count += 1
                except Exception as e:
                    logger.error(f"Error resetting traffic for user {user.uuid}: {e}")
                    error_count += 1
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
            await asyncio.sleep(0.1)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="bulk"))
        
        if success_count > 0:
            message = f"‚úÖ **–°–±—Ä–æ—Å —Ç—Ä–∞—Ñ–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω**\n\n"
            message += f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count}\n"
            if error_count > 0:
                message += f"‚Ä¢ –û—à–∏–±–æ–∫: {error_count}\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}"
        else:
            message = f"‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫**\n\n"
            message += f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            message += f"‚Ä¢ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç—Ä–∞—Ñ–∏–∫–æ–º\n"
            message += f"‚Ä¢ –û—à–∏–±–∫–∏ API\n"
            message += f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error in bulk traffic reset: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ç—Ä–∞—Ñ–∏–∫–∞",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="bulk")
            ]])
        )

# ================ RESET OVERLIMIT TRAFFIC ================

@router.callback_query(F.data == "bulk_reset_overlimit", AuthFilter())
async def bulk_reset_overlimit_confirm(callback: types.CallbackQuery, state: FSMContext):
    """Confirm reset traffic for users who exceeded limit"""
    await callback.answer()
    
    try:
        sdk = RemnaAPI.get_sdk()
        users_response = await sdk.users.get_all_users_v2(start=0, size=1000)
        
        if not users_response or not users_response.users:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–µ–≤—ã—Å–∏–≤—à–∏—Ö –ª–∏–º–∏—Ç
        overlimit_users = []
        for user in users_response.users:
            if user.traffic_limit and user.used_traffic:
                if user.used_traffic >= user.traffic_limit:
                    overlimit_users.append(user)
        
        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(text="‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–µ–≤—ã—Å–∏–≤—à–∏–º", callback_data="confirm_reset_overlimit"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="bulk")
        )
        
        message = f"‚ö° **–°–±—Ä–æ—Å —Ç—Ä–∞—Ñ–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –ø—Ä–µ–≤—ã—Å–∏–≤—à–∏–º –ª–∏–º–∏—Ç**\n\n"
        message += f"**–ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:** {len(overlimit_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        
        if len(overlimit_users) > 0:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–±—Ä–æ—Å–∞
            message += f"**–ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n"
            for i, user in enumerate(overlimit_users[:5]):
                usage_percent = (user.used_traffic / user.traffic_limit * 100) if user.traffic_limit > 0 else 0
                traffic_info = f" ({format_bytes(user.used_traffic)}/{format_bytes(user.traffic_limit)} - {usage_percent:.1f}%)"
                message += f"‚Ä¢ {escape_markdown(user.username)}{traffic_info}\n"
            
            if len(overlimit_users) > 5:
                message += f"‚Ä¢ ... –∏ –µ—â–µ {len(overlimit_users) - 5}\n"
        
        message += f"\nüí° **–î–µ–π—Å—Ç–≤–∏–µ:** –¢—Ä–∞—Ñ–∏–∫ –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω –¥–æ 0, –ª–∏–º–∏—Ç—ã –æ—Å—Ç–∞–Ω—É—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.\n"
        message += f"‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!** –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n\n"
        message += f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error getting overlimit users: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)

@router.callback_query(F.data == "confirm_reset_overlimit", AuthFilter())
async def confirm_reset_overlimit(callback: types.CallbackQuery, state: FSMContext):
    """Reset traffic for users who exceeded limit"""
    await callback.answer()
    await callback.message.edit_text("‚ö° –°–±—Ä–∞—Å—ã–≤–∞—é —Ç—Ä–∞—Ñ–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –ø—Ä–µ–≤—ã—Å–∏–≤—à–∏–º –ª–∏–º–∏—Ç...")
    
    try:
        sdk = RemnaAPI.get_sdk()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_response = await sdk.users.get_all_users_v2(start=0, size=1000)
        
        if not users_response or not users_response.users:
            await callback.message.edit_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="bulk")
                ]])
            )
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–µ–≤—ã—Å–∏–≤—à–∏—Ö –ª–∏–º–∏—Ç
        overlimit_users = []
        for user in users_response.users:
            if user.traffic_limit and user.used_traffic:
                if user.used_traffic >= user.traffic_limit:
                    overlimit_users.append(user)
        
        if not overlimit_users:
            await callback.message.edit_text(
                "‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–µ–≤—ã—Å–∏–≤—à–∏—Ö –ª–∏–º–∏—Ç, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="bulk")
                ]])
            )
            return
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç—Ä–∞—Ñ–∏–∫ –ø—Ä–µ–≤—ã—Å–∏–≤—à–∏–º –ª–∏–º–∏—Ç
        success_count = 0
        error_count = 0
        
        for i, user in enumerate(overlimit_users):
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if i > 0 and i % 5 == 0:
                    progress = (i / len(overlimit_users)) * 100
                    await callback.message.edit_text(
                        f"‚ö° –°–±—Ä–∞—Å—ã–≤–∞—é —Ç—Ä–∞—Ñ–∏–∫ –ø—Ä–µ–≤—ã—Å–∏–≤—à–∏–º... {progress:.1f}% ({i}/{len(overlimit_users)})"
                    )
                
                success = await sdk.users.reset_user_traffic(user.uuid)
                if success:
                    success_count += 1
                else:
                    error_count += 1
                    
            except Exception as e:
                logger.error(f"Error resetting traffic for overlimit user {user.uuid}: {e}")
                error_count += 1
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="bulk"))
        
        message = f"‚úÖ **–°–±—Ä–æ—Å —Ç—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–µ–≤—ã—Å–∏–≤—à–∏–º –ª–∏–º–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω**\n\n"
        message += f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–æ: {success_count}\n"
        if error_count > 0:
            message += f"‚Ä¢ –û—à–∏–±–æ–∫: {error_count}\n"
        message += f"‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(overlimit_users)}\n\n"
        message += f"üí° **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN."
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error in bulk reset overlimit: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–µ–≤—ã—Å–∏–≤—à–∏—Ö –ª–∏–º–∏—Ç",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="bulk")
            ]])
        )

# ================ DELETE OPERATIONS ================

@router.callback_query(F.data == "bulk_delete_inactive", AuthFilter())
async def bulk_delete_inactive_confirm(callback: types.CallbackQuery, state: FSMContext):
    """Confirm delete inactive users"""
    await callback.answer()
    
    try:
        sdk = RemnaAPI.get_sdk()
        users_response = await sdk.users.get_all_users_v2(start=0, size=1000)
        
        if not users_response or not users_response.users:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        
        inactive_users = [user for user in users_response.users if not user.is_active]
        
        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö", callback_data="confirm_delete_inactive"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="bulk")
        )
        
        message = f"‚ùå **–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
        message += f"**–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:** {len(inactive_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        
        if len(inactive_users) > 0:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            message += f"**–ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n"
            for i, user in enumerate(inactive_users[:5]):
                message += f"‚Ä¢ {escape_markdown(user.username)}\n"
            
            if len(inactive_users) > 5:
                message += f"‚Ä¢ ... –∏ –µ—â–µ {len(inactive_users) - 5}\n"
        
        message += f"\n‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!** –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n"
        message += f"–í—Å–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n\n"
        message += f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error getting inactive users: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)

@router.callback_query(F.data == "confirm_delete_inactive", AuthFilter())
async def confirm_delete_inactive(callback: types.CallbackQuery, state: FSMContext):
    """Delete all inactive users"""
    await callback.answer()
    await callback.message.edit_text("‚ùå –£–¥–∞–ª—è—é –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    try:
        sdk = RemnaAPI.get_sdk()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_response = await sdk.users.get_all_users_v2(start=0, size=1000)
        
        if not users_response or not users_response.users:
            await callback.message.edit_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="bulk")
                ]])
            )
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        inactive_users = [user for user in users_response.users if not user.is_active]
        
        if not inactive_users:
            await callback.message.edit_text(
                "‚ÑπÔ∏è –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="bulk")
                ]])
            )
            return
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        success_count = 0
        error_count = 0
        
        for i, user in enumerate(inactive_users):
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if i > 0 and i % 5 == 0:
                    progress = (i / len(inactive_users)) * 100
                    await callback.message.edit_text(
                        f"‚ùå –£–¥–∞–ª—è—é –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö... {progress:.1f}% ({i}/{len(inactive_users)})"
                    )
                
                success = await sdk.users.delete_user(user.uuid)
                if success:
                    success_count += 1
                else:
                    error_count += 1
                    
            except Exception as e:
                logger.error(f"Error deleting user {user.uuid}: {e}")
                error_count += 1
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="bulk"))
        
        message = f"‚úÖ **–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ**\n\n"
        message += f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: {success_count}\n"
        if error_count > 0:
            message += f"‚Ä¢ –û—à–∏–±–æ–∫: {error_count}\n"
        message += f"‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(inactive_users)}"
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error in bulk delete inactive: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="bulk")
            ]])
        )

@router.callback_query(F.data == ("bulk_delete_expired"), AuthFilter())
async def bulk_delete_expired_confirm(callback: types.CallbackQuery, state: FSMContext):
    """Confirm delete expired users"""
    await callback.answer()
    
    try:
        sdk = RemnaAPI.get_sdk()
        users_response = await sdk.users.get_all_users_v2(start=0, size=1000)
        
        if not users_response or not users_response.users:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        now = datetime.now()
        expired_users = []
        
        for user in users_response.users:
            if user.expire_at:
                try:
                    expire_date = datetime.fromisoformat(user.expire_at.replace('Z', '+00:00'))
                    if expire_date < now:
                        expired_users.append(user)
                except:
                    pass
        
        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏—Ö", callback_data="confirm_delete_expired"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="bulk")
        )
        
        message = f"‚ùå **–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º —Å—Ä–æ–∫–æ–º**\n\n"
        message += f"**–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:** {len(expired_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        
        if len(expired_users) > 0:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            message += f"**–ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n"
            for i, user in enumerate(expired_users[:5]):
                expire_date = ""
                if user.expire_at:
                    try:
                        expire_dt = datetime.fromisoformat(user.expire_at.replace('Z', '+00:00'))
                        expire_date = f" (–∏—Å—Ç–µ–∫ {expire_dt.strftime('%d.%m.%Y')})"
                    except:
                        pass
                message += f"‚Ä¢ {escape_markdown(user.username)}{expire_date}\n"
            
            if len(expired_users) > 5:
                message += f"‚Ä¢ ... –∏ –µ—â–µ {len(expired_users) - 5}\n"
        
        message += f"\n‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!** –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n"
        message += f"–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∏—Å—Ç–µ–∫—à–∏–º —Å—Ä–æ–∫–æ–º –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n\n"
        message += f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error getting expired users: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)

@router.callback_query(F.data == "confirm_delete_expired", AuthFilter())
async def confirm_delete_expired(callback: types.CallbackQuery, state: FSMContext):
    """Delete all expired users"""
    await callback.answer()
    await callback.message.edit_text("‚ùå –£–¥–∞–ª—è—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º —Å—Ä–æ–∫–æ–º...")
    
    try:
        sdk = RemnaAPI.get_sdk()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_response = await sdk.users.get_all_users_v2(start=0, size=1000)
        
        if not users_response or not users_response.users:
            await callback.message.edit_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="bulk")
                ]])
            )
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        now = datetime.now()
        expired_users = []
        
        for user in users_response.users:
            if user.expire_at:
                try:
                    expire_date = datetime.fromisoformat(user.expire_at.replace('Z', '+00:00'))
                    if expire_date < now:
                        expired_users.append(user)
                except:
                    pass
        
        if not expired_users:
            await callback.message.edit_text(
                "‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º —Å—Ä–æ–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="bulk")
                ]])
            )
            return
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        success_count = 0
        error_count = 0
        
        for i, user in enumerate(expired_users):
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if i > 0 and i % 5 == 0:
                    progress = (i / len(expired_users)) * 100
                    await callback.message.edit_text(
                        f"‚ùå –£–¥–∞–ª—è—é –∏—Å—Ç–µ–∫—à–∏—Ö... {progress:.1f}% ({i}/{len(expired_users)})"
                    )
                
                success = await sdk.users.delete_user(user.uuid)
                if success:
                    success_count += 1
                else:
                    error_count += 1
                    
            except Exception as e:
                logger.error(f"Error deleting expired user {user.uuid}: {e}")
                error_count += 1
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="bulk"))
        
        message = f"‚úÖ **–£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ**\n\n"
        message += f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: {success_count}\n"
        if error_count > 0:
            message += f"‚Ä¢ –û—à–∏–±–æ–∫: {error_count}\n"
        message += f"‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(expired_users)}"
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error in bulk delete expired: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="bulk")
            ]])
        )

# ================ EXTEND OPERATIONS ================

@router.callback_query(F.data == "bulk_extend_month", AuthFilter())
async def bulk_extend_month_confirm(callback: types.CallbackQuery, state: FSMContext):
    """Confirm extend all users for one month"""
    await callback.answer()
    
    try:
        sdk = RemnaAPI.get_sdk()
        users_response = await sdk.users.get_all_users_v2(start=0, size=1000)
        
        if not users_response or not users_response.users:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        
        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(text="‚úÖ –î–∞, –ø—Ä–æ–¥–ª–∏—Ç—å –≤—Å–µ–º", callback_data="confirm_extend_month"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="bulk")
        )
        
        total_users = len(users_response.users)
        
        message = f"üìÖ **–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω–∞ –º–µ—Å—è—Ü –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º**\n\n"
        message += f"**–ë—É–¥–µ—Ç –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ:** {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        message += f"**–û–ø–µ—Ä–∞—Ü–∏—è:**\n"
        message += f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–µ–∑ —Å—Ä–æ–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å—Ä–æ–∫ —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü\n"
        message += f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å—Ä–æ–∫–æ–º - –¥–æ–±–∞–≤–∏—Ç—Å—è –º–µ—Å—è—Ü\n\n"
        message += f"‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!** –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n\n"
        message += f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error getting users for extend: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)

@router.callback_query(F.data == "confirm_extend_month", AuthFilter())
async def confirm_extend_month(callback: types.CallbackQuery, state: FSMContext):
    """Extend all users for one month"""
    await callback.answer()
    await callback.message.edit_text("üìÖ –ü—Ä–æ–¥–ª–µ–≤–∞—é –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –º–µ—Å—è—Ü...")
    
    try:
        sdk = RemnaAPI.get_sdk()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_response = await sdk.users.get_all_users_v2(start=0, size=1000)
        
        if not users_response or not users_response.users:
            await callback.message.edit_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="bulk")
                ]])
            )
            return
        
        # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        success_count = 0
        error_count = 0
        total_users = len(users_response.users)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
        now = datetime.now()
        one_month_later = now + timedelta(days=30)
        
        for i, user in enumerate(users_response.users):
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if i > 0 and i % 10 == 0:
                    progress = (i / total_users) * 100
                    await callback.message.edit_text(
                        f"üìÖ –ü—Ä–æ–¥–ª–µ–≤–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π... {progress:.1f}% ({i}/{total_users})"
                    )
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
                if user.expire_at:
                    try:
                        current_expire = datetime.fromisoformat(user.expire_at.replace('Z', '+00:00'))
                        # –ï—Å–ª–∏ —Å—Ä–æ–∫ –µ—â–µ –Ω–µ –∏—Å—Ç–µ–∫, –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—è—Ü –∫ —Ç–µ–∫—É—â–µ–º—É —Å—Ä–æ–∫—É
                        if current_expire > now:
                            new_expire = current_expire + timedelta(days=30)
                        else:
                            # –ï—Å–ª–∏ —Å—Ä–æ–∫ –∏—Å—Ç–µ–∫, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Å—è—Ü –æ—Ç —Å–µ–≥–æ–¥–Ω—è
                            new_expire = one_month_later
                    except:
                        new_expire = one_month_later
                else:
                    # –ï—Å–ª–∏ —Å—Ä–æ–∫–∞ –Ω–µ –±—ã–ª–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Å—è—Ü –æ—Ç —Å–µ–≥–æ–¥–Ω—è
                    new_expire = one_month_later
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ SDK
                update_data = {
                    'expire_at': new_expire.isoformat()
                }
                
                success = await sdk.users.update_user(user.uuid, update_data)
                if success:
                    success_count += 1
                else:
                    error_count += 1
                    
            except Exception as e:
                logger.error(f"Error extending user {user.uuid}: {e}")
                error_count += 1
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="bulk"))
        
        message = f"‚úÖ **–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω–∞ –º–µ—Å—è—Ü –∑–∞–≤–µ—Ä—à–µ–Ω–æ**\n\n"
        message += f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–æ: {success_count}\n"
        if error_count > 0:
            message += f"‚Ä¢ –û—à–∏–±–æ–∫: {error_count}\n"
        message += f"‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_users}\n\n"
        message += f"**–ù–æ–≤—ã–π —Å—Ä–æ–∫ –∏—Å—Ç–µ—á–µ–Ω–∏—è:** {one_month_later.strftime('%d.%m.%Y')}"
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error in bulk extend month: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="bulk")
            ]])
        )

# ================ PLACEHOLDER OPERATIONS ================

@router.callback_query(F.data == "bulk_update_all", AuthFilter())
async def bulk_update_all_placeholder(callback: types.CallbackQuery):
    """Bulk update all users placeholder"""
    await callback.answer()
    
    await callback.message.edit_text(
        "üîÑ **–ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
        "üöß –§—É–Ω–∫—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
        "**–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
        "‚Ä¢ –ú–∞—Å—Å–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ —Ç—Ä–∞—Ñ–∏–∫–∞\n"
        "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ inbound'–æ–≤ –¥–ª—è –≤—Å–µ—Ö\n"
        "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏\n\n"
        "–í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é –≤—ã—à–µ.",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="bulk")
        ]])
    )

@router.callback_query(F.data == "bulk_inbounds", AuthFilter())
async def bulk_inbounds_placeholder(callback: types.CallbackQuery):
    """Bulk inbounds operations placeholder"""
    await callback.answer()
    
    await callback.message.edit_text(
        "üîå **–ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å Inbounds**\n\n"
        "üöß –§—É–Ω–∫—Ü–∏–∏ –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å Inbound'–∞–º–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
        "**–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ Inbound –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
        "‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ Inbound —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ –ü–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Inbound'–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏\n"
        "‚Ä¢ –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Inbound'–æ–≤",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="bulk")
        ]])
    )

@router.callback_query(F.data == "bulk_nodes", AuthFilter())
async def bulk_nodes_placeholder(callback: types.CallbackQuery):
    """Bulk nodes operations placeholder"""
    await callback.answer()
    
    await callback.message.edit_text(
        "üñ•Ô∏è **–ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏**\n\n"
        "üöß –§—É–Ω–∫—Ü–∏–∏ –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
        "**–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
        "‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤\n"
        "‚Ä¢ –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
        "‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="bulk")
        ]])
    )

@router.callback_query(F.data == "bulk_stats", AuthFilter())
async def bulk_stats_placeholder(callback: types.CallbackQuery):
    """Bulk statistics placeholder"""
    await callback.answer()
    
    await callback.message.edit_text(
        "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π**\n\n"
        "üöß –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
        "**–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
        "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π\n"
        "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="bulk")
        ]])
    )

@router.callback_query(F.data == "bulk_export", AuthFilter())
async def bulk_export_placeholder(callback: types.CallbackQuery):
    """Bulk export placeholder"""
    await callback.answer()
    
    await callback.message.edit_text(
        "üìÑ **–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö**\n\n"
        "üöß –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
        "**–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞:**\n"
        "‚Ä¢ CSV —Ñ–∞–π–ª—ã —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ JSON –¥–∞–º–ø—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π\n"
        "‚Ä¢ –û—Ç—á–µ—Ç—ã –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ\n"
        "‚Ä¢ Backup –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="bulk")
        ]])
    )

def register_bulk_handlers(dp):
    """Register bulk handlers"""
    dp.include_router(router)
