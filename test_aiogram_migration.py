#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ Aiogram
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
"""
import sys
import asyncio
import logging
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
        from modules.config import ADMIN_USER_IDS
        print("‚úÖ modules.config")
        
        # Aiogram handlers
        from modules.handlers import register_all_handlers
        print("‚úÖ modules.handlers")
        
        # –û—Ç–¥–µ–ª—å–Ω—ã–µ handlers
        from modules.handlers.start_handler import router as start_router
        from modules.handlers.user_handlers import router as user_router
        from modules.handlers.node_handlers import router as node_router
        from modules.handlers.inbound_handlers import router as inbound_router
        from modules.handlers.bulk_handlers import router as bulk_router
        from modules.handlers.stats_handlers import router as stats_router
        from modules.handlers.host_handlers import router as host_router
        from modules.handlers.menu_handler import router as menu_router
        print("‚úÖ –í—Å–µ router'—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # States –∏ auth
        from modules.handlers.states import UserStates, NodeStates, SystemStates
        from modules.handlers.auth import AuthFilter
        print("‚úÖ States –∏ auth")
        
        # –£—Ç–∏–ª–∏—Ç—ã
        from modules.utils.formatters_aiogram import format_bytes, format_datetime
        from modules.utils.keyboard_helpers import KeyboardHelper
        print("‚úÖ –£—Ç–∏–ª–∏—Ç—ã")
        
        # API –∫–ª–∏–µ–Ω—Ç—ã
        from modules.api.sdk_client import RemnaSDK
        from modules.api.client import RemnaAPI
        print("‚úÖ API –∫–ª–∏–µ–Ω—Ç—ã")
        
        print("‚úÖ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def test_bot_initialization():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞...")
    
    try:
        load_dotenv()
        
        from aiogram import Bot, Dispatcher
        from aiogram.fsm.storage.memory import MemoryStorage
        from aiogram.client.default import DefaultBotProperties
        from aiogram.enums import ParseMode
        from modules.handlers import register_all_handlers
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∞
        bot = Bot(
            token="1234567890:TEST-TOKEN-FOR-TESTING-ONLY",
            default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
        )
        
        storage = MemoryStorage()
        dp = Dispatcher(storage=storage)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers
        register_all_handlers(dp)
        
        print("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ä–æ—É—Ç–µ—Ä–æ–≤: {len(dp.sub_routers)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        return False

def test_handlers_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã handlers"""
    print("\nüìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã handlers...")
    
    try:
        from modules.handlers.start_handler import router as start_router
        from modules.handlers.user_handlers import router as user_router
        from modules.handlers.node_handlers import router as node_router
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ—É—Ç–µ—Ä—ã –∏–º–µ—é—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        handlers_count = {
            'start': len(start_router.message.handlers) + len(start_router.callback_query.handlers),
            'user': len(user_router.message.handlers) + len(user_router.callback_query.handlers),
            'node': len(node_router.message.handlers) + len(node_router.callback_query.handlers)
        }
        
        for name, count in handlers_count.items():
            print(f"‚úÖ {name}_router: {count} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
        
        total_handlers = sum(handlers_count.values())
        print(f"‚úÖ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {total_handlers}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
        return False

def test_states_definition():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM...")
    
    try:
        from modules.handlers.states import UserStates, NodeStates, SystemStates
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        user_states = [attr for attr in dir(UserStates) if not attr.startswith('_')]
        node_states = [attr for attr in dir(NodeStates) if not attr.startswith('_')]
        system_states = [attr for attr in dir(SystemStates) if not attr.startswith('_')]
        
        print(f"‚úÖ UserStates: {len(user_states)} —Å–æ—Å—Ç–æ—è–Ω–∏–π")
        print(f"‚úÖ NodeStates: {len(node_states)} —Å–æ—Å—Ç–æ—è–Ω–∏–π") 
        print(f"‚úÖ SystemStates: {len(system_states)} —Å–æ—Å—Ç–æ—è–Ω–∏–π")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π: {e}")
        return False

def test_formatters():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–µ—Ä–æ–≤...")
    
    try:
        from modules.utils.formatters_aiogram import format_bytes, format_datetime, escape_markdown
        from datetime import datetime
        
        # –¢–µ—Å—Ç format_bytes
        assert format_bytes(1024) == "1.0 KB"
        assert format_bytes(1048576) == "1.0 MB"
        print("‚úÖ format_bytes —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç escape_markdown
        assert escape_markdown("test_string") == "test\\_string"
        print("‚úÖ escape_markdown —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç format_datetime
        test_date = datetime.now()
        formatted = format_datetime(test_date)
        assert isinstance(formatted, str)
        print("‚úÖ format_datetime —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–µ—Ä–æ–≤: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ Aiogram\n")
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã", test_imports),
        ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞", test_bot_initialization),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ handlers", test_handlers_structure),
        ("–°–æ—Å—Ç–æ—è–Ω–∏—è FSM", test_states_definition),
        ("–§–æ—Ä–º–∞—Ç–µ—Ä—ã", test_formatters)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                print(f"‚ùå –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–≤–∞–ª–µ–Ω")
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç '{test_name}' —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}/{total}")
    
    if passed == total:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ Aiogram –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print(f"\n‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ {total - passed} —Ç–µ—Å—Ç–∞—Ö. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
