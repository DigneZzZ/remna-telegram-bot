#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
"""
import asyncio
import socket
import sys
import aiohttp
from datetime import datetime

async def test_tcp_connection(host, port):
    """–¢–µ—Å—Ç TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    print(f"[{datetime.now()}] Testing TCP connection to {host}:{port}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–æ–∫–µ—Ç –∏ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(5)
        
        result = sock.connect_ex((host, port))
        if result == 0:
            print(f"‚úÖ TCP connection to {host}:{port} successful")
            sock.close()
            return True
        else:
            print(f"‚ùå TCP connection failed with error code: {result}")
            sock.close()
            return False
            
    except Exception as e:
        print(f"‚ùå TCP connection exception: {e}")
        return False

async def test_http_simple(url):
    """–ü—Ä–æ—Å—Ç–æ–π HTTP —Ç–µ—Å—Ç"""
    print(f"\n[{datetime.now()}] Testing simple HTTP connection to {url}")
    
    try:
        # –°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π HTTP –∫–ª–∏–µ–Ω—Ç
        connector = aiohttp.TCPConnector(
            ssl=False,
            limit=1,
            limit_per_host=1,
            force_close=True,  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            keepalive_timeout=0  # –û—Ç–∫–ª—é—á–∞–µ–º keepalive
        )
        
        timeout = aiohttp.ClientTimeout(total=10, connect=5)
        
        async with aiohttp.ClientSession(
            connector=connector,
            timeout=timeout
        ) as session:
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers = {
                'User-Agent': 'Python/aiohttp',
                'Accept': '*/*'
            }
            
            async with session.get(url, headers=headers) as response:
                print(f"‚úÖ HTTP response: {response.status}")
                print(f"Headers: {dict(response.headers)}")
                text = await response.text()
                print(f"Response length: {len(text)}")
                return True
                
    except aiohttp.ServerDisconnectedError as e:
        print(f"‚ùå Server disconnected: {e}")
        return False
    except Exception as e:
        print(f"‚ùå HTTP connection failed: {e}")
        return False

async def test_dns_resolution(hostname):
    """–¢–µ—Å—Ç DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"""
    print(f"\n[{datetime.now()}] Testing DNS resolution for {hostname}")
    
    try:
        # –†–∞–∑—Ä–µ—à–∞–µ–º –∏–º—è —Ö–æ—Å—Ç–∞
        loop = asyncio.get_event_loop()
        result = await loop.getaddrinfo(hostname, None)
        
        print(f"‚úÖ DNS resolved {hostname} to:")
        for info in result:
            print(f"  - {info[4][0]}")
        return True
        
    except Exception as e:
        print(f"‚ùå DNS resolution failed: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("=== Network Diagnostics ===")
    
    hostname = "remnawave"
    port = 3003
    base_url = f"http://{hostname}:{port}"
    api_url = f"{base_url}/api"
    
    # –¢–µ—Å—Ç 1: DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    dns_ok = await test_dns_resolution(hostname)
    
    # –¢–µ—Å—Ç 2: TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    tcp_ok = await test_tcp_connection(hostname, port)
    
    # –¢–µ—Å—Ç 3: HTTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –±–∞–∑–æ–≤–æ–º—É URL
    http_base_ok = await test_http_simple(base_url)
    
    # –¢–µ—Å—Ç 4: HTTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ API
    http_api_ok = await test_http_simple(api_url)
    
    print(f"\n=== Results ===")
    print(f"DNS Resolution: {'‚úÖ' if dns_ok else '‚ùå'}")
    print(f"TCP Connection: {'‚úÖ' if tcp_ok else '‚ùå'}")
    print(f"HTTP Base: {'‚úÖ' if http_base_ok else '‚ùå'}")
    print(f"HTTP API: {'‚úÖ' if http_api_ok else '‚ùå'}")
    
    if not dns_ok:
        print("\nüîç DNS resolution failed - check container network configuration")
    elif not tcp_ok:
        print("\nüîç TCP connection failed - server may not be running or port blocked")
    elif not http_base_ok and not http_api_ok:
        print("\nüîç HTTP connections failed - server may reject connections immediately")
    
    return all([dns_ok, tcp_ok, http_base_ok or http_api_ok])

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
