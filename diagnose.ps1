# Automated Diagnostic Script for Remnawave Admin Bot
# This script will automatically diagnose and attempt to fix common issues

param(
    [switch]$GetTelegramId,
    [switch]$DebugMode,
    [switch]$CheckEnv,
    [switch]$FullDiagnostic
)

$ErrorActionPreference = "Continue"

function Write-ColorOutput {
    param($Message, $Color = "White")
    Write-Host $Message -ForegroundColor $Color
}

function Write-Step {
    param($StepNumber, $Description)
    Write-ColorOutput "`nüîπ –®–∞–≥ $StepNumber`: $Description" "Cyan"
}

function Check-DockerInstalled {
    try {
        $dockerVersion = docker --version 2>$null
        if ($dockerVersion) {
            Write-ColorOutput "‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $dockerVersion" "Green"
            return $true
        }
    } catch {
        Write-ColorOutput "‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop –¥–ª—è Windows." "Red"
        Write-ColorOutput "   –°–∫–∞—á–∞—Ç—å: https://www.docker.com/products/docker-desktop" "Yellow"
        return $false
    }
}

function Check-EnvFile {
    if (Test-Path ".env") {
        Write-ColorOutput "‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω" "Green"
        
        $envContent = Get-Content ".env" -Raw
        $requiredVars = @("TELEGRAM_BOT_TOKEN", "REMNAWAVE_API_TOKEN", "ADMIN_USER_IDS", "API_BASE_URL")
        
        foreach ($var in $requiredVars) {
            if ($envContent -match "$var\s*=\s*(.+)") {
                $value = $matches[1].Trim()
                if ($value -and $value -ne "your_token_here" -and $value -ne "") {
                    Write-ColorOutput "‚úÖ $var –Ω–∞—Å—Ç—Ä–æ–µ–Ω" "Green"
                } else {
                    Write-ColorOutput "‚ùå $var –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π" "Red"
                }
            } else {
                Write-ColorOutput "‚ùå $var –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env" "Red"
            }
        }
        return $true
    } else {
        Write-ColorOutput "‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω" "Red"
        return $false
    }
}

function Get-TelegramUserId {
    Write-Step "1" "–ó–∞–ø—É—Å–∫ ID –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Telegram ID"
    
    if (-not (Test-Path ".env")) {
        $botToken = Read-Host "–í–≤–µ–¥–∏—Ç–µ TELEGRAM_BOT_TOKEN"
        "TELEGRAM_BOT_TOKEN=$botToken" | Out-File -FilePath ".env" -Encoding UTF8
    }
    
    Write-ColorOutput "ü§ñ –ó–∞–ø—É—Å–∫–∞—é ID –±–æ—Ç–∞..." "Yellow"
    Write-ColorOutput "üì± –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ Telegram ID" "Cyan"
    Write-ColorOutput "‚èπÔ∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è ID" "Yellow"
      try {
        docker compose -f docker-compose-debug.yml --profile id-bot up --build
    } catch {
        Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ID –±–æ—Ç–∞: $($_.Exception.Message)" "Red"
    }
}

function Start-DebugMode {
    Write-Step "2" "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏"
    
    if (-not (Check-EnvFile)) {
        Write-ColorOutput "‚ùå –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∞–π–ª .env –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º debug —Ä–µ–∂–∏–º–∞" "Red"
        return
    }
    
    Write-ColorOutput "üêõ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞ –≤ debug —Ä–µ–∂–∏–º–µ..." "Yellow"
    Write-ColorOutput "üìã –°–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º" "Cyan"
      try {
        # Stop any running containers first
        docker compose -f docker-compose-prod.yml down 2>$null
        docker compose -f docker-compose-debug.yml down 2>$null
        
        # Start in debug mode
        docker compose -f docker-compose-debug.yml --profile debug up --build
    } catch {
        Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ debug —Ä–µ–∂–∏–º–∞: $($_.Exception.Message)" "Red"
    }
}

function Check-Environment {
    Write-Step "3" "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"
    
    $containerName = "remnawave-admin-bot-debug"
    
    # Check if container is running
    $containerStatus = docker ps --format "table {{.Names}}" | Select-String $containerName
    
    if ($containerStatus) {
        Write-ColorOutput "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $containerName —Ä–∞–±–æ—Ç–∞–µ—Ç" "Green"
        
        Write-ColorOutput "`nüîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è..." "Cyan"
        docker exec $containerName python check_env.py
        
        Write-ColorOutput "`nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:" "Cyan"
        docker logs --tail 20 $containerName
    } else {
        Write-ColorOutput "‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $containerName –Ω–µ –∑–∞–ø—É—â–µ–Ω" "Red"
        Write-ColorOutput "   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: .\diagnose.ps1 -DebugMode" "Yellow"
    }
}

function Run-FullDiagnostic {
    Write-ColorOutput "üîç –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê REMNAWAVE ADMIN BOT" "Magenta"
    Write-ColorOutput "=" * 50 "Magenta"
    
    # Step 1: Check Docker
    Write-Step "1" "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker"
    if (-not (Check-DockerInstalled)) {
        return
    }
    
    # Step 2: Check .env file
    Write-Step "2" "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    $envExists = Check-EnvFile
    
    # Step 3: Check running containers
    Write-Step "3" "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    $containers = docker ps --format "table {{.Names}}\t{{.Status}}" | Select-String "remnawave"
    if ($containers) {
        Write-ColorOutput "‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã Remnawave:" "Green"
        $containers | ForEach-Object { Write-ColorOutput "   $_" "White" }
    } else {
        Write-ColorOutput "‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã Remnawave –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã" "Yellow"
    }
    
    # Step 4: Recommendations
    Write-Step "4" "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
    
    if (-not $envExists) {
        Write-ColorOutput "üéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:" "Yellow"
        Write-ColorOutput "1. –ü–æ–ª—É—á–∏—Ç–µ Telegram ID: .\diagnose.ps1 -GetTelegramId" "White"
        Write-ColorOutput "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º ID" "White"
        Write-ColorOutput "3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ debug —Ä–µ–∂–∏–º: .\diagnose.ps1 -DebugMode" "White"
    } elseif (-not $containers) {
        Write-ColorOutput "üéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:" "Yellow"
        Write-ColorOutput "1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ debug —Ä–µ–∂–∏–º: .\diagnose.ps1 -DebugMode" "White"
        Write-ColorOutput "2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏" "White"
        Write-ColorOutput "3. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É /start –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–≤–µ—Ç" "White"
    } else {
        Write-ColorOutput "üéØ –ë–û–¢ –†–ê–ë–û–¢–ê–ï–¢! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:" "Green"
        Write-ColorOutput "1. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É /start" "White"
        Write-ColorOutput "2. –ï—Å–ª–∏ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ ADMIN_USER_IDS" "White"
        Write-ColorOutput "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: .\diagnose.ps1 -CheckEnv" "White"
    }
}

# Main execution logic
Write-ColorOutput "ü§ñ Remnawave Admin Bot - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ v2.0" "Magenta"

if ($GetTelegramId) {
    Get-TelegramUserId
} elseif ($DebugMode) {
    Start-DebugMode
} elseif ($CheckEnv) {
    Check-Environment
} elseif ($FullDiagnostic) {
    Run-FullDiagnostic
} else {
    Write-ColorOutput "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:" "Cyan"
    Write-ColorOutput "  .\diagnose.ps1 -FullDiagnostic    # –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)" "White"
    Write-ColorOutput "  .\diagnose.ps1 -GetTelegramId    # –ü–æ–ª—É—á–∏—Ç—å Telegram ID" "White"
    Write-ColorOutput "  .\diagnose.ps1 -DebugMode        # –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏" "White"
    Write-ColorOutput "  .\diagnose.ps1 -CheckEnv         # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è" "White"
    Write-ColorOutput ""
    Write-ColorOutput "–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç: .\diagnose.ps1 -FullDiagnostic" "Yellow"
}
