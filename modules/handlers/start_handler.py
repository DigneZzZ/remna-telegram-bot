from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from modules.config import MAIN_MENU
from modules.utils.auth import check_admin
from modules.api.users import UserAPI
from modules.api.nodes import NodeAPI
from modules.api.inbounds import InboundAPI
import logging

logger = logging.getLogger(__name__)

@check_admin
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start command handler"""
    await show_main_menu(update, context)
    return MAIN_MENU

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show main menu with system statistics"""
    keyboard = [
        [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="users")],
        [InlineKeyboardButton("üñ•Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏", callback_data="nodes")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã", callback_data="stats")],
        [InlineKeyboardButton("üåê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö–æ—Å—Ç–∞–º–∏", callback_data="hosts")],
        [InlineKeyboardButton("üîå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Inbounds", callback_data="inbounds")],
        [InlineKeyboardButton("üîÑ –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data="bulk")],
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="create_user")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
    stats_text = await get_system_stats()
    
    message = "üéõÔ∏è *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Remnawave Admin*\n\n"
    message += stats_text + "\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"

    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

async def get_system_stats():
    """Get comprehensive system statistics"""
    try:
        import psutil
        import os
        from datetime import datetime, timedelta

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∑–∞–ø—É—â–µ–Ω—ã –ª–∏ –º—ã –≤ Docker
        in_docker = os.path.exists('/.dockerenv')
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if in_docker:
            # –í Docker - —á–∏—Ç–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ cgroup
            try:
                # CPU cores
                cpu_cores = 0
                with open('/sys/fs/cgroup/cpu/cpu.cfs_quota_us', 'r') as f:
                    quota = int(f.read().strip())
                with open('/sys/fs/cgroup/cpu/cpu.cfs_period_us', 'r') as f:
                    period = int(f.read().strip())
                
                if quota > 0 and period > 0:
                    cpu_cores = max(1, quota // period)
                else:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–∑ cgroups, –∏—Å–ø–æ–ª—å–∑—É–µ–º psutil
                    cpu_cores = psutil.cpu_count()
                
                cpu_physical_cores = cpu_cores  # –í Docker —ç—Ç–æ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ
                cpu_percent = psutil.cpu_percent(interval=0.1)
                
                # Memory
                memory_limit = 0
                with open('/sys/fs/cgroup/memory/memory.limit_in_bytes', 'r') as f:
                    memory_limit = int(f.read().strip())
                
                memory_usage = 0
                with open('/sys/fs/cgroup/memory/memory.usage_in_bytes', 'r') as f:
                    memory_usage = int(f.read().strip())
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç, –ø–æ–¥–æ–±–Ω—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–º—É psutil
                class DockerMemory:
                    def __init__(self, total, used):
                        self.total = total
                        self.used = used
                        self.free = total - used
                        self.percent = (used / total * 100) if total > 0 else 0
                
                memory = DockerMemory(memory_limit, memory_usage)
            except Exception as e:
                # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ cgroup, –∏—Å–ø–æ–ª—å–∑—É–µ–º psutil
                logger.error(f"Error reading Docker cgroup stats: {e}")
                cpu_cores = psutil.cpu_count()
                cpu_physical_cores = psutil.cpu_count(logical=False)
                cpu_percent = psutil.cpu_percent(interval=0.1)
                memory = psutil.virtual_memory()
        else:
            # –û–±—ã—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º psutil
            cpu_cores = psutil.cpu_count()
            cpu_physical_cores = psutil.cpu_count(logical=False)
            cpu_percent = psutil.cpu_percent(interval=0.1)
            memory = psutil.virtual_memory()
        
        # –ü–æ–ª—É—á–∞–µ–º uptime
        uptime_seconds = psutil.boot_time()
        current_time = datetime.now().timestamp()
        uptime = int(current_time - uptime_seconds)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        uptime_days = uptime // (24 * 3600)
        uptime_hours = (uptime % (24 * 3600)) // 3600
        uptime_minutes = (uptime % 3600) // 60
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_response = await UserAPI.get_all_users()
        users_count = 0
        user_stats = {
            'ACTIVE': 0,
            'DISABLED': 0,
            'LIMITED': 0,
            'EXPIRED': 0
        }
        total_traffic = 0
        
        if users_response:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
            users = []
            if isinstance(users_response, dict):
                if 'users' in users_response:
                    users = users_response['users']
                elif 'response' in users_response and 'users' in users_response['response']:
                    users = users_response['response']['users']
            elif isinstance(users_response, list):
                users = users_response
            
            users_count = len(users)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            for user in users:
                status = user.get('status', 'UNKNOWN')
                if status in user_stats:
                    user_stats[status] += 1
                
                # –°—É–º–º–∏—Ä—É–µ–º —Ç—Ä–∞—Ñ–∏–∫
                traffic_bytes = user.get('usedTrafficBytes', 0)
                if isinstance(traffic_bytes, (int, float)):
                    total_traffic += traffic_bytes
                elif isinstance(traffic_bytes, str) and traffic_bytes.isdigit():
                    total_traffic += int(traffic_bytes)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–∑–ª–æ–≤
        nodes_response = await NodeAPI.get_all_nodes()
        nodes_count = 0
        online_nodes = 0
        if nodes_response:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
            nodes = []
            if isinstance(nodes_response, dict):
                if 'nodes' in nodes_response:
                    nodes = nodes_response['nodes']
                elif 'response' in nodes_response and 'nodes' in nodes_response['response']:
                    nodes = nodes_response['response']['nodes']
            elif isinstance(nodes_response, list):
                nodes = nodes_response
            
            nodes_count = len(nodes)
            online_nodes = sum(1 for node in nodes if node.get('isConnected'))

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É inbound'–æ–≤
        inbounds_response = await InboundAPI.get_inbounds()
        inbounds_count = 0
        if inbounds_response:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
            inbounds = []
            if isinstance(inbounds_response, dict):
                if 'inbounds' in inbounds_response:
                    inbounds = inbounds_response['inbounds']
                elif 'response' in inbounds_response and 'inbounds' in inbounds_response['response']:
                    inbounds = inbounds_response['response']['inbounds']
            elif isinstance(inbounds_response, list):
                inbounds = inbounds_response
            
            inbounds_count = len(inbounds)

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–π—Ç–æ–≤
        def format_bytes(bytes_value):
            if not bytes_value:
                return "0 B"
            
            if isinstance(bytes_value, str):
                try:
                    bytes_value = float(bytes_value)
                except (ValueError, TypeError):
                    return bytes_value
                    
            if bytes_value == 0:
                return "0 B"

            for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
                if bytes_value < 1024.0:
                    return f"{bytes_value:.2f} {unit}"
                bytes_value /= 1024.0
            return f"{bytes_value:.2f} PB"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = f"üìà *–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
        stats += f"üñ•Ô∏è *–°–∏—Å—Ç–µ–º–∞*:\n"
        stats += f"  ‚Ä¢ CPU: {cpu_cores} —è–¥–µ—Ä ({cpu_physical_cores} —Ñ–∏–∑.), {cpu_percent}%\n"
        stats += f"  ‚Ä¢ RAM: {format_bytes(memory.used)} / {format_bytes(memory.total)} ({memory.percent:.1f}%)\n"
        stats += f"  ‚Ä¢ Uptime: {uptime_days}–¥ {uptime_hours}—á {uptime_minutes}–º\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        stats += f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏* ({users_count} –≤—Å–µ–≥–æ):\n"
        for status, count in user_stats.items():
            if count > 0:
                emoji = {"ACTIVE": "‚úÖ", "DISABLED": "‚ùå", "LIMITED": "‚ö†Ô∏è", "EXPIRED": "‚è∞"}.get(status, "‚ùì")
                stats += f"  ‚Ä¢ {emoji} {status}: {count}\n"
        
        if total_traffic > 0:
            stats += f"  ‚Ä¢ –û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫: {format_bytes(total_traffic)}\n"
        
        stats += f"\nüñ•Ô∏è *–°–µ—Ä–≤–µ—Ä—ã*: {online_nodes}/{nodes_count} –æ–Ω–ª–∞–π–Ω\n"
        stats += f"üîå *Inbound'—ã*: {inbounds_count} —à—Ç.\n"
        
        return stats
        
    except ImportError:
        # –ï—Å–ª–∏ psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –≤–µ—Ä—Å–∏—é
        logger.warning("psutil not available, using basic stats")
        return await get_basic_system_stats()
        
    except Exception as e:
        logger.error(f"Error getting comprehensive system stats: {e}")
        return await get_basic_system_stats()


async def get_basic_system_stats():
    """Get basic system statistics (fallback version)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_response = await UserAPI.get_all_users()
        users_count = 0
        active_users = 0
        if users_response:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
            users = []
            if isinstance(users_response, dict):
                if 'users' in users_response:
                    users = users_response['users']
                elif 'response' in users_response and 'users' in users_response['response']:
                    users = users_response['response']['users']
            elif isinstance(users_response, list):
                users = users_response
            
            users_count = len(users)
            active_users = sum(1 for user in users if user.get('status') == 'ACTIVE')

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–∑–ª–æ–≤
        nodes_response = await NodeAPI.get_all_nodes()
        nodes_count = 0
        online_nodes = 0
        if nodes_response:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
            nodes = []
            if isinstance(nodes_response, dict):
                if 'nodes' in nodes_response:
                    nodes = nodes_response['nodes']
                elif 'response' in nodes_response and 'nodes' in nodes_response['response']:
                    nodes = nodes_response['response']['nodes']
            elif isinstance(nodes_response, list):
                nodes = nodes_response
            
            nodes_count = len(nodes)
            online_nodes = sum(1 for node in nodes if node.get('isConnected'))

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É inbound'–æ–≤
        inbounds_response = await InboundAPI.get_inbounds()
        inbounds_count = 0
        if inbounds_response:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
            inbounds = []
            if isinstance(inbounds_response, dict):
                if 'inbounds' in inbounds_response:
                    inbounds = inbounds_response['inbounds']
                elif 'response' in inbounds_response and 'inbounds' in inbounds_response['response']:
                    inbounds = inbounds_response['response']['inbounds']
            elif isinstance(inbounds_response, list):
                inbounds = inbounds_response
            
            inbounds_count = len(inbounds)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = f"üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:*\n"
        stats += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {active_users}/{users_count}\n"
        stats += f"üñ•Ô∏è –£–∑–ª—ã: {online_nodes}/{nodes_count} –æ–Ω–ª–∞–π–Ω\n"
        stats += f"üîå Inbound'—ã: {inbounds_count} —à—Ç.\n"
        
        return stats
        
    except Exception as e:
        logger.error(f"Error getting basic system stats: {e}")
        return "üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞*\n"
