from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging

from modules.config import MAIN_MENU, INBOUND_MENU
from modules.api.inbounds import InboundAPI
from modules.api.users import UserAPI
from modules.api.nodes import NodeAPI
from modules.utils.formatters import format_inbound_details
from modules.utils.selection_helpers import SelectionHelper
from modules.handlers.start_handler import show_main_menu

logger = logging.getLogger(__name__)

async def show_inbounds_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show inbounds menu"""
    keyboard = [
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö Inbounds", callback_data="list_inbounds")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Å –¥–µ—Ç–∞–ª—è–º–∏", callback_data="list_full_inbounds")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = "üîå *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Inbounds*\n\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    await update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def handle_inbounds_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle inbounds menu selection"""
    query = update.callback_query
    await query.answer()

    data = query.data

    if data == "list_inbounds":
        await list_inbounds(update, context)

    elif data == "list_full_inbounds":
        await list_full_inbounds(update, context)

    elif data == "back_to_inbounds":
        await show_inbounds_menu(update, context)
        return INBOUND_MENU

    elif data == "back_to_main":
        await show_main_menu(update, context)
        return MAIN_MENU
        
    elif data.startswith("view_inbound_"):
        uuid = data.split("_")[2]
        await show_inbound_details(update, context, uuid)

    elif data.startswith("select_inbound_"):
        # Handle SelectionHelper callback for inbound selection
        inbound_id = data.replace("select_inbound_", "")
        await show_inbound_details(update, context, inbound_id)

    elif data.startswith("select_full_inbound_"):
        # Handle SelectionHelper callback for full inbound selection
        inbound_id = data.replace("select_full_inbound_", "")
        await show_inbound_details(update, context, inbound_id)

    elif data.startswith("page_inbounds_"):
        # Handle pagination for inbound list
        page = int(data.split("_")[2])
        await handle_inbound_pagination(update, context, page)

    elif data.startswith("page_full_inbounds_"):
        # Handle pagination for full inbound list
        page = int(data.split("_")[3])
        await handle_full_inbound_pagination(update, context, page)

    elif data.startswith("add_to_users_"):
        uuid = data.split("_")[3]
        await add_inbound_to_all_users(update, context, uuid)
        return INBOUND_MENU

    elif data.startswith("remove_from_users_"):
        uuid = data.split("_")[3]
        await remove_inbound_from_all_users(update, context, uuid)
        return INBOUND_MENU

    elif data.startswith("add_to_nodes_"):
        uuid = data.split("_")[3]
        await add_inbound_to_all_nodes(update, context, uuid)
        return INBOUND_MENU

    elif data.startswith("remove_from_nodes_"):
        uuid = data.split("_")[3]
        await remove_inbound_from_all_nodes(update, context, uuid)
        return INBOUND_MENU

    elif data.startswith("edit_inbound_"):
        uuid = data.split("_")[2]
        await show_inbound_edit_menu(update, context, uuid)
        return INBOUND_MENU

    elif data.startswith("confirm_add_users_"):
        uuid = data.split("_")[3]
        await add_inbound_to_all_users(update, context, uuid)
        return INBOUND_MENU

    elif data.startswith("confirm_remove_users_"):
        uuid = data.split("_")[3]
        await remove_inbound_from_all_users(update, context, uuid)
        return INBOUND_MENU

    elif data.startswith("confirm_add_nodes_"):
        uuid = data.split("_")[3]
        await add_inbound_to_all_nodes(update, context, uuid)
        return INBOUND_MENU

    elif data.startswith("confirm_remove_nodes_"):
        uuid = data.split("_")[3]
        await remove_inbound_from_all_nodes(update, context, uuid)
        return INBOUND_MENU

    elif data == "back":
        await show_inbounds_menu(update, context)
        return INBOUND_MENU

    return INBOUND_MENU

async def list_inbounds(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """List all inbounds using SelectionHelper"""
    await update.callback_query.edit_message_text("üîå –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ Inbounds...")

    try:
        # Use SelectionHelper for user-friendly display
        keyboard, inbounds_data = await SelectionHelper.get_inbounds_selection_keyboard(
            callback_prefix="select_inbound",
            include_back=True
        )
        
        # Replace back button with custom callback by creating new keyboard
        if keyboard.inline_keyboard and keyboard.inline_keyboard[-1][0].text == "üîô –ù–∞–∑–∞–¥":
            # Create new keyboard with corrected back button
            new_keyboard = []
            for row in keyboard.inline_keyboard[:-1]:  # All rows except the last one
                new_keyboard.append(row)
            
            # Add corrected back button as last row
            new_keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_inbounds")])
            keyboard = InlineKeyboardMarkup(new_keyboard)
        
        if not inbounds_data:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_inbounds")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                "‚ùå Inbounds –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞.",
                reply_markup=reply_markup
            )
            return INBOUND_MENU

        message = f"üîå *–°–ø–∏—Å–æ–∫ Inbounds* ({len(inbounds_data)} —à—Ç.)\n\n"
        message += "–í—ã–±–µ—Ä–∏—Ç–µ Inbound –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"

        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"Error listing inbounds: {e}")
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_inbounds")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ Inbounds.",
            reply_markup=reply_markup
        )
        )

    return INBOUND_MENU

async def list_full_inbounds(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """List all inbounds with full details using SelectionHelper"""
    await update.callback_query.edit_message_text("üîå –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ Inbounds...")

    try:
        inbounds = await InboundAPI.get_full_inbounds()

        if not inbounds:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_inbounds")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                "‚ùå Inbounds –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞.",
                reply_markup=reply_markup
            )
            return INBOUND_MENU

        # Format items for SelectionHelper with detailed info
        items = []
        for inbound in inbounds:
            description = f"üîå {inbound['type']} | üî¢ –ü–æ—Ä—Ç: {inbound['port']}"
            
            if 'users' in inbound:
                description += f"\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {inbound['users']['enabled']} –∞–∫—Ç–∏–≤–Ω—ã—Ö, {inbound['users']['disabled']} –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö"
            
            if 'nodes' in inbound:
                description += f"\nüñ•Ô∏è –°–µ—Ä–≤–µ—Ä—ã: {inbound['nodes']['enabled']} –∞–∫—Ç–∏–≤–Ω—ã—Ö, {inbound['nodes']['disabled']} –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö"
            
            items.append({
                'id': inbound['uuid'],
                'name': inbound['tag'],
                'description': description
            })

        # Use SelectionHelper for user-friendly display with detailed info
        keyboard = []
        inbounds_data = {}
        
        for inbound in inbounds:
            display_name = f"üîå {inbound['tag']} ({inbound['type']}, :{inbound['port']})"
            callback_data = f"select_full_inbound_{inbound['uuid']}"
            inbounds_data[inbound['uuid']] = inbound
            
            keyboard.append([InlineKeyboardButton(display_name, callback_data=callback_data)])
        
        # Add back button
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_inbounds")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        message = f"üîå *–°–ø–∏—Å–æ–∫ Inbounds —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏* ({len(inbounds)} —à—Ç.)\n\n"
        message += "–í—ã–±–µ—Ä–∏—Ç–µ Inbound –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"

        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"Error listing full inbounds: {e}")
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_inbounds")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ Inbounds.",
            reply_markup=reply_markup
        )

    return INBOUND_MENU

async def show_inbound_details(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid):
    """Show inbound details"""
    # Get full inbounds to find the one with matching UUID
    inbounds = await InboundAPI.get_full_inbounds()
    
    if not inbounds:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_inbounds")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            "‚ùå Inbound –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=reply_markup
        )
        return INBOUND_MENU
    
    inbound = next((i for i in inbounds if i['uuid'] == uuid), None)
    
    if not inbound:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_inbounds")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            "‚ùå Inbound –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=reply_markup
        )
        return INBOUND_MENU
    
    message = format_inbound_details(inbound)
    
    # Create action buttons
    keyboard = [
        [
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data=f"add_to_users_{uuid}"),
            InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data=f"remove_from_users_{uuid}")
        ],
        [
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ–º —Å–µ—Ä–≤–µ—Ä–∞–º", callback_data=f"add_to_nodes_{uuid}"),
            InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å —É –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data=f"remove_from_nodes_{uuid}")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="list_full_inbounds")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return INBOUND_MENU

async def add_inbound_to_all_users(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid: str):
    """Add inbound to all users"""
    await update.callback_query.answer("‚ûï –î–æ–±–∞–≤–ª—è—é Inbound –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
    
    try:
        result = await InboundAPI.add_inbound_to_users(uuid)
        await update.callback_query.edit_message_text(f"‚úÖ Inbound —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {result}")
    except Exception as e:
        await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ Inbound –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {e}")

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="list_full_inbounds")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(
        text=update.callback_query.message.text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

    return INBOUND_MENU

async def remove_inbound_from_all_users(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid: str):
    """Remove inbound from all users"""
    await update.callback_query.answer("‚ûñ –£–¥–∞–ª—è—é Inbound —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    try:
        result = await InboundAPI.remove_inbound_from_users(uuid)
        await update.callback_query.edit_message_text(f"‚úÖ Inbound —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {result}")
    except Exception as e:
        await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ Inbound —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="list_full_inbounds")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(
        text=update.callback_query.message.text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

    return INBOUND_MENU

async def add_inbound_to_all_nodes(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid: str):
    """Add inbound to all nodes"""
    await update.callback_query.answer("‚ûï –î–æ–±–∞–≤–ª—è—é Inbound –≤—Å–µ–º —Å–µ—Ä–≤–µ—Ä–∞–º...")
    
    try:
        result = await InboundAPI.add_inbound_to_nodes(uuid)
        await update.callback_query.edit_message_text(f"‚úÖ Inbound —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤—Å–µ–º —Å–µ—Ä–≤–µ—Ä–∞–º. –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {result}")
    except Exception as e:
        await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ Inbound –≤—Å–µ–º —Å–µ—Ä–≤–µ—Ä–∞–º: {e}")

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="list_full_inbounds")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(
        text=update.callback_query.message.text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

    return INBOUND_MENU

async def remove_inbound_from_all_nodes(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid: str):
    """Remove inbound from all nodes"""
    await update.callback_query.answer("‚ûñ –£–¥–∞–ª—è—é Inbound —É –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤...")
    
    try:
        result = await InboundAPI.remove_inbound_from_nodes(uuid)
        await update.callback_query.edit_message_text(f"‚úÖ Inbound —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —É –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤. –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {result}")
    except Exception as e:
        await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ Inbound —É –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="list_full_inbounds")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(
        text=update.callback_query.message.text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

    return INBOUND_MENU

async def handle_inbound_pagination(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int):
    """Handle pagination for inbound list"""
    try:
        inbounds = await InboundAPI.get_inbounds()
        
        if not inbounds:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_inbounds")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                "‚ùå Inbounds –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞.",
                reply_markup=reply_markup
            )
            return INBOUND_MENU

        # Format items for SelectionHelper
        items = []
        for inbound in inbounds:
            items.append({
                'id': inbound['uuid'],
                'name': inbound['tag'],
                'description': f"üîå {inbound['type']} | üî¢ –ü–æ—Ä—Ç: {inbound['port']}"
            })

        # Use SelectionHelper for pagination
        helper = SelectionHelper(
            title="üîå –í—ã–±–µ—Ä–∏—Ç–µ Inbound",
            items=items,
            callback_prefix="select_inbound",
            back_callback="back_to_inbounds",
            items_per_page=8
        )

        keyboard = helper.get_keyboard(page=page)
        message = helper.get_message(page=page)

        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"Error handling inbound pagination: {e}")
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_inbounds")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ Inbounds.",
            reply_markup=reply_markup
        )

    return INBOUND_MENU

async def handle_full_inbound_pagination(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int):
    """Handle pagination for full inbound list"""
    try:
        inbounds = await InboundAPI.get_full_inbounds()
        
        if not inbounds:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_inbounds")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                "‚ùå Inbounds –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞.",
                reply_markup=reply_markup
            )
            return INBOUND_MENU

        # Format items for SelectionHelper with detailed info
        items = []
        for inbound in inbounds:
            description = f"üîå {inbound['type']} | üî¢ –ü–æ—Ä—Ç: {inbound['port']}"
            
            if 'users' in inbound:
                description += f"\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {inbound['users']['enabled']} –∞–∫—Ç–∏–≤–Ω—ã—Ö, {inbound['users']['disabled']} –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö"
            
            if 'nodes' in inbound:
                description += f"\nüñ•Ô∏è –°–µ—Ä–≤–µ—Ä—ã: {inbound['nodes']['enabled']} –∞–∫—Ç–∏–≤–Ω—ã—Ö, {inbound['nodes']['disabled']} –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö"
            
            items.append({
                'id': inbound['uuid'],
                'name': inbound['tag'],
                'description': description
            })

        # Use SelectionHelper for pagination
        helper = SelectionHelper(
            title="üîå –í—ã–±–µ—Ä–∏—Ç–µ Inbound (–¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä)",
            items=items,
            callback_prefix="select_full_inbound",
            back_callback="back_to_inbounds",
            items_per_page=6
        )

        keyboard = helper.get_keyboard(page=page)
        message = helper.get_message(page=page)

        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"Error handling full inbound pagination: {e}")
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_inbounds")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ Inbounds.",
            reply_markup=reply_markup
        )

    return INBOUND_MENU
