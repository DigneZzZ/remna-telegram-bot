from aiogram import Router, types, F
from aiogram.filters import Text, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging

from modules.handlers_aiogram.auth import AuthFilter
from modules.handlers_aiogram.states import HostStates
from modules.api.client import RemnaAPI
from modules.utils.formatters_aiogram import (
    format_bytes, format_datetime, escape_markdown
)

logger = logging.getLogger(__name__)

router = Router()

# ================ HOST MENU ================

@router.callback_query(Text("hosts"), AuthFilter())
async def handle_hosts_menu(callback: types.CallbackQuery, state: FSMContext):
    """Handle hosts menu selection"""
    await callback.answer()
    await state.clear()
    await show_hosts_menu(callback)

async def show_hosts_menu(callback: types.CallbackQuery):
    """Show hosts menu"""
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ö–æ—Å—Ç–æ–≤", callback_data="list_hosts"))
    builder.row(types.InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ö–æ—Å—Ç", callback_data="create_host"))
    builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))

    message = "üåê **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö–æ—Å—Ç–∞–º–∏**\n\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    await callback.message.edit_text(
        text=message,
        reply_markup=builder.as_markup()
    )

# ================ LIST HOSTS ================

@router.callback_query(Text("list_hosts"), AuthFilter())
async def list_hosts(callback: types.CallbackQuery, state: FSMContext):
    """List all hosts"""
    await callback.answer()
    await callback.message.edit_text("üåê –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ö–æ—Å—Ç–æ–≤...")

    try:
        sdk = RemnaAPI.get_sdk()
        hosts_response = await sdk.hosts.get_all_hosts()

        if not hosts_response or not hosts_response.hosts:
            builder = InlineKeyboardBuilder()
            builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="hosts"))
            
            await callback.message.edit_text(
                "‚ùå –•–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞.",
                reply_markup=builder.as_markup()
            )
            return

        hosts = hosts_response.hosts
        message = f"üåê **–•–æ—Å—Ç—ã** ({len(hosts)}):\n\n"

        for i, host in enumerate(hosts):
            status_emoji = "üü¢" if host.is_active else "üî¥"
            
            message += f"{i+1}. {status_emoji} **{escape_markdown(host.remark)}**\n"
            message += f"   üåê –ê–¥—Ä–µ—Å: `{host.address}:{host.port}`\n"
            if host.inbound_uuid:
                message += f"   üîå Inbound: `{host.inbound_uuid[:8]}...`\n"
            message += "\n"

        # Add action buttons
        builder = InlineKeyboardBuilder()
        
        for host in hosts:
            builder.row(types.InlineKeyboardButton(
                text=f"üëÅÔ∏è {host.remark[:20]}...", 
                callback_data=f"view_host_{host.uuid}"
            ))
        
        # Add back button
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="hosts"))

        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )

    except Exception as e:
        logger.error(f"Error listing hosts: {e}")
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="hosts"))
        
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ö–æ—Å—Ç–æ–≤.",
            reply_markup=builder.as_markup()
        )

# ================ HOST DETAILS ================

@router.callback_query(Text(startswith="view_host_"), AuthFilter())
async def show_host_details(callback: types.CallbackQuery, state: FSMContext):
    """Show host details"""
    await callback.answer()
    
    try:
        uuid = callback.data.split("_")[2]
        
        sdk = RemnaAPI.get_sdk()
        host_response = await sdk.hosts.get_host_by_uuid(uuid)
        
        if not host_response or not host_response.host:
            builder = InlineKeyboardBuilder()
            builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="list_hosts"))
            
            await callback.message.edit_text(
                "‚ùå –•–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=builder.as_markup()
            )
            return
        
        host = host_response.host
        
        # Format host details
        message = f"üåê **–î–µ—Ç–∞–ª–∏ —Ö–æ—Å—Ç–∞**\n\n"
        message += f"**üìù –ù–∞–∑–≤–∞–Ω–∏–µ:** {escape_markdown(host.remark)}\n"
        message += f"**üåê –ê–¥—Ä–µ—Å:** `{host.address}`\n"
        message += f"**üîå –ü–æ—Ä—Ç:** `{host.port}`\n"
        message += f"**üìä –°—Ç–∞—Ç—É—Å:** {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if host.is_active else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
        
        if host.inbound_uuid:
            message += f"**üîå Inbound UUID:** `{host.inbound_uuid}`\n"
        
        if hasattr(host, 'path') and host.path:
            message += f"**üõ£Ô∏è –ü—É—Ç—å:** `{host.path}`\n"
            
        if hasattr(host, 'sni') and host.sni:
            message += f"**üîí SNI:** `{host.sni}`\n"
            
        if hasattr(host, 'host_header') and host.host_header:
            message += f"**üè† Host:** `{host.host_header}`\n"
            
        if hasattr(host, 'alpn') and host.alpn:
            message += f"**üîÑ ALPN:** `{host.alpn}`\n"
            
        if hasattr(host, 'fingerprint') and host.fingerprint:
            message += f"**üëÜ Fingerprint:** `{host.fingerprint}`\n"
            
        if hasattr(host, 'allow_insecure'):
            message += f"**üîê Allow Insecure:** {'–î–∞' if host.allow_insecure else '–ù–µ—Ç'}\n"
            
        if hasattr(host, 'security_layer') and host.security_layer:
            message += f"**üõ°Ô∏è Security Layer:** `{host.security_layer}`\n"
        
        # Create action buttons
        builder = InlineKeyboardBuilder()
        
        if host.is_active:
            builder.row(types.InlineKeyboardButton(text="üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å", callback_data=f"disable_host_{uuid}"))
        else:
            builder.row(types.InlineKeyboardButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å", callback_data=f"enable_host_{uuid}"))
        
        builder.row(types.InlineKeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_host_{uuid}"))
        builder.row(types.InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_host_{uuid}"))
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="list_hosts"))
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error showing host details: {e}")
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="list_hosts"))
        
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–∞.",
            reply_markup=builder.as_markup()
        )

# ================ HOST ACTIONS ================

@router.callback_query(Text(startswith="enable_host_"), AuthFilter())
async def enable_host(callback: types.CallbackQuery, state: FSMContext):
    """Enable host"""
    await callback.answer()
    
    try:
        uuid = callback.data.split("_")[2]
        
        sdk = RemnaAPI.get_sdk()
        success = await sdk.hosts.enable_host(uuid)
        
        if success:
            await callback.answer("üü¢ –•–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω.", show_alert=True)
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å —Ö–æ—Å—Ç.", show_alert=True)
        
        # Refresh host details
        await show_host_details(callback, state)
        
    except Exception as e:
        logger.error(f"Error enabling host: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Ö–æ—Å—Ç–∞.", show_alert=True)

@router.callback_query(Text(startswith="disable_host_"), AuthFilter())
async def disable_host(callback: types.CallbackQuery, state: FSMContext):
    """Disable host"""
    await callback.answer()
    
    try:
        uuid = callback.data.split("_")[2]
        
        sdk = RemnaAPI.get_sdk()
        success = await sdk.hosts.disable_host(uuid)
        
        if success:
            await callback.answer("üî¥ –•–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω.", show_alert=True)
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å —Ö–æ—Å—Ç.", show_alert=True)
        
        # Refresh host details
        await show_host_details(callback, state)
        
    except Exception as e:
        logger.error(f"Error disabling host: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Ö–æ—Å—Ç–∞.", show_alert=True)

@router.callback_query(Text(startswith="delete_host_"), AuthFilter())
async def delete_host_confirm(callback: types.CallbackQuery, state: FSMContext):
    """Confirm host deletion"""
    await callback.answer()
    
    try:
        uuid = callback.data.split("_")[2]
        
        # Store uuid for confirmation
        await state.update_data(deleting_host_uuid=uuid)
        
        sdk = RemnaAPI.get_sdk()
        host_response = await sdk.hosts.get_host_by_uuid(uuid)
        
        if not host_response or not host_response.host:
            await callback.answer("‚ùå –•–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        
        host = host_response.host
        
        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_host_{uuid}"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_host_{uuid}")
        )
        
        message = f"‚ùå **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∞**\n\n"
        message += f"**–•–æ—Å—Ç:** {escape_markdown(host.remark)}\n"
        message += f"**–ê–¥—Ä–µ—Å:** `{host.address}:{host.port}`\n\n"
        message += f"‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!** –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n\n"
        message += f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ö–æ—Å—Ç?"
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error preparing host deletion: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —É–¥–∞–ª–µ–Ω–∏—è.", show_alert=True)

@router.callback_query(Text(startswith="confirm_delete_host_"), AuthFilter())
async def confirm_delete_host(callback: types.CallbackQuery, state: FSMContext):
    """Delete host after confirmation"""
    await callback.answer()
    
    try:
        uuid = callback.data.split("_")[3]
        
        sdk = RemnaAPI.get_sdk()
        success = await sdk.hosts.delete_host(uuid)
        
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É —Ö–æ—Å—Ç–æ–≤", callback_data="list_hosts"))
        
        if success:
            message = "‚úÖ **–•–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω**\n\n"
            message += "–•–æ—Å—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã."
        else:
            message = "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ö–æ—Å—Ç–∞**\n\n"
            message += "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ö–æ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )
        
        # Clear state
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error deleting host: {e}")
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É —Ö–æ—Å—Ç–æ–≤", callback_data="list_hosts"))
        
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ö–æ—Å—Ç–∞.",
            reply_markup=builder.as_markup()
        )
        await state.clear()

# ================ EDIT HOST ================

@router.callback_query(Text(startswith="edit_host_"), AuthFilter())
async def start_edit_host(callback: types.CallbackQuery, state: FSMContext):
    """Start editing a host"""
    await callback.answer()
    
    try:
        uuid = callback.data.split("_")[2]
        
        # Get host details
        sdk = RemnaAPI.get_sdk()
        host_response = await sdk.hosts.get_host_by_uuid(uuid)
        
        if not host_response or not host_response.host:
            builder = InlineKeyboardBuilder()
            builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="list_hosts"))
            
            await callback.message.edit_text(
                "‚ùå –•–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=builder.as_markup()
            )
            return
        
        host = host_response.host
        
        # Store host data in state
        await state.update_data(editing_host=host.dict(), host_uuid=uuid)
        await state.set_state(HostStates.editing)
        
        # Create edit menu
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"eh_remark_{uuid}"))
        builder.row(types.InlineKeyboardButton(text="üåê –ê–¥—Ä–µ—Å", callback_data=f"eh_address_{uuid}"))
        builder.row(types.InlineKeyboardButton(text="üîå –ü–æ—Ä—Ç", callback_data=f"eh_port_{uuid}"))
        
        # Optional fields (if supported by SDK)
        if hasattr(host, 'path'):
            builder.row(types.InlineKeyboardButton(text="üõ£Ô∏è –ü—É—Ç—å", callback_data=f"eh_path_{uuid}"))
        if hasattr(host, 'sni'):
            builder.row(types.InlineKeyboardButton(text="üîí SNI", callback_data=f"eh_sni_{uuid}"))
        if hasattr(host, 'host_header'):
            builder.row(types.InlineKeyboardButton(text="üè† Host", callback_data=f"eh_host_{uuid}"))
        
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –¥–µ—Ç–∞–ª—è–º", callback_data=f"view_host_{uuid}"))
        
        message = f"üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–æ—Å—Ç–∞: {escape_markdown(host.remark)}**\n\n"
        message += f"üìå **–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:**\n"
        message += f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: `{host.remark}`\n"
        message += f"‚Ä¢ –ê–¥—Ä–µ—Å: `{host.address}`\n"
        message += f"‚Ä¢ –ü–æ—Ä—Ç: `{host.port}`\n"
        
        if hasattr(host, 'path') and host.path:
            message += f"‚Ä¢ –ü—É—Ç—å: `{host.path}`\n"
        if hasattr(host, 'sni') and host.sni:
            message += f"‚Ä¢ SNI: `{host.sni}`\n"
        if hasattr(host, 'host_header') and host.host_header:
            message += f"‚Ä¢ Host: `{host.host_header}`\n"
        
        message += "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error starting host edit: {e}")
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="list_hosts"))
        
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–∞.",
            reply_markup=builder.as_markup()
        )

@router.callback_query(Text(startswith="eh_"), StateFilter(HostStates.editing), AuthFilter())
async def start_edit_host_field(callback: types.CallbackQuery, state: FSMContext):
    """Start editing a specific host field"""
    await callback.answer()
    
    try:
        parts = callback.data.split("_")
        field = parts[1]  # remark, address, port, etc.
        uuid = parts[2]
        
        data = await state.get_data()
        host = data.get("editing_host")
        
        if not host:
            await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ —Ö–æ—Å—Ç–∞ –ø–æ—Ç–µ—Ä—è–Ω—ã.", show_alert=True)
            return
        
        # Store field being edited
        await state.update_data(editing_field=field)
        await state.set_state(HostStates.editing_field)
        
        # Get field info
        field_info = {
            "remark": {
                "title": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ö–æ—Å—Ç–∞",
                "current": host.get("remark", ""),
                "example": "–ù–∞–ø—Ä–∏–º–µ—Ä: Main-Host",
                "validation": "—Ç–µ–∫—Å—Ç (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
            },
            "address": {
                "title": "–ê–¥—Ä–µ—Å —Ö–æ—Å—Ç–∞",
                "current": host.get("address", ""),
                "example": "–ù–∞–ø—Ä–∏–º–µ—Ä: 192.168.1.1 –∏–ª–∏ example.com",
                "validation": "IP –∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–º–µ–Ω (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
            },
            "port": {
                "title": "–ü–æ—Ä—Ç —Ö–æ—Å—Ç–∞",
                "current": str(host.get("port", "")),
                "example": "–ù–∞–ø—Ä–∏–º–µ—Ä: 443",
                "validation": "—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 65535"
            },
            "path": {
                "title": "–ü—É—Ç—å",
                "current": host.get("path", ""),
                "example": "–ù–∞–ø—Ä–∏–º–µ—Ä: /api/v1",
                "validation": "–ø—É—Ç—å (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)"
            },
            "sni": {
                "title": "SNI (Server Name Indication)",
                "current": host.get("sni", ""),
                "example": "–ù–∞–ø—Ä–∏–º–µ—Ä: example.com",
                "validation": "–¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)"
            },
            "host": {
                "title": "Host –∑–∞–≥–æ–ª–æ–≤–æ–∫",
                "current": host.get("host_header", ""),
                "example": "–ù–∞–ø—Ä–∏–º–µ—Ä: api.example.com",
                "validation": "–¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)"
            }
        }
        
        if field not in field_info:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ.", show_alert=True)
            return
        
        info = field_info[field]
        
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit_host_{uuid}"))
        
        message = f"üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {info['title']}**\n\n"
        message += f"üìå **–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:** `{info['current']}`\n\n"
        message += f"üí° {info['example']}\n"
        message += f"‚úÖ **–§–æ—Ä–º–∞—Ç:** {info['validation']}\n\n"
        message += f"‚úçÔ∏è **–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:**"
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error starting field edit: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", show_alert=True)

@router.message(StateFilter(HostStates.editing_field), AuthFilter())
async def handle_host_field_input(message: types.Message, state: FSMContext):
    """Handle input for host field editing"""
    try:
        data = await state.get_data()
        host = data.get("editing_host")
        field = data.get("editing_field")
        uuid = data.get("host_uuid")
        
        if not host or not field or not uuid:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ç–µ—Ä—è–Ω—ã.")
            await state.clear()
            return
        
        user_input = message.text.strip()
        
        # Validate input based on field type
        validated_value = None
        error_message = None
        
        if field == "remark":
            if len(user_input) < 1:
                error_message = "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."
            elif len(user_input) > 100:
                error_message = "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)."
            else:
                validated_value = user_input
        
        elif field == "address":
            if len(user_input) < 1:
                error_message = "–ê–¥—Ä–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."
            else:
                validated_value = user_input
        
        elif field == "port":
            try:
                port_num = int(user_input)
                if port_num < 1 or port_num > 65535:
                    error_message = "–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 65535."
                else:
                    validated_value = port_num
            except ValueError:
                error_message = "–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º."
        
        elif field in ["path", "sni", "host"]:
            # These fields can be empty
            validated_value = user_input if user_input else ""
        
        if error_message:
            builder = InlineKeyboardBuilder()
            builder.row(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit_host_{uuid}"))
            
            await message.answer(
                f"‚ùå {error_message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=builder.as_markup()
            )
            return
        
        # Update host via SDK
        try:
            sdk = RemnaAPI.get_sdk()
            update_data = {field: validated_value}
            
            success = await sdk.hosts.update_host(uuid, update_data)
            
            if success:
                # Update stored host data
                host[field] = validated_value
                await state.update_data(editing_host=host)
                
                # Clear editing state
                await state.set_state(HostStates.editing)
                
                builder = InlineKeyboardBuilder()
                builder.row(types.InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"edit_host_{uuid}"))
                builder.row(types.InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏", callback_data=f"view_host_{uuid}"))
                builder.row(types.InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É —Ö–æ—Å—Ç–æ–≤", callback_data="list_hosts"))
                
                await message.answer(
                    f"‚úÖ –ü–æ–ª–µ '{field}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
                    reply_markup=builder.as_markup()
                )
                
            else:
                builder = InlineKeyboardBuilder()
                builder.row(types.InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"eh_{field}_{uuid}"))
                builder.row(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit_host_{uuid}"))
                
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ö–æ—Å—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=builder.as_markup()
                )
                
        except Exception as e:
            logger.error(f"Error updating host via SDK: {e}")
            builder = InlineKeyboardBuilder()
            builder.row(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit_host_{uuid}"))
            
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ö–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ API.",
                reply_markup=builder.as_markup()
            )
            
    except Exception as e:
        logger.error(f"Error handling host field input: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞.")
        await state.clear()

@router.callback_query(Text(startswith="cancel_edit_host_"), AuthFilter())
async def handle_cancel_host_edit(callback: types.CallbackQuery, state: FSMContext):
    """Handle canceling host edit"""
    await callback.answer()
    
    try:
        uuid = callback.data.split("_")[3]
        
        # Clear editing state
        await state.clear()
        
        # Return to host details
        callback.data = f"view_host_{uuid}"
        await show_host_details(callback, state)
        
    except Exception as e:
        logger.error(f"Error canceling host edit: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", show_alert=True)

# ================ CREATE HOST (PLACEHOLDER) ================

@router.callback_query(Text("create_host"), AuthFilter())
async def create_host_placeholder(callback: types.CallbackQuery, state: FSMContext):
    """Create host placeholder"""
    await callback.answer()
    
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="hosts"))
    
    await callback.message.edit_text(
        "üöß **–°–æ–∑–¥–∞–Ω–∏–µ —Ö–æ—Å—Ç–∞**\n\n"
        "–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ö–æ—Å—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
        "**–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
        "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ö–æ—Å—Ç–æ–≤\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
        "‚Ä¢ –ü—Ä–∏–≤—è–∑–∫–∞ –∫ Inbound'–∞–º\n"
        "‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n\n"
        "–í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ö–æ—Å—Ç–æ–≤.",
        reply_markup=builder.as_markup()
    )

# ================ BACK TO MAIN MENU ================

@router.callback_query(Text("hosts_back_to_main"), AuthFilter())
async def back_to_main_menu(callback: types.CallbackQuery, state: FSMContext):
    """Return to main menu"""
    await callback.answer()
    await state.clear()
    
    from modules.handlers_aiogram.start_handler import show_main_menu
    await show_main_menu(callback.message)