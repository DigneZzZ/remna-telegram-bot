#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å python-telegram-bot –Ω–∞ Aiogram
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–æ—Ç–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–æ–≤
3. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
4. –ë–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É FSM
"""

import asyncio
import sys
import os
from unittest.mock import Mock

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(__file__))

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π"""
    print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        # –ë–∞–∑–æ–≤—ã–µ Aiogram –∏–º–ø–æ—Ä—Ç—ã
        from aiogram import Bot, Dispatcher, Router
        from aiogram.fsm.storage.memory import MemoryStorage
        from aiogram.enums import ParseMode
        print("‚úÖ Aiogram –±–∞–∑–æ–≤—ã–µ –º–æ–¥—É–ª–∏")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        from modules.config import ADMIN_USER_IDS, API_BASE_URL
        print("‚úÖ modules.config")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        from modules.handlers.start_handler import register_start_handlers
        from modules.handlers.menu_handler import register_menu_handlers  
        from modules.handlers.user_handlers import register_user_handlers
        from modules.handlers.auth import AuthFilter
        print("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
        import main_aiogram
        print("‚úÖ main_aiogram.py")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_bot_initialization():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–æ—Ç–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
    print("\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")
    
    try:
        from aiogram import Bot, Dispatcher
        from aiogram.fsm.storage.memory import MemoryStorage
        from aiogram.client.default import DefaultBotProperties
        from aiogram.enums import ParseMode
        
        # –ú–æ–∫–∞–µ–º —Ç–æ–∫–µ–Ω
        mock_token = "1234567890:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ (—ç—Ç–æ –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç –µ–≥–æ, –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞—Å—Ç –æ–±—ä–µ–∫—Ç)
        bot = Bot(
            token=mock_token,
            default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
        )
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        storage = MemoryStorage()
        dp = Dispatcher(storage=storage)
        
        print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bot –∏ Dispatcher")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False

def test_handlers_registration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    print("\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    
    try:
        from aiogram import Dispatcher
        from aiogram.fsm.storage.memory import MemoryStorage
        from modules.handlers.start_handler import register_start_handlers
        from modules.handlers.menu_handler import register_menu_handlers
        from modules.handlers.user_handlers import register_user_handlers
        from modules.handlers.node_handlers import register_node_handlers
        from modules.handlers.stats_handlers import register_stats_handlers
        from modules.handlers.host_handlers import register_host_handlers
        from modules.handlers.inbound_handlers import register_inbound_handlers
        from modules.handlers.bulk_handlers import register_bulk_handlers
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        storage = MemoryStorage()
        dp = Dispatcher(storage=storage)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        register_start_handlers(dp)
        register_menu_handlers(dp)
        register_user_handlers(dp)
        register_node_handlers(dp)
        register_stats_handlers(dp)
        register_host_handlers(dp) 
        register_inbound_handlers(dp)
        register_bulk_handlers(dp)
        
        print("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
        return False

def test_fsm_states():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM"""
    print("\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π...")
    
    try:
        from modules.handlers.user_handlers import UserStates
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
        assert hasattr(UserStates, 'waiting_for_search')
        assert hasattr(UserStates, 'waiting_for_username')
        
        print("‚úÖ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ FSM: {e}")
        return False

def check_httpx_version():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é httpx –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    print("\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ httpx...")
    
    try:
        import httpx
        version = httpx.__version__
        
        # Aiogram —Ç—Ä–µ–±—É–µ—Ç httpx >= 0.25.0
        # remnawave_api —Ç—Ä–µ–±—É–µ—Ç httpx >= 0.27.2
        # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å >= 0.27.2
        major, minor, patch = map(int, version.split('.'))
        
        if major == 0 and minor >= 27:
            print(f"‚úÖ httpx {version} —Å–æ–≤–º–µ—Å—Ç–∏–º —Å –æ–±–µ–∏–º–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º–∏")
            return True
        elif major > 0:
            print(f"‚úÖ httpx {version} —Å–æ–≤–º–µ—Å—Ç–∏–º —Å –æ–±–µ–∏–º–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º–∏")
            return True
        else:
            print(f"‚ö†Ô∏è  httpx {version} –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ httpx: {e}")
        return False

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ Aiogram")
    print("=" * 50)
    
    tests = [
        test_imports,
        test_bot_initialization,
        test_handlers_registration,
        test_fsm_states,
        check_httpx_version
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
    
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –î–æ–±–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ .env —Ñ–∞–π–ª")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main_aiogram.py")
        print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º –±–æ—Ç–æ–º")
        print("4. –î–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏-–∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª–∏")
        return True
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
