from datetime import datetime
import logging
from typing import Optional, Union, Dict, Any

logger = logging.getLogger(__name__)

async def safe_edit_message(callback_query, text, reply_markup=None, parse_mode="Markdown"):
    """Safely edit message text with error handling for 'Message is not modified'"""
    try:
        await callback_query.message.edit_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
        return True
    except Exception as e:
        error_msg = str(e).lower()
        if "not modified" in error_msg or "message is not modified" in error_msg:
            # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –∏–º–µ–µ—Ç —Ç–∞–∫–æ–π –∂–µ —Ç–µ–∫—Å—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            logger.debug("Message content unchanged, skipping update")
            try:
                await callback_query.answer()
            except Exception:
                pass  # Ignore if callback already answered
            return True
        else:
            # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ª–æ–≥–∏—Ä—É–µ–º –µ–µ
            logger.error(f"Error editing message: {e}")
            try:
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
            except Exception:
                pass
            return False

def format_bytes(bytes_value):
    """Format bytes to human-readable format"""
    if not bytes_value:
        return "0 B"  # Handle None or empty values
    
    # –ï—Å–ª–∏ bytes_value —Å—Ç—Ä–æ–∫–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
    if isinstance(bytes_value, str):
        try:
            bytes_value = float(bytes_value)
        except (ValueError, TypeError):
            return bytes_value  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    
    if bytes_value == 0:
        return "0 B"

    for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
        if bytes_value < 1024.0:
            return f"{bytes_value:.2f} {unit}"
        bytes_value /= 1024.0
    return f"{bytes_value:.2f} PB"

def escape_markdown(text):
    """Escape Markdown special characters for Telegram (aiogram MarkdownV2)"""
    if text is None:
        return ""
    
    text = str(text)
    
    # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è MarkdownV2 (aiogram –∏—Å–ø–æ–ª—å–∑—É–µ—Ç MarkdownV2)
    escape_chars = [
        ('\\', '\\\\'),  # Backslash –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º
        ('_', '\\_'),
        ('*', '\\*'),
        ('[', '\\['),
        (']', '\\]'),
        ('(', '\\('),
        (')', '\\)'),
        ('~', '\\~'),
        ('`', '\\`'),
        ('>', '\\>'),
        ('#', '\\#'),
        ('+', '\\+'),
        ('-', '\\-'),
        ('=', '\\='),
        ('|', '\\|'),
        ('{', '\\{'),
        ('}', '\\}'),
        ('.', '\\.'),
        ('!', '\\!')
    ]
    
    for char, escaped in escape_chars:
        text = text.replace(char, escaped)
    
    return text

def format_user_details(user):
    """Format user details for display with remnawave SDK objects"""
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è
        if hasattr(user, 'expire_at') and user.expire_at:
            try:
                if isinstance(user.expire_at, str):
                    expire_date = datetime.fromisoformat(user.expire_at.replace('Z', '+00:00'))
                else:
                    expire_date = user.expire_at
                days_left = (expire_date - datetime.now().astimezone()).days
                expire_status = "üü¢" if days_left > 7 else "üü°" if days_left > 0 else "üî¥"
                expire_text = f"{expire_date.strftime('%Y-%m-%d')} ({days_left} –¥–Ω–µ–π)"
            except Exception:
                expire_status = "üìÖ"
                expire_text = str(user.expire_at) if user.expire_at else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        else:
            expire_status = "üìÖ"
            expire_text = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        status_emoji = "‚úÖ" if user.is_active else "‚ùå"
        
        message = f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {escape_markdown(user.username)}\n"
        message += f"üÜî *UUID:* `{user.uuid}`\n"
        
        if hasattr(user, 'short_uuid') and user.short_uuid:
            message += f"üîë *–ö–æ—Ä–æ—Ç–∫–∏–π UUID:* `{user.short_uuid}`\n"
        
        if hasattr(user, 'subscription_uuid') and user.subscription_uuid:
            message += f"üìù *UUID –ø–æ–¥–ø–∏—Å–∫–∏:* `{user.subscription_uuid}`\n"
        
        message += "\n"
        
        # URL –ø–æ–¥–ø–∏—Å–∫–∏
        if hasattr(user, 'subscription_url') and user.subscription_url:
            message += f"üîó *URL –ø–æ–¥–ø–∏—Å–∫–∏:*\n```\n{user.subscription_url}\n```\n\n"
        else:
            message += f"üîó *URL –ø–æ–¥–ø–∏—Å–∫–∏:* –ù–µ —É–∫–∞–∑–∞–Ω\n\n"
        
        message += f"üìä *–°—Ç–∞—Ç—É—Å:* {status_emoji} {'–ê–∫—Ç–∏–≤–µ–Ω' if user.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
        
        # –¢—Ä–∞—Ñ–∏–∫
        used_traffic = getattr(user, 'used_traffic', 0) or 0
        traffic_limit = getattr(user, 'traffic_limit', 0) or 0
        message += f"üìà *–¢—Ä–∞—Ñ–∏–∫:* {format_bytes(used_traffic)}"
        if traffic_limit > 0:
            message += f"/{format_bytes(traffic_limit)}"
        else:
            message += "/–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π"
        message += "\n"
        
        if hasattr(user, 'traffic_reset_strategy') and user.traffic_reset_strategy:
            message += f"üîÑ *–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–±—Ä–æ—Å–∞:* {user.traffic_reset_strategy}\n"
        
        message += f"{expire_status} *–ò—Å—Ç–µ–∫–∞–µ—Ç:* {expire_text}\n\n"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if hasattr(user, 'description') and user.description:
            message += f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {escape_markdown(str(user.description))}\n"
        
        if hasattr(user, 'tag') and user.tag:
            message += f"üè∑Ô∏è *–¢–µ–≥:* {escape_markdown(str(user.tag))}\n"
        
        if hasattr(user, 'telegram_id') and user.telegram_id:
            message += f"üì± *Telegram ID:* {user.telegram_id}\n"
        
        if hasattr(user, 'email') and user.email:
            message += f"üìß *Email:* {escape_markdown(str(user.email))}\n"
        
        if hasattr(user, 'device_limit') and user.device_limit:
            message += f"üì± *–õ–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤:* {user.device_limit}\n"
        
        # –î–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if hasattr(user, 'created_at') and user.created_at:
            created_date = user.created_at
            if isinstance(created_date, str):
                created_date = created_date[:10]
            else:
                created_date = created_date.strftime('%Y-%m-%d')
            message += f"\n‚è±Ô∏è *–°–æ–∑–¥–∞–Ω:* {created_date}\n"
        
        if hasattr(user, 'updated_at') and user.updated_at:
            updated_date = user.updated_at
            if isinstance(updated_date, str):
                updated_date = updated_date[:10]
            else:
                updated_date = updated_date.strftime('%Y-%m-%d')
            message += f"üîÑ *–û–±–Ω–æ–≤–ª–µ–Ω:* {updated_date}\n"
        
        return message
        
    except Exception as e:
        logger.error(f"Error in format_user_details: {e}")
        # Fallback —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ Markdown
        return format_user_details_safe(user)

def format_user_details_safe(user):
    """Format user details for display without Markdown (safe fallback)"""
    try:
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        message = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}\n"
        message += f"üÜî UUID: {user.uuid}\n"
        
        # –°—Ç–∞—Ç—É—Å
        status_emoji = "‚úÖ" if user.is_active else "‚ùå"
        message += f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji} {'–ê–∫—Ç–∏–≤–µ–Ω' if user.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
        
        # –¢—Ä–∞—Ñ–∏–∫
        used_traffic = getattr(user, 'used_traffic', 0) or 0
        traffic_limit = getattr(user, 'traffic_limit', 0) or 0
        message += f"üìà –¢—Ä–∞—Ñ–∏–∫: {format_bytes(used_traffic)}"
        if traffic_limit > 0:
            message += f"/{format_bytes(traffic_limit)}"
        else:
            message += "/–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π"
        message += "\n"
        
        # –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è
        if hasattr(user, 'expire_at') and user.expire_at:
            expire_text = str(user.expire_at)[:10] if isinstance(user.expire_at, str) else user.expire_at.strftime('%Y-%m-%d')
            message += f"üìÖ –ò—Å—Ç–µ–∫–∞–µ—Ç: {expire_text}\n"
        
        return message
        
    except Exception as e:
        logger.error(f"Error in format_user_details_safe: {e}")
        return f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {getattr(user, 'username', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\nüÜî UUID: {getattr(user, 'uuid', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}"

def format_node_details(node):
    """Format node details for display with remnawave SDK objects"""
    try:
        status_emoji = "üü¢" if node.is_connected and not node.is_disabled else "üî¥"

        message = f"*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ*\n\n"
        message += f"{status_emoji} *–ò–º—è*: {escape_markdown(node.name)}\n"
        message += f"üÜî *UUID*: `{node.uuid}`\n"
        message += f"üåê *–ê–¥—Ä–µ—Å*: {escape_markdown(node.address)}:{node.port}\n\n"

        message += f"üìä *–°—Ç–∞—Ç—É—Å*:\n"
        message += f"  ‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω: {'‚úÖ' if node.is_connected else '‚ùå'}\n"
        message += f"  ‚Ä¢ –û—Ç–∫–ª—é—á–µ–Ω: {'‚úÖ' if node.is_disabled else '‚ùå'}\n"

        if hasattr(node, 'is_online'):
            message += f"  ‚Ä¢ –û–Ω–ª–∞–π–Ω: {'‚úÖ' if node.is_online else '‚ùå'}\n"

        if hasattr(node, 'xray_version') and node.xray_version:
            message += f"\nüì¶ *–í–µ—Ä—Å–∏—è Xray*: {escape_markdown(node.xray_version)}\n"

        message += f"üåç *–°—Ç—Ä–∞–Ω–∞*: {node.country_code}\n"
        
        if hasattr(node, 'consumption_multiplier'):
            message += f"üìä *–ú–Ω–æ–∂–∏—Ç–µ–ª—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è*: {node.consumption_multiplier}x\n"

        return message
        
    except Exception as e:
        logger.error(f"Error in format_node_details: {e}")
        return f"üñ•Ô∏è –°–µ—Ä–≤–µ—Ä: {getattr(node, 'name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\nüÜî UUID: {getattr(node, 'uuid', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}"

def format_datetime(dt):
    """Format datetime for display"""
    if not dt:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    if isinstance(dt, str):
        try:
            dt = datetime.fromisoformat(dt.replace('Z', '+00:00'))
        except:
            return dt
    
    return dt.strftime('%Y-%m-%d %H:%M:%S')

def truncate_text(text: str, max_length: int = 30) -> str:
    """Truncate text to specified length"""
    if not text:
        return ""
    
    text = str(text)
    if len(text) <= max_length:
        return text
    
    return text[:max_length-3] + "..."
