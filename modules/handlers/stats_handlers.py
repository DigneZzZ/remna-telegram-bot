from aiogram import Router, types, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging
from datetime import datetime, timedelta

from modules.handlers.auth import AuthFilter
from modules.handlers.states import SystemStates
from modules.api.client import RemnaAPI
from modules.utils.formatters_aiogram import (
    format_bytes, format_datetime, escape_markdown,
    format_system_stats, format_bandwidth_stats
)

logger = logging.getLogger(__name__)

router = Router()

# ================ MAIN STATS MENU ================

@router.callback_query(F.data == "stats", AuthFilter())
async def handle_stats_menu(callback: types.CallbackQuery, state: FSMContext):
    """Handle statistics menu selection"""
    await state.clear()
    await show_stats_menu(callback)

async def show_stats_menu(callback: types.CallbackQuery):
    """Show statistics menu"""
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="system_stats"))
    builder.row(types.InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞", callback_data="bandwidth_stats"))
    builder.row(types.InlineKeyboardButton(text="üñ•Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data="nodes_stats"))
    builder.row(types.InlineKeyboardButton(text="üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="users_extended_stats"))
    builder.row(types.InlineKeyboardButton(text="‚ö° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏", callback_data="realtime_stats"))
    builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))

    message = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**\n\n"
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±—ã—Å—Ç—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø—Ä–µ–≤—å—é
        sdk = RemnaAPI.get_sdk()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_response = await sdk.users.get_all_users_v2(start=0, size=1000)
        total_users = len(users_response.users)
        active_users = sum(1 for user in users_response.users if user.is_active)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–¥
        nodes_response = await sdk.nodes.get_all_nodes()
        total_nodes = len(nodes_response)
        online_nodes = sum(1 for node in nodes_response if node.is_connected)
        
        # –û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫
        total_traffic = sum(user.used_traffic or 0 for user in users_response.users)
        
        message += f"**üìà –ë—ã—Å—Ç—Ä—ã–π –æ–±–∑–æ—Ä:**\n"
        message += f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}/{total_users}\n"
        message += f"‚Ä¢ –°–µ—Ä–≤–µ—Ä–æ–≤: {online_nodes}/{total_nodes}\n"
        message += f"‚Ä¢ –û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫: {format_bytes(total_traffic)}\n\n"
        
    except Exception as e:
        logger.error(f"Error getting quick stats: {e}")
        message += "**üìà –ë—ã—Å—Ç—Ä—ã–π –æ–±–∑–æ—Ä:** –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n"
    
    message += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"

    await callback.answer()
    await callback.message.edit_text(
        text=message,
        reply_markup=builder.as_markup()
    )

# ================ SYSTEM STATISTICS ================

@router.callback_query(F.data == "system_stats", AuthFilter())
async def show_system_stats(callback: types.CallbackQuery, state: FSMContext):
    """Show system statistics"""
    await callback.answer()
    await callback.message.edit_text("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        sdk = RemnaAPI.get_sdk()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
        system_stats = await sdk.system.get_system_stats()
        
        if not system_stats:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stats")
                ]])
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        users_response = await sdk.users.get_all_users_v2(start=0, size=1000)
        nodes_response = await sdk.nodes.get_all_nodes()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**\n\n"
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        if hasattr(system_stats, 'version'):
            message += f"**üîß –í–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã:** {system_stats.version}\n"
        if hasattr(system_stats, 'uptime'):
            message += f"**‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {format_uptime(system_stats.uptime)}\n"
        if hasattr(system_stats, 'last_restart'):
            message += f"**üîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫:** {format_datetime(system_stats.last_restart)}\n"
        
        message += "\n**üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
        total_users = len(users_response.users)
        active_users = sum(1 for user in users_response.users if user.is_active)
        message += f"‚Ä¢ –í—Å–µ–≥–æ: {total_users}\n"
        message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}\n"
        message += f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {total_users - active_users}\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
        total_traffic_used = sum(user.used_traffic or 0 for user in users_response.users)
        total_traffic_limit = sum(user.traffic_limit or 0 for user in users_response.users if user.traffic_limit)
        
        message += "\n**üìà –¢—Ä–∞—Ñ–∏–∫:**\n"
        message += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {format_bytes(total_traffic_used)}\n"
        if total_traffic_limit > 0:
            message += f"‚Ä¢ –û–±—â–∏–π –ª–∏–º–∏—Ç: {format_bytes(total_traffic_limit)}\n"
            usage_percent = (total_traffic_used / total_traffic_limit) * 100
            message += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {usage_percent:.1f}%\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–¥
        message += "\n**üñ•Ô∏è –°–µ—Ä–≤–µ—Ä—ã:**\n"
        total_nodes = len(nodes_response)
        online_nodes = sum(1 for node in nodes_response if node.is_connected)
        message += f"‚Ä¢ –í—Å–µ–≥–æ: {total_nodes}\n"
        message += f"‚Ä¢ –û–Ω–ª–∞–π–Ω: {online_nodes}\n"
        message += f"‚Ä¢ –û—Ñ–ª–∞–π–Ω: {total_nodes - online_nodes}\n"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if hasattr(system_stats, 'cpu_usage'):
            message += f"\n**üíª –†–µ—Å—É—Ä—Å—ã:**\n"
            message += f"‚Ä¢ CPU: {system_stats.cpu_usage}%\n"
        if hasattr(system_stats, 'memory_usage'):
            message += f"‚Ä¢ RAM: {system_stats.memory_usage}%\n"
        if hasattr(system_stats, 'disk_usage'):
            message += f"‚Ä¢ –î–∏—Å–∫: {system_stats.disk_usage}%\n"
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="system_stats"),
            types.InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª–∏", callback_data="system_stats_detailed")
        )
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stats"))
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error getting system stats: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stats")
            ]])
        )

def format_uptime(uptime_seconds: int) -> str:
    """Format uptime in human readable format"""
    try:
        days = uptime_seconds // 86400
        hours = (uptime_seconds % 86400) // 3600
        minutes = (uptime_seconds % 3600) // 60
        
        if days > 0:
            return f"{days}–¥ {hours}—á {minutes}–º"
        elif hours > 0:
            return f"{hours}—á {minutes}–º"
        else:
            return f"{minutes}–º"
    except:
        return str(uptime_seconds)

# ================ BANDWIDTH STATISTICS ================

@router.callback_query(F.data == "bandwidth_stats", AuthFilter())
async def show_bandwidth_stats(callback: types.CallbackQuery, state: FSMContext):
    """Show bandwidth statistics"""
    await callback.answer()
    await callback.message.edit_text("üìà –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞...")
    
    try:
        sdk = RemnaAPI.get_sdk()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞
        bandwidth_stats = await sdk.system.get_bandwidth_stats()
        users_response = await sdk.users.get_all_users_v2(start=0, size=1000)
        
        message = "üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞**\n\n"
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
        total_used = sum(user.used_traffic or 0 for user in users_response.users)
        total_limit = sum(user.traffic_limit or 0 for user in users_response.users if user.traffic_limit)
        
        message += "**üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        message += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤—Å–µ–≥–æ: {format_bytes(total_used)}\n"
        if total_limit > 0:
            message += f"‚Ä¢ –û–±—â–∏–π –ª–∏–º–∏—Ç: {format_bytes(total_limit)}\n"
            remaining = total_limit - total_used
            message += f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {format_bytes(remaining)}\n"
            usage_percent = (total_used / total_limit) * 100
            message += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {usage_percent:.1f}%\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–æ–¥–∞–º
        nodes_response = await sdk.nodes.get_all_nodes()
        if nodes_response:
            message += "\n**üñ•Ô∏è –ü–æ —Å–µ—Ä–≤–µ—Ä–∞–º:**\n"
            for node in nodes_response:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞ —ç—Ç–æ–π –Ω–æ–¥–µ
                node_users = [user for user in users_response.users if getattr(user, 'node_uuid', None) == node.uuid]
                node_traffic = sum(user.used_traffic or 0 for user in node_users)
                
                status_emoji = "üü¢" if node.is_connected else "üî¥"
                message += f"{status_emoji} **{escape_markdown(node.name)}**\n"
                message += f"  ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(node_users)}\n"
                message += f"  ‚Ä¢ –¢—Ä–∞—Ñ–∏–∫: {format_bytes(node_traffic)}\n"
        
        # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É
        top_users = sorted(
            [user for user in users_response.users if user.used_traffic and user.used_traffic > 0],
            key=lambda u: u.used_traffic,
            reverse=True
        )[:5]
        
        if top_users:
            message += "\n**üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É:**\n"
            for i, user in enumerate(top_users, 1):
                message += f"{i}. **{escape_markdown(user.username)}**: {format_bytes(user.used_traffic)}\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ SDK)
        if bandwidth_stats and hasattr(bandwidth_stats, 'daily_stats'):
            message += "\n**üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è:**\n"
            if hasattr(bandwidth_stats.daily_stats, 'upload'):
                message += f"‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {format_bytes(bandwidth_stats.daily_stats.upload)}\n"
            if hasattr(bandwidth_stats.daily_stats, 'download'):
                message += f"‚Ä¢ –°–∫–∞—á–∞–Ω–æ: {format_bytes(bandwidth_stats.daily_stats.download)}\n"
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="bandwidth_stats"),
            types.InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª–∏", callback_data="bandwidth_stats_detailed")
        )
        builder.row(
            types.InlineKeyboardButton(text="üìà –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="bandwidth_weekly"),
            types.InlineKeyboardButton(text="üìâ –ó–∞ –º–µ—Å—è—Ü", callback_data="bandwidth_monthly")
        )
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stats"))
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error getting bandwidth stats: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stats")
            ]])
        )

# ================ NODES STATISTICS ================

@router.callback_query(F.data == "nodes_stats", AuthFilter())
async def show_nodes_stats(callback: types.CallbackQuery, state: FSMContext):
    """Show nodes statistics"""
    await callback.answer()
    await callback.message.edit_text("üñ•Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
    
    try:
        sdk = RemnaAPI.get_sdk()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–¥–∞—Ö
        nodes_response = await sdk.nodes.get_all_nodes()
        users_response = await sdk.users.get_all_users_v2(start=0, size=1000)
        
        if not nodes_response:
            await callback.message.edit_text(
                "‚ùå –°–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stats")
                ]])
            )
            return
        
        message = "üñ•Ô∏è **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤**\n\n"
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        total_nodes = len(nodes_response)
        online_nodes = sum(1 for node in nodes_response if node.is_connected)
        
        message += f"**üìä –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
        message += f"‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {total_nodes}\n"
        message += f"‚Ä¢ –û–Ω–ª–∞–π–Ω: {online_nodes}\n"
        message += f"‚Ä¢ –û—Ñ–ª–∞–π–Ω: {total_nodes - online_nodes}\n\n"
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–π –Ω–æ–¥–µ
        message += "**üìã –î–µ—Ç–∞–ª–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤:**\n"
        for node in nodes_response:
            status_emoji = "üü¢" if node.is_connected else "üî¥"
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞ —ç—Ç–æ–π –Ω–æ–¥–µ
            node_users = [user for user in users_response.users if getattr(user, 'node_uuid', None) == node.uuid]
            active_users = sum(1 for user in node_users if user.is_active)
            node_traffic = sum(user.used_traffic or 0 for user in node_users)
            
            message += f"{status_emoji} **{escape_markdown(node.name)}**\n"
            message += f"  ‚Ä¢ –ê–¥—Ä–µ—Å: `{node.address}`\n"
            message += f"  ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(node_users)} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {active_users})\n"
            message += f"  ‚Ä¢ –¢—Ä–∞—Ñ–∏–∫: {format_bytes(node_traffic)}\n"
            
            if node.is_connected:
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ–Ω–ª–∞–π–Ω –Ω–æ–¥
                if hasattr(node, 'last_seen'):
                    message += f"  ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤—è–∑—å: {format_datetime(node.last_seen)}\n"
                if hasattr(node, 'version'):
                    message += f"  ‚Ä¢ –í–µ—Ä—Å–∏—è: {node.version}\n"
                if hasattr(node, 'uptime'):
                    message += f"  ‚Ä¢ Uptime: {format_uptime(node.uptime)}\n"
            else:
                if hasattr(node, 'last_seen'):
                    message += f"  ‚Ä¢ –û—Ñ–ª–∞–π–Ω —Å: {format_datetime(node.last_seen)}\n"
            
            message += "\n"
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="nodes_stats"),
            types.InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª–∏", callback_data="nodes_detailed")
        )
        builder.row(
            types.InlineKeyboardButton(text="üñ•Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="nodes"),
            types.InlineKeyboardButton(text="üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="nodes_monitoring")
        )
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stats"))
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error getting nodes stats: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stats")
            ]])
        )

# ================ REAL-TIME MONITORING ================

@router.callback_query(F.data == "realtime_stats", AuthFilter())
async def show_realtime_stats(callback: types.CallbackQuery, state: FSMContext):
    """Show real-time monitoring"""
    await callback.answer()
    await state.set_state(SystemStates.viewing_stats)
    
    try:
        sdk = RemnaAPI.get_sdk()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        users_response = await sdk.users.get_all_users_v2(start=0, size=1000)
        nodes_response = await sdk.nodes.get_all_nodes()
        
        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        current_time = datetime.now().strftime("%H:%M:%S")
        
        message = f"‚ö° **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏**\n"
        message += f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}\n\n"
        
        # –û–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        active_users = sum(1 for user in users_response.users if user.is_active)
        online_nodes = sum(1 for node in nodes_response if node.is_connected)
        
        message += "**üî• –°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–Ω–æ:**\n"
        message += f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}\n"
        message += f"‚Ä¢ –°–µ—Ä–≤–µ—Ä–æ–≤: {online_nodes}\n"
        
        # –¢—Ä–∞—Ñ–∏–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
        recent_users = [
            user for user in users_response.users 
            if user.used_traffic and user.used_traffic > 0 and user.is_active
        ]
        
        if recent_users:
            total_active_traffic = sum(user.used_traffic for user in recent_users)
            message += f"‚Ä¢ –û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {format_bytes(total_active_traffic)}\n"
        
        message += "\n**üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤:**\n"
        for node in nodes_response:
            status_emoji = "üü¢" if node.is_connected else "üî¥"
            message += f"{status_emoji} {escape_markdown(node.name)}\n"
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        message += "\n**üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:**\n"
        message += "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...\n"
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="realtime_stats"),
            types.InlineKeyboardButton(text="‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data="pause_monitoring")
        )
        builder.row(
            types.InlineKeyboardButton(text="üìä –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="stats_charts"),
            types.InlineKeyboardButton(text="‚ö†Ô∏è –ê–ª–µ—Ä—Ç—ã", callback_data="stats_alerts")
        )
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stats"))
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error getting realtime stats: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stats")
            ]])
        )

# ================ DETAILED STATISTICS ================

@router.callback_query(F.data == "system_stats_detailed", AuthFilter())
async def show_system_stats_detailed(callback: types.CallbackQuery):
    """Show detailed system statistics"""
    await callback.answer()
    await callback.message.edit_text("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    
    try:
        sdk = RemnaAPI.get_sdk()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        system_stats = await sdk.system.get_system_stats()
        users_response = await sdk.users.get_all_users_v2(start=0, size=1000)
        nodes_response = await sdk.nodes.get_all_nodes()
        
        message = "üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**\n\n"
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        now = datetime.now()
        week_ago = now - timedelta(days=7)
        month_ago = now - timedelta(days=30)
        
        new_users_week = sum(
            1 for user in users_response.users 
            if user.created_at and datetime.fromisoformat(user.created_at.replace('Z', '+00:00')) > week_ago
        )
        new_users_month = sum(
            1 for user in users_response.users 
            if user.created_at and datetime.fromisoformat(user.created_at.replace('Z', '+00:00')) > month_ago
        )
        
        expired_users = sum(
            1 for user in users_response.users 
            if user.expire_at and datetime.fromisoformat(user.expire_at.replace('Z', '+00:00')) < now
        )
        
        message += "**üë• –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n"
        message += f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {new_users_week}\n"
        message += f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {new_users_month}\n"
        message += f"‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö: {expired_users}\n"
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ª–∏–º–∏—Ç–∞–º —Ç—Ä–∞—Ñ–∏–∫–∞
        unlimited_users = sum(1 for user in users_response.users if not user.traffic_limit)
        limited_users = len(users_response.users) - unlimited_users
        
        message += f"‚Ä¢ –° –ª–∏–º–∏—Ç–æ–º —Ç—Ä–∞—Ñ–∏–∫–∞: {limited_users}\n"
        message += f"‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã—Ö: {unlimited_users}\n"
        
        # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        if users_response.users:
            avg_traffic = sum(user.used_traffic or 0 for user in users_response.users) / len(users_response.users)
            message += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ç—Ä–∞—Ñ–∏–∫: {format_bytes(int(avg_traffic))}\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–æ–¥–∞–º
        message += "\n**üñ•Ô∏è –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤:**\n"
        for node in nodes_response:
            node_users = [user for user in users_response.users if getattr(user, 'node_uuid', None) == node.uuid]
            active_users = sum(1 for user in node_users if user.is_active)
            node_traffic = sum(user.used_traffic or 0 for user in node_users)
            
            load_percent = (len(node_users) / max(getattr(node, 'max_users', 100), 1)) * 100
            
            message += f"**{escape_markdown(node.name)}:**\n"
            message += f"  ‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞: {load_percent:.1f}%\n"
            message += f"  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}/{len(node_users)}\n"
            message += f"  ‚Ä¢ –¢—Ä–∞—Ñ–∏–∫: {format_bytes(node_traffic)}\n"
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        if system_stats:
            message += "\n**üíª –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:**\n"
            if hasattr(system_stats, 'cpu_usage'):
                message += f"‚Ä¢ CPU: {system_stats.cpu_usage}%\n"
            if hasattr(system_stats, 'memory_usage'):
                message += f"‚Ä¢ RAM: {system_stats.memory_usage}%\n"
            if hasattr(system_stats, 'disk_usage'):
                message += f"‚Ä¢ –î–∏—Å–∫: {system_stats.disk_usage}%\n"
            if hasattr(system_stats, 'network_connections'):
                message += f"‚Ä¢ –°–µ—Ç–µ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {system_stats.network_connections}\n"
        
        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="system_stats_detailed"),
            types.InlineKeyboardButton(text="üìä –û–±—ã—á–Ω–∞—è", callback_data="system_stats")
        )
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stats"))
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error getting detailed system stats: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="system_stats")
            ]])
        )

# ================ BANDWIDTH PERIOD STATISTICS ================

@router.callback_query(F.data == "bandwidth_weekly", AuthFilter())
async def show_bandwidth_weekly(callback: types.CallbackQuery):
    """Show weekly bandwidth statistics"""
    await callback.answer()
    
    try:
        sdk = RemnaAPI.get_sdk()
        users_response = await sdk.users.get_all_users_v2(start=0, size=1000)
        
        message = "üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é**\n\n"
        
        # –†–∞—Å—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        total_traffic = sum(user.used_traffic or 0 for user in users_response.users)
        
        message += f"**üìä –û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫:**\n"
        message += f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {format_bytes(total_traffic)}\n"
        message += f"‚Ä¢ –í —Å—Ä–µ–¥–Ω–µ–º –≤ –¥–µ–Ω—å: {format_bytes(total_traffic // 7)}\n"
        
        # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é
        top_users = sorted(
            [user for user in users_response.users if user.used_traffic and user.used_traffic > 0],
            key=lambda u: u.used_traffic,
            reverse=True
        )[:10]
        
        if top_users:
            message += "\n**üèÜ –¢–æ–ø 10 –∑–∞ –Ω–µ–¥–µ–ª—é:**\n"
            for i, user in enumerate(top_users, 1):
                message += f"{i}. {escape_markdown(user.username)}: {format_bytes(user.used_traffic)}\n"
        
        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(text="üìâ –ó–∞ –º–µ—Å—è—Ü", callback_data="bandwidth_monthly"),
            types.InlineKeyboardButton(text="üìä –û–±—â–∞—è", callback_data="bandwidth_stats")
        )
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="bandwidth_stats"))
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error getting weekly bandwidth: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

@router.callback_query(F.data == "bandwidth_monthly", AuthFilter())
async def show_bandwidth_monthly(callback: types.CallbackQuery):
    """Show monthly bandwidth statistics"""
    await callback.answer()
    
    try:
        sdk = RemnaAPI.get_sdk()
        users_response = await sdk.users.get_all_users_v2(start=0, size=1000)
        
        message = "üìâ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü**\n\n"
        
        # –†–∞—Å—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        total_traffic = sum(user.used_traffic or 0 for user in users_response.users)
        
        message += f"**üìä –û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫:**\n"
        message += f"‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {format_bytes(total_traffic)}\n"
        message += f"‚Ä¢ –í —Å—Ä–µ–¥–Ω–µ–º –≤ –¥–µ–Ω—å: {format_bytes(total_traffic // 30)}\n"
        message += f"‚Ä¢ –í —Å—Ä–µ–¥–Ω–µ–º –≤ –Ω–µ–¥–µ–ª—é: {format_bytes(total_traffic // 4)}\n"
        
        # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
        projected = total_traffic * 2  # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≥–Ω–æ–∑
        message += f"‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥. –º–µ—Å—è—Ü: {format_bytes(projected)}\n"
        
        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(text="üìà –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="bandwidth_weekly"),
            types.InlineKeyboardButton(text="üìä –û–±—â–∞—è", callback_data="bandwidth_stats")
        )
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="bandwidth_stats"))
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error getting monthly bandwidth: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

# ================ BACK NAVIGATION ================

@router.callback_query(F.data == "back_to_stats", AuthFilter())
async def back_to_stats(callback: types.CallbackQuery, state: FSMContext):
    """Return to stats menu"""
    await show_stats_menu(callback)
