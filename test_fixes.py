#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π Markdown –∏ "Message is not modified"
"""

import asyncio
import logging
from unittest.mock import Mock, AsyncMock
from modules.utils.formatters import format_user_details, safe_edit_message

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
test_user = {
    'uuid': 'test-uuid-123-456-789',
    'shortUuid': 'test123',
    'subscriptionUuid': 'sub-uuid-123-456-789',
    'subscriptionUrl': 'https://very-long-subscription-url.example.com/path/to/subscription/with/very/long/path/and/parameters?param1=value1&param2=value2&param3=value3',
    'username': 'test_user_name',
    'status': 'ACTIVE',
    'usedTrafficBytes': 1073741824,  # 1GB
    'trafficLimitBytes': 10737418240,  # 10GB
    'trafficLimitStrategy': 'BLOCK_NEW_CONNECTIONS',
    'expireAt': '2025-06-27T12:00:00.000Z',
    'description': '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å "–∫–∞–≤—ã—á–∫–∞–º–∏" –∏ *—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏* —Å–∏–º–≤–æ–ª–∞–º–∏ [test] (info)',
    'tag': 'test-tag',
    'telegramId': '123456789',
    'email': 'test@example.com',
    'hwidDeviceLimit': 3,
    'createdAt': '2025-05-27T12:00:00.000Z',
    'updatedAt': '2025-05-27T12:00:00.000Z'
}

async def test_format_user_details():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    
    try:
        # –¢–µ—Å—Ç —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        message = format_user_details(test_user)
        logger.info("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ")
        logger.info(f"–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(message)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ URL –ø–æ–¥–ø–∏—Å–∫–∏ –≤–∫–ª—é—á–µ–Ω
        if 'subscriptionUrl' in message or 'URL –ø–æ–¥–ø–∏—Å–∫–∏' in message:
            logger.info("‚úÖ URL –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∫–ª—é—á–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        else:
            logger.warning("‚ö†Ô∏è URL –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
        
        # –¢–µ—Å—Ç —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
        problematic_user = test_user.copy()
        problematic_user['description'] = 'Test with _underscores_ and *asterisks* and `backticks` and [brackets]'
        problematic_user['username'] = 'user_with_special_chars_*_[_]_`'
        
        message_problematic = format_user_details(problematic_user)
        logger.info("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏
        minimal_user = {
            'uuid': 'minimal-uuid',
            'username': 'minimal_user',
            'status': 'ACTIVE',
            'usedTrafficBytes': 0,
            'trafficLimitBytes': 1000000000,
            'trafficLimitStrategy': 'BLOCK_NEW_CONNECTIONS',
            'expireAt': '2025-06-27T12:00:00.000Z',
            'createdAt': '2025-05-27T12:00:00.000Z',
            'updatedAt': '2025-05-27T12:00:00.000Z'
        }
        
        message_minimal = format_user_details(minimal_user)
        logger.info("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

async def test_safe_edit_message():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é safe_edit_message...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º mock –æ–±—ä–µ–∫—Ç—ã
        mock_query = Mock()
        mock_edit = AsyncMock()
        mock_answer = AsyncMock()
        mock_query.edit_message_text = mock_edit
        mock_query.answer = mock_answer
        
        # –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        mock_edit.return_value = None
        result = await safe_edit_message(mock_query, "Test message", None, "Markdown")
        assert result == True
        logger.info("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—à–µ–ª")
        
        # –¢–µ—Å—Ç —Å –æ—à–∏–±–∫–æ–π "Message is not modified"
        mock_edit.side_effect = Exception("Message is not modified")
        result = await safe_edit_message(mock_query, "Test message", None, "Markdown")
        assert result == True  # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å True, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞
        logger.info("‚úÖ –¢–µ—Å—Ç —Å –æ—à–∏–±–∫–æ–π 'Message is not modified' –ø—Ä–æ—à–µ–ª")
        
        # –¢–µ—Å—Ç —Å –¥—Ä—É–≥–æ–π –æ—à–∏–±–∫–æ–π
        mock_edit.side_effect = Exception("Some other error")
        result = await safe_edit_message(mock_query, "Test message", None, "Markdown")
        assert result == False  # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å False –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
        logger.info("‚úÖ –¢–µ—Å—Ç —Å –¥—Ä—É–≥–æ–π –æ—à–∏–±–∫–æ–π –ø—Ä–æ—à–µ–ª")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ safe_edit_message: {e}")
        return False

async def test_markdown_escaping():
    """–¢–µ—Å—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown —Å–∏–º–≤–æ–ª–æ–≤"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown —Å–∏–º–≤–æ–ª–æ–≤...")
    
    from modules.utils.formatters import escape_markdown
    
    try:
        test_cases = [
            ("Hello_world", "Hello\\_world"),
            ("Test*text*", "Test\\*text\\*"),
            ("Code `sample`", "Code \\`sample\\`"),
            ("[Link](url)", "\\[Link\\]\\(url\\)"),
            ("Test_*_[_]_`_>_#_+_-_=_|_{_}_._!", "Test\\_\\*\\_\\[\\_\\]\\_\\`\\_\\>\\_\\#\\_\\+\\_\\-\\_\\=\\_\\|\\_\\{\\_\\}\\_\\.\\_\\!"),
        ]
        
        for input_text, expected in test_cases:
            result = escape_markdown(input_text)
            if result == expected:
                logger.info(f"‚úÖ '{input_text}' -> '{result}'")
            else:
                logger.error(f"‚ùå '{input_text}' -> '{result}' (–æ–∂–∏–¥–∞–ª–æ—Å—å: '{expected}')")
                return False
        
        logger.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
    
    tests = [
        ("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", test_format_user_details),
        ("–§—É–Ω–∫—Ü–∏—è safe_edit_message", test_safe_edit_message),
        ("–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown", test_markdown_escaping),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        logger.info(f"\nüìã –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
        try:
            result = await test_func()
            results.append((test_name, result))
            if result:
                logger.info(f"‚úÖ –¢–µ—Å—Ç '{test_name}' –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.error(f"‚ùå –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–≤–∞–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –¢–µ—Å—Ç '{test_name}' –≤—ã–∑–≤–∞–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info("\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        logger.info(f"  {status}: {test_name}")
    
    logger.info(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞.")

if __name__ == "__main__":
    asyncio.run(main())
