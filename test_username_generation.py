#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import string
import random
from datetime import datetime

def generate_random_username():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (20 —Å–∏–º–≤–æ–ª–æ–≤, –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)"""
    characters = string.ascii_letters + string.digits
    return ''.join(random.choice(characters) for _ in range(20))

def generate_default_description():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    return f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {datetime.now().strftime('%d.%m.%Y %H:%M')}"

def test_username_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 5 —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–º–µ–Ω
    for i in range(5):
        username = generate_random_username()
        description = generate_default_description()
        
        print(f"–¢–µ—Å—Ç {i+1}:")
        print(f"  üìõ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
        print(f"  üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
        print(f"  üìè –î–ª–∏–Ω–∞ –∏–º–µ–Ω–∏: {len(username)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
        is_valid = all(c in string.ascii_letters + string.digits for c in username)
        print(f"  ‚úÖ –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: {'–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ' if is_valid else '–û—à–∏–±–∫–∞'}")
        print()

def test_default_values():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...\n")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º user_data, –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ
    user_data = {}
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
    if "username" not in user_data or not user_data.get("username"):
        characters = string.ascii_letters + string.digits
        random_username = ''.join(random.choice(characters) for _ in range(20))
        user_data["username"] = random_username
        print(f"üî§ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è: {random_username}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if "trafficLimitStrategy" not in user_data:
        user_data["trafficLimitStrategy"] = "NO_RESET"
        print(f"üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–±—Ä–æ—Å–∞ —Ç—Ä–∞—Ñ–∏–∫–∞: {user_data['trafficLimitStrategy']}")
    
    if "trafficLimitBytes" not in user_data:
        user_data["trafficLimitBytes"] = 100 * 1024 * 1024 * 1024  # 100 GB
        print(f"üìà –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: {user_data['trafficLimitBytes']} –±–∞–π—Ç (100 –ì–ë)")
    
    if "hwidDeviceLimit" not in user_data:
        user_data["hwidDeviceLimit"] = 1
        print(f"üì± –õ–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {user_data['hwidDeviceLimit']}")
    
    if "description" not in user_data or not user_data.get("description"):
        user_data["description"] = f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {user_data['description']}")
    
    if "resetDay" not in user_data:
        user_data["resetDay"] = 1
        print(f"üìÖ –î–µ–Ω—å —Å–±—Ä–æ—Å–∞: {user_data['resetDay']}")
    
    print(f"\n‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    for key, value in user_data.items():
        print(f"  {key}: {value}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n")
    
    test_username_generation()
    print("=" * 50)
    test_default_values()
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
