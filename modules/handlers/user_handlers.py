from aiogram import Router, types, F
from aiogram.filters import Text, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging
import re

from modules.handlers_aiogram.auth import AuthFilter
from modules.handlers_aiogram.states import UserStates
from modules.api.sdk_client import RemnaSDK
from modules.utils.formatters_aiogram import (
    format_bytes, format_user_details, format_datetime,
    truncate_text, escape_markdown
)
from modules.utils.keyboard_helpers import KeyboardHelper, SelectionHelper, MenuHelper

logger = logging.getLogger(__name__)

router = Router()

# Initialize SDK
sdk = RemnaSDK()

@router.callback_query(Text("users"), AuthFilter())
async def handle_users_menu(callback: types.CallbackQuery, state: FSMContext):
    """Handle users menu selection"""
    await state.clear()
    await show_users_menu(callback)

async def show_users_menu(callback: types.CallbackQuery):
    """Show users menu"""
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users"))
    builder.row(types.InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="search_users_menu"))
    builder.row(types.InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="create_user"))
    builder.row(types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="users_stats"))
    builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))

    message = "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**\n\n"
    try:
        users_count = await sdk.get_users_count()
        users_stats = await sdk.get_users_stats()
        if users_stats:
            active_count = users_stats.get('active', 0)
            total_traffic = format_bytes(users_stats.get('total_traffic', 0))
            message += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
            message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_count}\n"
            message += f"‚Ä¢ –û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫: {total_traffic}\n\n"
    except Exception as e:
        logger.error(f"Error getting user stats: {e}")
        message += "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n\n"
    
    message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    await callback.answer()
    await callback.message.edit_text(
        text=message,
        reply_markup=builder.as_markup()
    )

@router.callback_query(Text("list_users"), AuthFilter())
async def list_users(callback: types.CallbackQuery, state: FSMContext):
    """List all users with pagination"""
    await callback.answer()
    
    try:
        # Get all users
        users = await sdk.get_all_users()
        
        if not users:
            await callback.message.edit_text(
                "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="users")
                ]])
            )
            return

        # Store users in state for pagination
        await state.update_data(users=users, page=0)
        
        # Show first page
        await show_users_page(callback.message, users, 0, state)
        await state.set_state(UserStates.selecting_user)
        
    except Exception as e:
        logger.error(f"Error listing users: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="users")
            ]])
        )

async def show_users_page(message: types.Message, users: list, page: int, state: FSMContext, per_page: int = 10):
    """Show users page with pagination using keyboard helper"""
    try:
        # Use SelectionHelper for user pagination
        selection_helper = SelectionHelper()
        keyboard = selection_helper.create_users_selection_keyboard(
            users, page, per_page, back_callback="users"
        )
        
        total_users = len(users)
        start_idx = page * per_page
        end_idx = min(start_idx + per_page, total_users)
        page_users = users[start_idx:end_idx]
        
        # Build message
        message_text = f"üë• **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({start_idx + 1}-{end_idx} –∏–∑ {total_users})**\n\n"
        
        for i, user in enumerate(page_users):
            user_name = user.get('username', f"User {user.get('uuid', 'Unknown')[:8]}")
            status_emoji = "üü¢" if user.get('is_active', False) else "üî¥"
            traffic_used = format_bytes(user.get('used_traffic', 0))
            traffic_limit = format_bytes(user.get('traffic_limit', 0)) if user.get('traffic_limit') else "‚àû"
            
            message_text += f"{status_emoji} **{escape_markdown(user_name)}**\n"
            message_text += f"  üíæ –¢—Ä–∞—Ñ–∏–∫: {traffic_used} / {traffic_limit}\n"
            if user.get('telegram_id'):
                message_text += f"  üì± TG ID: {user.get('telegram_id')}\n"
            message_text += "\n"
        
        await message.edit_text(
            text=message_text,
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Error showing users page: {e}")
        await message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="users")
            ]])
        )

@router.callback_query(Text(startswith="users_page:"), AuthFilter())
async def handle_users_pagination(callback: types.CallbackQuery, state: FSMContext):
    """Handle users pagination"""
    await callback.answer()
    
    page = int(callback.data.split(":")[1])
    data = await state.get_data()
    users = data.get('users', [])
    
    await state.update_data(page=page)
    await show_users_page(callback.message, users, page, state)

@router.callback_query(Text(startswith="select_user:"), AuthFilter())
async def handle_user_selection(callback: types.CallbackQuery, state: FSMContext):
    """Handle user selection"""
    await callback.answer()
    
    user_uuid = callback.data.split(":")[1]
    data = await state.get_data()
    users = data.get('users', [])
    
    # Find selected user
    selected_user = None
    for user in users:
        if user.get('uuid') == user_uuid:
            selected_user = user
            break
    
    if not selected_user:
        await callback.message.edit_text(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="list_users")
            ]])
        )
        return
    
    await state.update_data(selected_user=selected_user)
    await state.set_state(UserStates.viewing_user)
    await show_user_details(callback.message, selected_user, state)

async def show_user_details(message: types.Message, user: dict, state: FSMContext):
    """Show user details with action buttons"""
    try:
        user_details = format_user_details(user)
        
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_user:{user.get('uuid')}"))
        builder.row(types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data=f"refresh_user:{user.get('uuid')}"))
        
        # Status control buttons
        if user.get('is_active', False):
            builder.row(types.InlineKeyboardButton(text="‚è∏Ô∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"deactivate_user:{user.get('uuid')}"))
        else:
            builder.row(types.InlineKeyboardButton(text="‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"activate_user:{user.get('uuid')}"))
        
        # Traffic management
        builder.row(types.InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫", callback_data=f"reset_traffic:{user.get('uuid')}"))
        
        # Subscription management
        builder.row(types.InlineKeyboardButton(text="üîó –ü–æ–¥–ø–∏—Å–∫–∞", callback_data=f"subscription:{user.get('uuid')}"))
        
        # Dangerous actions
        builder.row(types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_user:{user.get('uuid')}"))
        
        builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="list_users"))
        
        await message.edit_text(
            text=user_details,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"Error showing user details: {e}")
        await message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="list_users")
            ]])
        )

# ================ USER ACTIONS ================

@router.callback_query(Text(startswith="refresh_user:"), AuthFilter())
async def refresh_user(callback: types.CallbackQuery, state: FSMContext):
    """Refresh user data"""
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    user_uuid = callback.data.split(":")[1]
    
    try:
        user = await sdk.get_user(user_uuid)
        if user:
            await state.update_data(selected_user=user)
            await show_user_details(callback.message, user, state)
        else:
            await callback.message.edit_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="list_users")
                ]])
            )
    except Exception as e:
        logger.error(f"Error refreshing user: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)

@router.callback_query(Text(startswith="activate_user:"), AuthFilter())
async def activate_user(callback: types.CallbackQuery, state: FSMContext):
    """Activate user"""
    await callback.answer()
    
    user_uuid = callback.data.split(":")[1]
    
    try:
        success = await sdk.update_user(user_uuid, {"is_active": True})
        if success:
            await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", show_alert=True)
            # Refresh user data
            user = await sdk.get_user(user_uuid)
            if user:
                await state.update_data(selected_user=user)
                await show_user_details(callback.message, user, state)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏", show_alert=True)
    except Exception as e:
        logger.error(f"Error activating user: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏", show_alert=True)

@router.callback_query(Text(startswith="deactivate_user:"), AuthFilter())
async def deactivate_user(callback: types.CallbackQuery, state: FSMContext):
    """Deactivate user"""
    await callback.answer()
    
    user_uuid = callback.data.split(":")[1]
    
    try:
        success = await sdk.update_user(user_uuid, {"is_active": False})
        if success:
            await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", show_alert=True)
            # Refresh user data
            user = await sdk.get_user(user_uuid)
            if user:
                await state.update_data(selected_user=user)
                await show_user_details(callback.message, user, state)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏", show_alert=True)
    except Exception as e:
        logger.error(f"Error deactivating user: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏", show_alert=True)

@router.callback_query(Text(startswith="reset_traffic:"), AuthFilter())
async def reset_user_traffic(callback: types.CallbackQuery, state: FSMContext):
    """Reset user traffic"""
    await callback.answer()
    
    user_uuid = callback.data.split(":")[1]
    
    # Show confirmation
    data = await state.get_data()
    selected_user = data.get('selected_user')
    username = selected_user.get('username', 'Unknown') if selected_user else 'Unknown'
    
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data=f"confirm_reset_traffic:{user_uuid}"))
    builder.row(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"refresh_user:{user_uuid}"))
    
    await callback.message.edit_text(
        f"üîÑ **–°–±—Ä–æ—Å —Ç—Ä–∞—Ñ–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: **{escape_markdown(username)}**\n\n"
        f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–±—Ä–æ—Å–∏—Ç —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–æ 0.\n\n"
        f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=builder.as_markup()
    )

@router.callback_query(Text(startswith="confirm_reset_traffic:"), AuthFilter())
async def confirm_reset_traffic(callback: types.CallbackQuery, state: FSMContext):
    """Confirm traffic reset"""
    await callback.answer()
    
    user_uuid = callback.data.split(":")[1]
    
    try:
        success = await sdk.reset_user_traffic(user_uuid)
        if success:
            await callback.answer("‚úÖ –¢—Ä–∞—Ñ–∏–∫ —Å–±—Ä–æ—à–µ–Ω", show_alert=True)
            # Refresh user data
            user = await sdk.get_user(user_uuid)
            if user:
                await state.update_data(selected_user=user)
                await show_user_details(callback.message, user, state)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ç—Ä–∞—Ñ–∏–∫–∞", show_alert=True)
    except Exception as e:
        logger.error(f"Error resetting traffic: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ç—Ä–∞—Ñ–∏–∫–∞", show_alert=True)

@router.callback_query(Text(startswith="subscription:"), AuthFilter())
async def show_subscription(callback: types.CallbackQuery, state: FSMContext):
    """Show user subscription info"""
    await callback.answer()
    
    user_uuid = callback.data.split(":")[1]
    
    try:
        subscription = await sdk.get_user_subscription(user_uuid)
        if subscription:
            subscription_text = f"üîó **–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
            subscription_text += f"**URL:** `{subscription.get('url', 'N/A')}`\n"
            subscription_text += f"**QR-–∫–æ–¥:** –î–æ—Å—Ç—É–ø–µ–Ω\n"
            
            builder = InlineKeyboardBuilder()
            builder.row(types.InlineKeyboardButton(text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å URL", callback_data=f"copy_subscription:{user_uuid}"))
            builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"refresh_user:{user_uuid}"))
            
            await callback.message.edit_text(
                subscription_text,
                reply_markup=builder.as_markup()
            )
        else:
            await callback.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    except Exception as e:
        logger.error(f"Error getting subscription: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)

@router.callback_query(Text(startswith="delete_user:"), AuthFilter())
async def delete_user_confirm(callback: types.CallbackQuery, state: FSMContext):
    """Confirm user deletion"""
    await callback.answer()
    
    user_uuid = callback.data.split(":")[1]
    
    # Show confirmation
    data = await state.get_data()
    selected_user = data.get('selected_user')
    username = selected_user.get('username', 'Unknown') if selected_user else 'Unknown'
    
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_user:{user_uuid}"))
    builder.row(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"refresh_user:{user_uuid}"))
    
    await callback.message.edit_text(
        f"üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: **{escape_markdown(username)}**\n\n"
        f"‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!** –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n"
        f"–í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞.\n\n"
        f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=builder.as_markup()
    )

@router.callback_query(Text(startswith="confirm_delete_user:"), AuthFilter())
async def confirm_delete_user(callback: types.CallbackQuery, state: FSMContext):
    """Confirm user deletion"""
    await callback.answer()
    
    user_uuid = callback.data.split(":")[1]
    
    try:
        success = await sdk.delete_user(user_uuid)
        if success:
            await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω", show_alert=True)
            # Return to users list
            await state.clear()
            await callback.message.edit_text(
                "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                    types.InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users")
                ]])
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)
    except Exception as e:
        logger.error(f"Error deleting user: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)

# ================ SEARCH FUNCTIONALITY ================

@router.callback_query(Text("search_users_menu"), AuthFilter())
async def show_search_users_menu(callback: types.CallbackQuery, state: FSMContext):
    """Show search users menu"""
    await callback.answer()
    await state.clear()
    
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="üîç –ü–æ –∏–º–µ–Ω–∏", callback_data="search_user_by_name"))
    builder.row(types.InlineKeyboardButton(text="üì± –ü–æ Telegram ID", callback_data="search_user_by_telegram"))
    builder.row(types.InlineKeyboardButton(text="üìù –ü–æ –æ–ø–∏—Å–∞–Ω–∏—é", callback_data="search_user_by_description"))
    builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="users"))
    
    await callback.message.edit_text(
        "üîç **–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(Text("search_user_by_name"), AuthFilter())
async def search_user_by_name(callback: types.CallbackQuery, state: FSMContext):
    """Start search by username"""
    await callback.answer()
    await state.set_state(UserStates.search_username)
    
    await callback.message.edit_text(
        "üîç **–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="search_users_menu")
        ]])
    )

@router.message(StateFilter(UserStates.search_username), AuthFilter())
async def handle_search_username(message: types.Message, state: FSMContext):
    """Handle username search input"""
    search_term = message.text.strip()
    
    if not search_term:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    try:
        # Get all users and filter by username
        all_users = await sdk.get_all_users()
        filtered_users = [
            user for user in all_users 
            if search_term.lower() in user.get('username', '').lower()
        ]
        
        if not filtered_users:
            await message.answer(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∏–º–µ–Ω–µ–º —Å–æ–¥–µ—Ä–∂–∞—â–∏–º '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [
                        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="search_users_menu")
                    ]
                ])
            )
            return
        
        # Store results and show
        await state.update_data(users=filtered_users, page=0)
        await state.set_state(UserStates.selecting_user)
        await show_users_page(message, filtered_users, 0, state)
        
    except Exception as e:
        logger.error(f"Error searching users: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="search_users_menu")
                ]
            ])
        )

@router.callback_query(Text("search_user_by_telegram"), AuthFilter())
async def search_user_by_telegram(callback: types.CallbackQuery, state: FSMContext):
    """Start search by Telegram ID"""
    await callback.answer()
    await state.set_state(UserStates.search_telegram_id)
    
    await callback.message.edit_text(
        "üì± **–ü–æ–∏—Å–∫ –ø–æ Telegram ID**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="search_users_menu")
            ]
        ])
    )

@router.message(StateFilter(UserStates.search_telegram_id), AuthFilter())
async def handle_search_telegram_id(message: types.Message, state: FSMContext):
    """Handle Telegram ID search input"""
    try:
        telegram_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID (—á–∏—Å–ª–æ)")
        return
    
    try:
        # Get all users and filter by telegram_id
        all_users = await sdk.get_all_users()
        filtered_users = [
            user for user in all_users 
            if user.get('telegram_id') == telegram_id
        ]
        
        if not filtered_users:
            await message.answer(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [
                        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="search_users_menu")
                    ]
                ])
            )
            return
        
        # Show user details directly if found
        user = filtered_users[0]
        await state.update_data(selected_user=user)
        await state.set_state(UserStates.viewing_user)
        await show_user_details(message, user, state)
        
    except Exception as e:
        logger.error(f"Error searching users by telegram ID: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="search_users_menu")
                ]
            ])
        )

# ================ CREATE USER FUNCTIONALITY ================

@router.callback_query(Text("create_user"), AuthFilter())
async def start_create_user(callback: types.CallbackQuery, state: FSMContext):
    """Start user creation process"""
    await callback.answer()
    await state.clear()
    await state.set_state(UserStates.enter_username)
    
    await callback.message.edit_text(
        "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
        "**–®–∞–≥ 1/4:** –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
        "‚ÑπÔ∏è –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã _ -",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="users")
            ]
        ])
    )

@router.message(StateFilter(UserStates.enter_username), AuthFilter())
async def handle_username_input(message: types.Message, state: FSMContext):
    """Handle username input"""
    username = message.text.strip()
    
    # Validate username
    if not re.match(r'^[a-zA-Z0-9_-]+$', username) or len(username) < 3:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
            "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
            "‚Ä¢ –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞\n"
            "‚Ä¢ –¢–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _ –∏ -"
        )
        return
    
    await state.update_data(username=username)
    await state.set_state(UserStates.enter_telegram_id)
    
    await message.answer(
        "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
        f"‚úÖ **–ò–º—è:** {username}\n\n"
        "**–®–∞–≥ 2/4:** –í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
        "‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ 0 –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –µ—Å–ª–∏ Telegram ID –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_telegram_id"),
                types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="users")
            ]
        ])
    )

@router.message(StateFilter(UserStates.enter_telegram_id), AuthFilter())
async def handle_telegram_id_input(message: types.Message, state: FSMContext):
    """Handle Telegram ID input"""
    try:
        telegram_id = int(message.text.strip())
        if telegram_id < 0:
            raise ValueError("Negative ID")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ) –∏–ª–∏ 0")
        return
    
    data = await state.get_data()
    username = data.get('username')
    
    await state.update_data(telegram_id=telegram_id if telegram_id > 0 else None)
    await state.set_state(UserStates.enter_description)
    
    await message.answer(
        "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
        f"‚úÖ **–ò–º—è:** {username}\n"
        f"‚úÖ **Telegram ID:** {telegram_id if telegram_id > 0 else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        "**–®–∞–≥ 3/4:** –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
        "‚ÑπÔ∏è –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_description"),
                types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="users")
            ]
        ])
    )

@router.callback_query(Text("skip_telegram_id"), AuthFilter())
async def skip_telegram_id(callback: types.CallbackQuery, state: FSMContext):
    """Skip Telegram ID input"""
    await callback.answer()
    
    data = await state.get_data()
    username = data.get('username')
    
    await state.update_data(telegram_id=None)
    await state.set_state(UserStates.enter_description)
    
    await callback.message.edit_text(
        "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
        f"‚úÖ **–ò–º—è:** {username}\n"
        f"‚úÖ **Telegram ID:** –ù–µ —É–∫–∞–∑–∞–Ω\n\n"
        "**–®–∞–≥ 3/4:** –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_description"),
                types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="users")
            ]
        ])
    )

@router.message(StateFilter(UserStates.enter_description), AuthFilter())
async def handle_description_input(message: types.Message, state: FSMContext):
    """Handle description input"""
    description = message.text.strip()
    
    if len(description) > 200:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    data = await state.get_data()
    username = data.get('username')
    telegram_id = data.get('telegram_id')
    
    await state.update_data(description=description)
    await state.set_state(UserStates.enter_traffic_limit)
    
    await message.answer(
        "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
        f"‚úÖ **–ò–º—è:** {username}\n"
        f"‚úÖ **Telegram ID:** {telegram_id or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"‚úÖ **–û–ø–∏—Å–∞–Ω–∏–µ:** {description}\n\n"
        "**–®–∞–≥ 4/4:** –í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞:\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ `10GB` - 10 –≥–∏–≥–∞–±–∞–π—Ç\n"
        "‚Ä¢ `500MB` - 500 –º–µ–≥–∞–±–∞–π—Ç\n"
        "‚Ä¢ `1TB` - 1 —Ç–µ—Ä–∞–±–∞–π—Ç\n"
        "‚Ä¢ `0` - –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="‚àû –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", callback_data="unlimited_traffic"),
                types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="users")
            ]
        ])
    )

@router.callback_query(Text("skip_description"), AuthFilter())
async def skip_description(callback: types.CallbackQuery, state: FSMContext):
    """Skip description input"""
    await callback.answer()
    
    data = await state.get_data()
    username = data.get('username')
    telegram_id = data.get('telegram_id')
    
    await state.update_data(description="")
    await state.set_state(UserStates.enter_traffic_limit)
    
    await callback.message.edit_text(
        "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
        f"‚úÖ **–ò–º—è:** {username}\n"
        f"‚úÖ **Telegram ID:** {telegram_id or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"‚úÖ **–û–ø–∏—Å–∞–Ω–∏–µ:** –ù–µ —É–∫–∞–∑–∞–Ω–æ\n\n"
        "**–®–∞–≥ 4/4:** –í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="‚àû –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", callback_data="unlimited_traffic"),
                types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="users")
            ]
        ])
    )

def parse_traffic_limit(traffic_str: str) -> int:
    """Parse traffic limit string to bytes"""
    traffic_str = traffic_str.upper().strip()
    
    if traffic_str == "0":
        return 0
        
    # Extract number and unit
    import re
    match = re.match(r'^(\d+(?:\.\d+)?)\s*(GB|MB|TB|G|M|T)?$', traffic_str)
    if not match:
        raise ValueError("Invalid format")
    
    amount = float(match.group(1))
    unit = match.group(2) or "GB"
    
    # Convert to bytes
    multipliers = {
        'MB': 1024**2, 'M': 1024**2,
        'GB': 1024**3, 'G': 1024**3, 
        'TB': 1024**4, 'T': 1024**4
    }
    
    return int(amount * multipliers[unit])

@router.message(StateFilter(UserStates.enter_traffic_limit), AuthFilter())
async def handle_traffic_limit_input(message: types.Message, state: FSMContext):
    """Handle traffic limit input"""
    try:
        traffic_limit = parse_traffic_limit(message.text.strip())
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–∏–º–∏—Ç–∞ —Ç—Ä–∞—Ñ–∏–∫–∞.\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"
            "‚Ä¢ `10GB` –∏–ª–∏ `10G`\n"
            "‚Ä¢ `500MB` –∏–ª–∏ `500M`\n"
            "‚Ä¢ `1TB` –∏–ª–∏ `1T`\n"
            "‚Ä¢ `0` - –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
        )
        return
    
    data = await state.get_data()
    await state.update_data(traffic_limit=traffic_limit)
    
    # Show confirmation
    await show_create_user_confirmation(message, state, data)

@router.callback_query(Text("unlimited_traffic"), AuthFilter())
async def set_unlimited_traffic(callback: types.CallbackQuery, state: FSMContext):
    """Set unlimited traffic"""
    await callback.answer()
    
    data = await state.get_data()
    await state.update_data(traffic_limit=0)
    
    # Show confirmation
    await show_create_user_confirmation(callback.message, state, data)

async def show_create_user_confirmation(message: types.Message, state: FSMContext, data: dict):
    """Show user creation confirmation"""
    username = data.get('username')
    telegram_id = data.get('telegram_id')
    description = data.get('description', '')
    traffic_limit = data.get('traffic_limit', 0)
    
    traffic_text = format_bytes(traffic_limit) if traffic_limit > 0 else "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
    
    confirmation_text = (
        "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ**\n\n"
        f"**–ò–º—è:** {username}\n"
        f"**Telegram ID:** {telegram_id or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"**–õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞:** {traffic_text}\n\n"
        "–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏?"
    )
    
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data="confirm_create_user"))
    builder.row(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="users"))
    
    await message.edit_text(
        confirmation_text,
        reply_markup=builder.as_markup()
    )

@router.callback_query(Text("confirm_create_user"), AuthFilter())
async def confirm_create_user(callback: types.CallbackQuery, state: FSMContext):
    """Confirm user creation"""
    await callback.answer()
    
    data = await state.get_data()
    
    try:
        user_data = {
            "username": data.get('username'),
            "telegram_id": data.get('telegram_id'),
            "description": data.get('description', ''),
            "traffic_limit": data.get('traffic_limit', 0),
            "is_active": True
        }
        
        # Remove None values
        user_data = {k: v for k, v in user_data.items() if v is not None}
        
        success = await sdk.create_user(user_data)
        
        if success:
            await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω", show_alert=True)
            await state.clear()
            await callback.message.edit_text(
                f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!**\n\n"
                f"–ò–º—è: **{user_data['username']}**\n"
                f"–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [
                        types.InlineKeyboardButton(text="üë• –ö —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users"),
                        types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                    ]
                ])
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error creating user: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)

# ================ STATISTICS ================

@router.callback_query(Text("users_stats"), AuthFilter())
async def show_users_statistics(callback: types.CallbackQuery):
    """Show users statistics"""
    await callback.answer()
    
    try:
        stats = await sdk.get_users_stats()
        
        if stats:
            stats_text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
            stats_text += f"üë• **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {stats.get('total', 0)}\n"
            stats_text += f"üü¢ **–ê–∫—Ç–∏–≤–Ω—ã—Ö:** {stats.get('active', 0)}\n"
            stats_text += f"üî¥ **–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö:** {stats.get('inactive', 0)}\n"
            stats_text += f"üìä **–û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫:** {format_bytes(stats.get('total_traffic', 0))}\n"
            stats_text += f"‚¨áÔ∏è **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:** {format_bytes(stats.get('used_traffic', 0))}\n"
            stats_text += f"‚¨ÜÔ∏è **–î–æ—Å—Ç—É–ø–Ω–æ:** {format_bytes(stats.get('available_traffic', 0))}\n"
        else:
            stats_text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞**"
            
        await callback.message.edit_text(
            stats_text,
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="users_stats"),
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="users")
                ]
            ])
        )
        
    except Exception as e:
        logger.error(f"Error getting users stats: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="users")
                ]
            ])
        )
