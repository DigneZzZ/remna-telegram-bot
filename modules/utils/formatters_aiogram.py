"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ Aiogram –±–æ—Ç–µ
"""
import datetime
from typing import Dict, Any, List

def format_bytes(bytes_value: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–π—Ç—ã –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    if bytes_value == 0:
        return "0 B"
    
    units = ["B", "KB", "MB", "GB", "TB"]
    size = abs(bytes_value)
    unit_index = 0
    
    while size >= 1024 and unit_index < len(units) - 1:
        size /= 1024
        unit_index += 1
    
    if unit_index == 0:
        return f"{int(size)} {units[unit_index]}"
    else:
        return f"{size:.1f} {units[unit_index]}"

def format_duration(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    if seconds <= 0:
        return "0 —Å–µ–∫"
    
    units = [
        ("–¥–Ω", 86400),
        ("—á", 3600),
        ("–º–∏–Ω", 60),
        ("—Å–µ–∫", 1)
    ]
    
    result = []
    for name, unit_seconds in units:
        if seconds >= unit_seconds:
            count = seconds // unit_seconds
            seconds %= unit_seconds
            result.append(f"{count} {name}")
    
    return " ".join(result[:2])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 2 —Å–∞–º—ã–µ –±–æ–ª—å—à–∏–µ –µ–¥–∏–Ω–∏—Ü—ã

def format_datetime(dt_string: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è"""
    try:
        if isinstance(dt_string, str):
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            for fmt in ["%Y-%m-%dT%H:%M:%S.%fZ", "%Y-%m-%dT%H:%M:%SZ", "%Y-%m-%d %H:%M:%S"]:
                try:
                    dt = datetime.datetime.strptime(dt_string, fmt)
                    break
                except ValueError:
                    continue
            else:
                return dt_string  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
        else:
            dt = dt_string
        
        return dt.strftime("%d.%m.%Y %H:%M")
    except:
        return str(dt_string)

def format_user_details(user: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    message = f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get('username', 'N/A')}**\n\n"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    message += f"üÜî UUID: `{user.get('uuid', 'N/A')}`\n"
    message += f"üìß Email: `{user.get('email', 'N/A')}`\n"
    message += f"üè∑Ô∏è –ò–º—è: `{user.get('username', 'N/A')}`\n"
    
    # –°—Ç–∞—Ç—É—Å
    is_active = user.get('isActive', False)
    status_emoji = "‚úÖ" if is_active else "‚ùå"
    message += f"{status_emoji} –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
    
    # –î–∞—Ç—ã
    if user.get('createdAt'):
        message += f"üìÖ –°–æ–∑–¥–∞–Ω: {format_datetime(user['createdAt'])}\n"
    
    if user.get('expiryTime'):
        message += f"‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: {format_datetime(user['expiryTime'])}\n"
    
    # –¢—Ä–∞—Ñ–∏–∫
    if 'usedTrafficBytes' in user:
        used_traffic = user['usedTrafficBytes']
        traffic_limit = user.get('trafficLimitBytes', 0)
        
        message += f"\nüìä **–¢—Ä–∞—Ñ–∏–∫:**\n"
        message += f"üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {format_bytes(used_traffic)}\n"
        
        if traffic_limit > 0:
            message += f"üìä –õ–∏–º–∏—Ç: {format_bytes(traffic_limit)}\n"
            percentage = (used_traffic / traffic_limit) * 100 if traffic_limit > 0 else 0
            message += f"üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {percentage:.1f}%\n"
        else:
            message += f"üìä –õ–∏–º–∏—Ç: –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π\n"
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if 'connectionsCount' in user:
        message += f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {user['connectionsCount']}\n"
    
    # Inbound'—ã
    if user.get('inbounds'):
        inbounds_count = len(user['inbounds'])
        message += f"üì° Inbound'–æ–≤: {inbounds_count}\n"
    
    return message

def format_node_details(node: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –Ω–æ–¥—ã"""
    message = f"üñ•Ô∏è **–°–µ—Ä–≤–µ—Ä: {node.get('name', 'N/A')}**\n\n"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    message += f"üÜî UUID: `{node.get('uuid', 'N/A')}`\n"
    message += f"üåê –ê–¥—Ä–µ—Å: `{node.get('address', 'N/A')}`\n"
    message += f"üîå –ü–æ—Ä—Ç: `{node.get('port', 'N/A')}`\n"
    message += f"üåç –°—Ç—Ä–∞–Ω–∞: `{node.get('countryCode', 'N/A')}`\n"
    
    # –°—Ç–∞—Ç—É—Å
    is_disabled = node.get('isDisabled', True)
    is_connected = node.get('isConnected', False)
    
    if is_disabled:
        status = "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
    elif is_connected:
        status = "‚úÖ –û–Ω–ª–∞–π–Ω"
    else:
        status = "‚ö†Ô∏è –û—Ñ—Ñ–ª–∞–π–Ω"
    
    message += f"üì∂ –°—Ç–∞—Ç—É—Å: {status}\n"
    
    # –¢—Ä–∞—Ñ–∏–∫ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    multiplier = node.get('consumptionMultiplier', 1.0)
    message += f"üìä –ú–Ω–æ–∂–∏—Ç–µ–ª—å: `{multiplier}x`\n"
    
    traffic_limit = node.get('trafficLimitBytes', 0)
    if traffic_limit > 0:
        message += f"üìà –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: {format_bytes(traffic_limit)}\n"
    else:
        message += f"üìà –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π\n"
    
    # –î–∞—Ç—ã
    if node.get('createdAt'):
        message += f"üìÖ –°–æ–∑–¥–∞–Ω: {format_datetime(node['createdAt'])}\n"
    
    if node.get('lastConnected'):
        message += f"üîó –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {format_datetime(node['lastConnected'])}\n"
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    if 'usersCount' in node:
        message += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {node['usersCount']}\n"
    
    return message

def format_inbound_details(inbound: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏ inbound"""
    message = f"üì° **Inbound: {inbound.get('tag', 'N/A')}**\n\n"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    message += f"üÜî UUID: `{inbound.get('uuid', 'N/A')}`\n"
    message += f"üè∑Ô∏è –¢–µ–≥: `{inbound.get('tag', 'N/A')}`\n"
    message += f"üîß –ü—Ä–æ—Ç–æ–∫–æ–ª: `{inbound.get('type', 'N/A')}`\n"
    message += f"üîå –ü–æ—Ä—Ç: `{inbound.get('port', 'N/A')}`\n"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    if inbound.get('settings'):
        settings = inbound['settings']
        if isinstance(settings, dict):
            for key, value in settings.items():
                if key not in ['clients', 'fallbacks']:
                    message += f"‚öôÔ∏è {key}: `{value}`\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if 'users' in inbound:
        users_stats = inbound['users']
        enabled_users = users_stats.get('enabled', 0)
        disabled_users = users_stats.get('disabled', 0)
        total_users = enabled_users + disabled_users
        message += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {enabled_users}/{total_users} –∞–∫—Ç–∏–≤–Ω—ã—Ö\n"
    
    if 'nodes' in inbound:
        nodes_stats = inbound['nodes']
        enabled_nodes = nodes_stats.get('enabled', 0)
        disabled_nodes = nodes_stats.get('disabled', 0)
        total_nodes = enabled_nodes + disabled_nodes
        message += f"üñ•Ô∏è –°–µ—Ä–≤–µ—Ä—ã: {enabled_nodes}/{total_nodes} –∞–∫—Ç–∏–≤–Ω—ã—Ö\n"
    
    # –î–∞—Ç—ã
    if inbound.get('createdAt'):
        message += f"üìÖ –°–æ–∑–¥–∞–Ω: {format_datetime(inbound['createdAt'])}\n"
    
    return message

def format_host_details(host: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ö–æ—Å—Ç–∞"""
    message = f"üåê **–•–æ—Å—Ç: {host.get('remark', 'N/A')}**\n\n"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    message += f"üÜî UUID: `{host.get('uuid', 'N/A')}`\n"
    message += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: `{host.get('remark', 'N/A')}`\n"
    message += f"üåê –ê–¥—Ä–µ—Å: `{host.get('address', 'N/A')}`\n"
    message += f"üîå –ü–æ—Ä—Ç: `{host.get('port', 'N/A')}`\n"
    
    # TLS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if host.get('sni'):
        message += f"üîí SNI: `{host['sni']}`\n"
    
    if host.get('host'):
        message += f"üè† Host: `{host['host']}`\n"
    
    if host.get('path'):
        message += f"üõ£Ô∏è –ü—É—Ç—å: `{host['path']}`\n"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if host.get('alpn'):
        message += f"üîÑ ALPN: `{host['alpn']}`\n"
    
    if host.get('fingerprint'):
        message += f"üëÜ Fingerprint: `{host['fingerprint']}`\n"
    
    allow_insecure = host.get('allowInsecure', False)
    message += f"üîê Allow Insecure: {'–î–∞' if allow_insecure else '–ù–µ—Ç'}\n"
    
    # Inbound
    if host.get('inbound'):
        inbound = host['inbound']
        if isinstance(inbound, dict):
            message += f"üì° Inbound: `{inbound.get('tag', 'N/A')}`\n"
    
    return message

def format_system_stats(stats: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    message = "üìä **–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    if 'users' in stats:
        users = stats['users']
        message += f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
        message += f"   ‚Ä¢ –í—Å–µ–≥–æ: {users.get('total', 0)}\n"
        message += f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {users.get('active', 0)}\n"
        message += f"   ‚Ä¢ –û–Ω–ª–∞–π–Ω: {users.get('online', 0)}\n\n"
    
    # –°–µ—Ä–≤–µ—Ä—ã
    if 'nodes' in stats:
        nodes = stats['nodes']
        message += f"üñ•Ô∏è **–°–µ—Ä–≤–µ—Ä—ã:**\n"
        message += f"   ‚Ä¢ –í—Å–µ–≥–æ: {nodes.get('total', 0)}\n"
        message += f"   ‚Ä¢ –û–Ω–ª–∞–π–Ω: {nodes.get('online', 0)}\n"
        message += f"   ‚Ä¢ –û—Ñ–ª–∞–π–Ω: {nodes.get('offline', 0)}\n\n"
    
    # –¢—Ä–∞—Ñ–∏–∫
    if 'traffic' in stats:
        traffic = stats['traffic']
        message += f"üìà **–¢—Ä–∞—Ñ–∏–∫:**\n"
        message += f"   ‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {format_bytes(traffic.get('today', 0))}\n"
        message += f"   ‚Ä¢ –≠—Ç–æ—Ç –º–µ—Å—è—Ü: {format_bytes(traffic.get('thisMonth', 0))}\n"
        message += f"   ‚Ä¢ –í—Å–µ–≥–æ: {format_bytes(traffic.get('total', 0))}\n\n"
    
    # –°–∏—Å—Ç–µ–º–∞
    if 'system' in stats:
        system = stats['system']
        message += f"üíª **–°–∏—Å—Ç–µ–º–∞:**\n"
        if 'cpu' in system:
            message += f"   ‚Ä¢ CPU: {system['cpu']:.1f}%\n"
        if 'memory' in system:
            memory = system['memory']
            used = memory.get('used', 0)
            total = memory.get('total', 1)
            percentage = (used / total) * 100 if total > 0 else 0
            message += f"   ‚Ä¢ –ü–∞–º—è—Ç—å: {format_bytes(used)}/{format_bytes(total)} ({percentage:.1f}%)\n"
        if 'disk' in system:
            disk = system['disk']
            used = disk.get('used', 0)
            total = disk.get('total', 1)
            percentage = (used / total) * 100 if total > 0 else 0
            message += f"   ‚Ä¢ –î–∏—Å–∫: {format_bytes(used)}/{format_bytes(total)} ({percentage:.1f}%)\n"
    
    return message

def truncate_text(text: str, max_length: int = 4000) -> str:
    """–û–±—Ä–µ–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã –¥–ª—è Telegram"""
    if len(text) <= max_length:
        return text
    
    return text[:max_length - 3] + "..."

def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown"""
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    return text
